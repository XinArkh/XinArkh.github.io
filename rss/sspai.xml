<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>少数派</title><link>https://sspai.com</link><description>少数派RSS Feed-文章完整抓取版</description><language>zh-CN</language><managingEditor>contact@sspai.com (少数派)</managingEditor><lastBuildDate>Sun, 07 Jul 2024 08:00:04 GMT</lastBuildDate><generator>RSSEngine powered by PyRSS2Gen-1.1.0</generator><image><url>https://i0.hdslb.com/bfs/face/bbe80dc05f67e9543a33b067764227b02504bfa0.jpg</url><title>icon</title><link>https://i0.hdslb.com/bfs/face/bbe80dc05f67e9543a33b067764227b02504bfa0.jpg</link></image><item><title>「都市丽人」小跑一夏：我如何让跑步成为习惯</title><link>https://sspai.com/post/90189</link><description>&lt;div&gt;&lt;p&gt;也许是因为冬天攒的膘太过沉重，也许是因为男朋友跑步半年已有了长足的进步，又或者是因为被司机大哥的话刺激到了。有天赶出租车跑了几步，坐上车还在喘，司机大哥说：「你是在喘吗？这么年轻，身体这么差吗？」&lt;/p&gt;&lt;p&gt;总之，夏天到了，我又又又开始跑步了。&lt;/p&gt;&lt;p&gt;虽说跑步是最简单的运动，只需要将一条腿放在另一条腿前面。但真要开跑，还是有许多障碍。比如下班回家已经很累了，再换上运动装去外面跑步简直是天方夜谭。去健身房跑步的话，一来一回加上洗澡的时间就得 2 个小时起步，回来歇一会儿就得准备睡觉了，实在不是一个可持续的方案。通勤路上跑步又会有新的问题：上班时空调太足，需要穿厚点，跑步时会出汗，又需要穿薄点，如何选择合适的衣服？&lt;/p&gt;&lt;p&gt;还有女性专属的难题：跑步就得穿运动文胸，但运动文胸日常穿又有点勒。有没有哪种运动文胸可以上班穿不太勒，下班跑步时还能提供足够的支撑？&lt;/p&gt;&lt;p&gt;除了装备问题，开始跑步后还有很多其他问题需要解决。比如久坐的打工人可能会像我一样，刚开始跑步时会小腿疼，那应该如何缓解？如何知道自己跑步有没有进步？都说跑步伤膝盖，那我还能跑吗？&lt;/p&gt;&lt;p&gt;这样看来，跑步是个系统工程，有很多琐碎的细节需要解决。经过一个多月的探索，我终于形成了一套可行的解决方案。我也越跑越轻松，3 公里用时从 30 分钟缩短到 24 分钟（刚刚达到一个跑起来不喘的程度）。今天和大家分享一下，希望大家也能找到适合自己的跑步方案。&lt;/p&gt;&lt;p&gt;（本文不是写给专业跑者的，我只是一个跑步菜鸟，分享一些入门经验，说我成绩不好的，你说对了。）&lt;/p&gt;&lt;h2&gt;「都市丽人」的跑步装备&lt;/h2&gt;&lt;p&gt;要养成一个习惯就得给它找一个 trigger（触发），让大脑形成稳定的链接，不断强化 trigger 和后续动作的联系，形成一个不用过脑子的习惯。我给跑步选定的 trigger 就是下班。我日常通勤距离大约有 4 公里，对于我这个好久不运动的人来说刚刚好。平时骑车回家需要 20 多分钟，跑步则需要 30 分钟左右，慢慢跑得快了甚至能比骑车更省时间。另外，我也不用为了运动额外划出 2 个小时，心理上的压力就小了很多。想要下班就开跑，就得有适合上班和跑步两个场景的装备。&lt;/p&gt;&lt;h3&gt;日常也能穿的运动文胸&lt;/h3&gt;&lt;p&gt;男朋友建议我下班后可以跑步回家，我第一反应就是：「不行，我不可能一整天都穿着运动文胸。」但作为运动人体科学专业毕业的男朋友没有轻易放弃，他立马去问了在内衣公司上班的师姐：「有没有适合运动穿的日常文胸？」师姐作为业内人士给了一些靠谱的建议：首先，日常文胸很难适合跑步穿，因为跑步时胸部的起伏还是比较大，日常文胸无法提供足够的支撑，最好选择中高强度的运动文胸。具体选购时最好选择后扣式的运动文胸（不要买固定底围的），平时可以把底围调松，跑之前紧紧底围、紧紧肩带就可以增加支撑。最后，不同厂家对于中高强度的定义不同，设计也不同，建议到线下店试试最靠谱。&lt;/p&gt;&lt;p&gt;我专门到线下去试了几家，最后买了个安德玛高强度后扣式的运动内衣，平时穿着不会有太强的压迫感，跑步前紧一下肩带就足够减震。由于办公室空调太足，我一般上班都是长袖长裤，下班要跑步就有点热了，最近我摸索出来一套比较完美的上衣公式，那就是背心 + 衬衫 / 薄外套。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/255a4427327473582da8d81dc9e6259a.JPEG" src="https://cdnfile.sspai.com/2024/07/03/255a4427327473582da8d81dc9e6259a.JPEG"/&gt;&lt;/figure&gt;&lt;p&gt;在办公室穿着薄麻衫 / 衬衫不仅保暖而且避免一身都是运动装，显得不太正式。下了班跑步的时候就把衬衫一脱系到腰上 / 肩上，也不影响跑步。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/8ad5c659ab942176997dbe697dff095a.JPEG" src="https://cdnfile.sspai.com/2024/07/03/8ad5c659ab942176997dbe697dff095a.JPEG"/&gt;&lt;/figure&gt;&lt;h3&gt;兼顾跑步与上班的裤子&lt;/h3&gt;&lt;p&gt;上文说了我怕冷所以日常都穿长裤，如果公司对着装没有特别要求的话，其实跑步只要穿宽松透气的裤子就行了，紧身的瑜伽裤和运动短裤也可以。但我穿紧身裤子会觉得有点难受，久坐也不适合穿很紧身的裤子，短裤又冻腿。所以我的目标就是想选一条宽松的运动长裤。&lt;/p&gt;&lt;p&gt;在迪卡侬试了好几个都不满意，最后在优衣库选到了一条（上图穿的）。透气的速干面料，宽松但不邋遢的裤型，偏薄但也不冷，完美（就是容易撞衫）。&lt;/p&gt;&lt;p&gt;我每周跑大概 2-3 次，只有跑步日会穿一身运动装，其他时间还是可以穿自己喜欢的衣服。&lt;/p&gt;&lt;h3&gt;适合扁平足的跑鞋&lt;/h3&gt;&lt;p&gt;我是天生的扁平足，有扁平足的跑者在跑步时，踝关节更容易外翻，膝关节更容易内扣，外翻和内扣，会让踝、膝关节受力不均匀，可能会增加损伤的风险。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/article/85930a4d2baa790e7f1e017f8fcd7463.png" src="https://cdnfile.sspai.com/2024/07/03/article/85930a4d2baa790e7f1e017f8fcd7463.png"/&gt;&lt;/figure&gt;&lt;p&gt;所以，我选择有了足弓支撑的跑鞋。我买过两双有足弓支撑的鞋，一双是花椒家的冰淇淋鞋，一双是亚瑟士的越野跑鞋。对比之下，我还是觉得亚瑟士的跑鞋更加舒服，花椒的那双跑鞋更适合日常通勤穿着。另外，亚瑟士的款型比较休闲百搭，不像其他更专业的跑鞋，各种荧光色比较不好搭。&lt;/p&gt;&lt;p&gt;当然除了跑鞋，增加足部的肌肉力量，帮助建立足弓更为重要。&lt;/p&gt;&lt;p&gt;我是功能性扁平足，也叫做隐形扁平足，平躺时看我的足部是有足弓的，但是在跑步时，肌肉力量弱，无法帮助建立足弓，才出现扁平足。&lt;/p&gt;&lt;p&gt;男朋友说功能性扁平足并不少见，可以说多数儿童出生时都是扁平足&lt;sup&gt;1&lt;/sup&gt;，这不是疾病，只是发育没到位，就好比婴儿出生时头骨没有完全闭合。在后期爬行、走路过程中，肌肉力量慢慢加强，慢慢的建立了足弓。&lt;/p&gt;&lt;p&gt;男朋友说建立足弓需要锻炼一块常被大家忽略的肌肉——小腿前侧肌肉，术语叫做胫骨前肌至关重要。此外，他还说这块肌肉也是我跑步时小腿疼的「罪魁祸首」。&lt;/p&gt;&lt;h2&gt;无痛跑步更舒适&lt;/h2&gt;&lt;h3&gt;做好跑前热身，小腿就不痛&lt;/h3&gt;&lt;p&gt;我之前不喜欢跑步，还有一个原因就是：一跑步小腿前侧就疼。男朋友说这是跑前热身没做到位，小腿前侧的胫骨前肌没有被激活，跑前做做勾脚就不痛了。&lt;/p&gt;&lt;p&gt;他带着我做了 20 次勾脚后，再跑步果然就没有那么疼了。没做热身直接开跑的话，疼痛程度有 4～5 分，做完热身后疼痛只剩下 1～2 分了。剩下的 1～2 分，主要是因为我有扁平足外加副足舟骨。想要完全缓解，需要更长时间的肌肉力量练习。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/59ee5c2c70d62dc9e6c76a06cf489ffc.gif" src="https://cdnfile.sspai.com/2024/07/03/59ee5c2c70d62dc9e6c76a06cf489ffc.gif"/&gt;&lt;/figure&gt;&lt;p&gt;胫骨前肌，在跑步中担任着重担——建立足弓，吸收缓冲。平常走路时，胫骨前肌得到锻炼的机会比较少，可是跑步时需要胫骨前肌全力以赴，胫骨前肌跟不上跑步的速度，就只能用疼痛来表达不满。跑前热身，可以提前激活胫骨前肌，好比给胫骨前肌提个醒，接下来要全力以赴了。心理有了准备，面对工作中的困难，胫骨前肌也就不会那么疼痛。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/article/ddc291e5db0f6099cc67c150822d815a.gif" src="https://cdnfile.sspai.com/2024/07/03/article/ddc291e5db0f6099cc67c150822d815a.gif"/&gt;&lt;/figure&gt;&lt;h3&gt;循序渐进增加强度&lt;/h3&gt;&lt;p&gt;我从一开始就固定了公里数，只跑 3 公里，先把速度提起来再增加耐力。刚开始对于我来说三公里都很难，基本上跑个几百米就喘的不行，得走一截。所以刚开始我跑完 3 公里需要 30 分钟，但从心率上来看我确实是没偷懒的，心率到 140+ 我就喘得跑不动。如果有跟我一样虚的朋友，我建议一开始不要强迫自己，只要坚持跑完 3 公里就很棒了，感觉有点喘了就先走一段，心率和呼吸调整好再出发，慢慢的就可以歇的越来越少。&lt;/p&gt;&lt;p&gt;在过去的一个多月里，我的进步还是非常明显的。5 月 4 号的时候，我跑 3 公里需要用时 30 分钟，到了 6 月 18 号，我 22 分 57 秒就能跑完 3 公里，约莫也就一个多月。&lt;/p&gt;&lt;p&gt;另外最近天气炎热，我 18 号跑的时候心率有点控制不住了，直接 170+，后面我就不太敢跑了。跑完回来都有点中暑了，喝了藿香正气才舒服一些。夏天跑步要及时关注心率，不要为了成绩使劲跑，高温天气下心脏压力本来就很大了，等到秋天天气凉爽一些再追求成绩会更加安全。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/article/7147b7b81a658a0c027a1bc7b9214e5a.png" src="https://cdnfile.sspai.com/2024/07/03/article/7147b7b81a658a0c027a1bc7b9214e5a.png"/&gt;&lt;/figure&gt;&lt;h2&gt;我体会到的跑步益处&lt;/h2&gt;&lt;p&gt;都说跑步好、运动好，但如果无法融入生活，就不是真的好。这次跑步让我觉得最舒服的地方就是「无痛」，完全不用「自律」，也不用「控制」，就可以有很大的收获。&lt;/p&gt;&lt;h3&gt;手表数据见证我的进步&lt;/h3&gt;&lt;p&gt;从手表的客观数据中，我能看到跑步带来的健康益处。&lt;/p&gt;&lt;p&gt;有氧运动对于保持健康有很大的作用，这个道理我早就知道，但由于我本身心肺能力就很差，每次都是从入门到放弃，所以心肺从来就没好过。这次因为没有给自己定很严格的训练计划，反倒持续跑了一个半月，也才终于对我的健康有了一些明显的影响。&lt;/p&gt;&lt;p&gt;最明显的影响就是针对心肺能力的提升，主要的衡量指标是静息心率和最大摄氧量。关于手表如何测量静息心率、最大摄氧量，以及这些指标背后的含义，可以参照文章《&lt;a href="https://sspai.com/post/74805" target="_blank"&gt;手腕上的「心率检测」靠谱吗？智能手表能帮你了解哪些数据？&lt;/a&gt;》，这里我主要简要介绍下我是如何看这些指标的。&lt;/p&gt;&lt;p&gt;静息心率可以反映我们心脏每次跳动所输出的血量，而普通人的静息心率则在 60-90 次/分钟。除了运动，心情、睡眠也会影响静息心率，所以我们需要从一个月或者一年的时间跨度来看静息心率。从我静息心率的数据来看，我的静息心率从 63 次/分钟，降低至了 54 次/分钟。静息心率变低意味着，每次心跳可以输出更多血量，有氧能力也更强了。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/article/5ef14210cc132ee7a85145b4c0ad5ca2.png" src="https://cdnfile.sspai.com/2024/07/03/article/5ef14210cc132ee7a85145b4c0ad5ca2.png"/&gt;&lt;/figure&gt;&lt;h3&gt;跑步让我小了一号&lt;/h3&gt;&lt;p&gt;刚开始跑步的时候真的很沉重，不是重量上的沉重，而是自己感觉上的沉重，用中医的话来说就是湿气太重。跑了一个多月后明显感觉自己轻盈了很多，前几日跟许久没见的朋友约着见面，她一直说我瘦了很多，我不信，因为体重根本没变。晚上回来想那可能维度变了，于是量了一下，跟男朋友在家惊呼，腰围瘦了 5 厘米，我这个梨形身材最难瘦的大腿竟然瘦了 2 厘米，接下来我跑的会更有动力！&lt;/p&gt;&lt;figure&gt;&lt;img alt="" data-original="https://cdnfile.sspai.com/2024/07/03/791762ef5ad0c53184b1cd06968fb71c.png" src="https://cdnfile.sspai.com/2024/07/03/791762ef5ad0c53184b1cd06968fb71c.png"/&gt;&lt;img alt="" data-original="https://cdnfile.sspai.com/2024/07/03/bdd4ca475dd8c634bbdd8825065cfce7.png" src="https://cdnfile.sspai.com/2024/07/03/bdd4ca475dd8c634bbdd8825065cfce7.png"/&gt;&lt;/figure&gt;&lt;p&gt;另外，我五月份的跑量也并不多，累计只有 33 公里。这一个月里，我也没有节食，每天都吃的不少。原来，只要方法正确，瘦身也可以很简单。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/article/5866fd6062fbc1ff71aa53230feea470.png" src="https://cdnfile.sspai.com/2024/07/03/article/5866fd6062fbc1ff71aa53230feea470.png"/&gt;&lt;/figure&gt;&lt;h3&gt;跑步出汗，让皮肤更好&lt;/h3&gt;&lt;p&gt;我是一个懒人，平常很少敷面膜、防晒都懒得涂。相较于面膜由外而内的补水，跑步出汗，是由内而外的补水。排汗时，毛孔打开，排汗结束，或许还能收缩毛孔，让皮肤更加细腻。这点在我男朋友身上体现得更加明显，他已经跑步有半年了，明显感觉他皮肤的毛孔更细了。&lt;/p&gt;&lt;p&gt;出汗虽好，但是也注意别着凉。刚跑完步，别着急进超市、办公室、地铁等有空调的地方，等落了汗再进。如果你跑步的时间比较长，还要记得注意补水。&lt;/p&gt;&lt;p&gt;当然，即便不出汗，跑步这类有氧运动也能让皮肤更好。日本教授 Nishikori 在 2023 年开展的一项研究证实了这一结论。Nishikori 选取骑自行车这一有氧训练方式，招募了 56 名女性，安排她们每周骑车 2 次，每次 30 分钟。在持续 4 周的训练后发现，女性们的皮肤松弛减低、弹性增加，为皮肤提供支撑的细胞外基质更密集，生成皮肤胶原蛋白的基因也更活跃。&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;夏日里跑步，记得防暑。出门前先查看下暑热指数再决定要不要出门，最近各地都在高温和暴雨预警，千万不要盲目出门跑步。更加详细的内容，可以参看我之前写的文章《&lt;a href="https://sspai.com/post/74342" target="_blank"&gt;敬畏热度、保持热情：如何在夏季坚持跑步&lt;/a&gt;》。&lt;/p&gt;&lt;h3&gt;周末去公园跑步，解压撸猫&lt;/h3&gt;&lt;p&gt;我住处周围有好几个公园，但日常没有时间去，之前一到周末就宅在家里刷剧，现在因为要跑步所以周末也可以有理由出门。之前爆火的公园 20 分钟理论确实有道理，尤其是现在的公园基本都有猫猫原住民，不仅能看绿色还能撸猫，可谓是打工人的解压套餐了。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/article/910908da4a38aeb8ac3dab5300af2c7a.jpeg" src="https://cdnfile.sspai.com/2024/07/03/article/910908da4a38aeb8ac3dab5300af2c7a.jpeg"/&gt;&lt;/figure&gt;&lt;p&gt;上周在一个之前从来没去过的公园跑步，看到堪比赶集的人流，大家都在环公园步道上走或跑，突然让我想到那句「人生是旷野」，城市其实也是旷野，只是我每天两点一线，忘了除此之外的世界，感谢跑步让我重新打开探索旷野的口子。&lt;/p&gt;&lt;p&gt;把跑步融入生活，循序渐进，用手表记录身体的变化，用可视化的数据追踪自己的健康状况，选择适合自己的才是最可持续的。&lt;/p&gt;&lt;p&gt;慢慢来，总能抵达。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/629adf985398637a73966e02906806fc.jpg" src="https://cdnfile.sspai.com/2024/07/03/629adf985398637a73966e02906806fc.jpg"/&gt;&lt;/figure&gt;&lt;p&gt;&amp;gt; 下载少数派 &lt;a href="https://sspai.com/page/client" target="_blank"&gt;客户端&lt;/a&gt;、关注 &lt;a href="https://www.xiaohongshu.com/user/profile/63f5d65d000000001001d8d4" target="_blank"&gt;少数派小红书&lt;/a&gt;，感受精彩数字生活 🍃&lt;/p&gt;&lt;p&gt;&amp;gt; 实用、好用的 &lt;a href="https://sspai.com/mall" target="_blank"&gt;正版软件&lt;/a&gt;，少数派为你呈现 🚀&lt;/p&gt;&lt;/div&gt;</description><author>文猫</author><guid>https://sspai.com/post/90189</guid><pubDate>Sun, 07 Jul 2024 07:00:00 GMT</pubDate></item><item><title>Heptabase + Logseq + Readwise：我的知识管理与输出实践</title><link>https://sspai.com/post/90223</link><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;Matrix&lt;/strong&gt; &lt;strong&gt;首页推荐&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;&lt;a href="https://sspai.com/matrix" target="_blank"&gt;Matrix&lt;/a&gt; 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。&lt;/p&gt;&lt;p&gt;文章代表作者个人观点，少数派仅对标题和排版略作修改。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;作为一个效率工具控，我的个人知识管理与信息管理可以说是最重要的一部分。其实本没有想要写这篇文章，有太多的先例实践在前，而自己也只是一种前人基础上的微调优化，常常没有什么信心去分享，而这周重新搭建和优化了一下自己的知识管理系统，很开心，有一种想要记录下来的冲动。&lt;/p&gt;&lt;p&gt;理论的部分，如「费曼学习法」「卢曼卡片盒笔记法」已经有很多很好的介绍文章，不再花篇幅介绍了，而更多的是阐述我使用的软件工具实践，希望能够对大家有所帮助。&lt;/p&gt;&lt;h2&gt;信息获取与管理&lt;/h2&gt;&lt;p&gt;不知道从什么时候起，其实能很明显感受到自己对网络世界信息的依赖。可能有别于游戏瘾或是经常被诟病的短视频算法鸦片，我的这种依赖并不是机械性地刷刷刷，或是面对焦虑时的逃避，而是一种对于信息获取的渴求，甚至内化为了一种生活方式。因为我对自己的信息筛选和消化能力颇有信心，所以其实一直以来没有在输入源和整理上花太多的心思。&lt;/p&gt;&lt;p&gt;而随着自己接触和感兴趣的领域越来越多，信息不断积累，有时候仅仅是浏览和通读都已经有些超过了记忆负荷，并且这些信息常常也零散地留在我的笔记或是脑海的某个角落中，并没有成为内化的一部分，以后也很难记起或是检索，于是重新对自己的信息获取方式进行了梳理。&lt;/p&gt;&lt;h3&gt;信息源分类&lt;/h3&gt;&lt;p&gt;我的信息来源按照大类可以分为以下几类：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;随机想法&lt;/li&gt;&lt;li&gt;信息流&lt;/li&gt;&lt;li&gt;聚焦阅读&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;随机想法&lt;/h4&gt;&lt;figure&gt;&lt;img alt="XXA8bM9C1oTI9jxPRAMcUnFKn2d" data-original="https://cdnfile.sspai.com/editor/u_/cq3l0o5b34tbnn067beg.png" src="https://cdnfile.sspai.com/editor/u_/cq3l0o5b34tbnn067beg.png"/&gt;&lt;/figure&gt;&lt;p&gt;在日常生活、工作、学习或是什么任意的时刻，我有时候会萌生一些随机的想法，这些想法和当前所做的事并不相关或是天马行空，但也许会在未来的某个时刻被用到。因为我大部分时间都不会离开电脑太远，我通常会记录 Logseq 的 Journal 中，有时可能会临时发在一个只有自己一个人的微信群中，后续再补充上去。&lt;/p&gt;&lt;h4&gt;信息流&lt;/h4&gt;&lt;p&gt;我每天从起床开始就会被来自各个平台的信息流所裹挟，依赖于网络世界其实最难免的是与社交媒体与算法的抗争，一方面是要避免自己被过载的贩卖焦虑的信息或是熟人社交圈的「同辈压力」所困扰，另一方面也需要警惕算法所构造的信息茧房。实话说这一点挺难做到，即使自己多少算是具备一些克制和过滤信息的能力并有意识在这样做，但依然难以避免被其所扰乱思绪或是引导。&lt;/p&gt;&lt;p&gt;我最后采取了一种简单却也行之有效的方式 —— 关闭微信朋友圈入口与大部分软件通知提醒，并且把大部分不带社交属性而仅仅是用于信息获取的平台（如 B 站、微博等）的关注数量控制在 100 以内，如果新增则筛选优化之前的关注，减少无关内容的干扰。在完成上述行为的基础上，我使用订阅这一似乎有些古早的方式，但是仅订阅了不到 50 个网站，其中大部分是博客或是个人网站，且会定期筛选，减少自己每天的 feeds，但几乎在这一 feeds list 中的文章都会扫一下标题或初步浏览一下。&lt;/p&gt;&lt;figure&gt;&lt;img alt="XF6ZbwOIHoepapxMPYVcjlBunWd" data-original="https://cdnfile.sspai.com/editor/u_/cq3l0olb34tbnl2a9j70.png" src="https://cdnfile.sspai.com/editor/u_/cq3l0olb34tbnl2a9j70.png"/&gt;&lt;/figure&gt;&lt;p&gt;这一点我最开始是自己搭建了 Miniflux 服务来抓取，并且部署了一个服务向我来推送提醒的，而最近开始使用 &lt;a href="https://read.readwise.io/" target="_blank"&gt;Readwise Reader&lt;/a&gt; 后，由于体验很好，便把这一部分迁移过来了。我使用的是 Readwise Reader 内置的一种管理模式，分为三类：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Later&lt;/li&gt;&lt;li&gt;Shortlist&lt;/li&gt;&lt;li&gt;Archive&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我会每天扫描一下 Feeds 面板，扫到感兴趣的文章会加入到 Later 中，作为一个稍后读，当然，就以前的经验来说，稍后读放久了常常会变成「稍后也不读」，所以我在筛选时非常克制，仅将很感兴趣且有时间后马上会读的文章加入，并要求自己在晚上的时候清理 Later 列表。&lt;/p&gt;&lt;p&gt;而我们也会在社交媒体互联网的各个角落被推送到一些信息，其中我尤其在意的是这几类：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;感兴趣的一些观点/推文 threads&lt;/li&gt;&lt;li&gt;感兴趣的文章&lt;/li&gt;&lt;li&gt;有用的资源&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如果是一些比较有意思的观点或是评论，我通常并不会加入软件的对应 List、收藏夹等，而是会复制其内容到 Logseq 的 Journal 中并打上对应 tag，其实这一步很多软件（包括 Readwise Reader）提供了推特 threads 保留或是其他的一些更方便保存推文的方式，但我倾向于自己复制和整理，以几句话的方式记录下来而不是仅仅存一个链接，这样似乎刻意增加的步骤会让我多一步审视这些观点，避免被强引导性或是情绪化的观点所影响，也更有益于自己消化信息并内化为自己的想法。&lt;/p&gt;&lt;figure&gt;&lt;img alt="WP8Tb3csnoqIgLxVNgKczCBjnLe" data-original="https://cdnfile.sspai.com/editor/u_/cq3l0p5b34tbnl2a9j7g.png" src="https://cdnfile.sspai.com/editor/u_/cq3l0p5b34tbnl2a9j7g.png"/&gt;&lt;/figure&gt;&lt;p&gt;如果是自己感兴趣的一些文章，则会通过 Readwise 的 Chrome 插件进行阅读或保存。这部分我给自己的要求是每篇文章都要打上标签和 notes，notes 中主要描述为什么要读这篇文章。&lt;/p&gt;&lt;figure&gt;&lt;img alt="AcAVb4tj8onoMKxprJzcirFBnkk" data-original="https://cdnfile.sspai.com/editor/u_/cq3l0q5b34tbnkthkfm0.png" src="https://cdnfile.sspai.com/editor/u_/cq3l0q5b34tbnkthkfm0.png"/&gt;&lt;/figure&gt;&lt;p&gt;其中如果仅仅是需要泛读或是获取信息的一些文章，我会加入 Later 列表，而精读的我则是会加入 Shortlist，并且必须要对其中一些有意义的话加 highlights，也尽量对 highlights 加上自己的一些评价和想法，这些都可以在插件中直接操作，很方便。&lt;/p&gt;&lt;figure&gt;&lt;img alt="Ofq9bpW0XojxsIxykM8cpW7mn9d" data-original="https://cdnfile.sspai.com/editor/u_/cq3l0qlb34tbnl2a9j80.png" src="https://cdnfile.sspai.com/editor/u_/cq3l0qlb34tbnl2a9j80.png"/&gt;&lt;/figure&gt;&lt;p&gt;而如果是一些有用的网站、文档、代码、软件或是其他资源类的信息，我会使用 &lt;a href="https://pinboard.in/" target="_blank"&gt;Pinboard&lt;/a&gt;，一个很古早但是很好用的书签管理工具来保存，同样是用浏览器插件进行保存，也会打上标签和简单的描述，大概一年左右了我积累了 455 个书签，其中大部分我都能够通过 tag 和名称在需要用的时候快速检索到。&lt;/p&gt;&lt;p&gt;而像是视频网站等我更多还是使用点赞或是收藏的方式，一方面对创作者表示支持，另一方面也通过一些自动化工具同步到我的个人信息汇集平台，并标记上对应 tag，但大多视频的信息效率并不高，所以更多是一些有趣的或是探索向的。&lt;/p&gt;&lt;h4&gt;聚焦阅读&lt;/h4&gt;&lt;p&gt;除了上述这些被动推送的一些信息流外，其实我们也还会有很多特定主题或是与自己的领域强相关的一些信息需求，这需要我们去主动阅读一些书籍、报告等。&lt;/p&gt;&lt;figure&gt;&lt;img alt="YFVFb1CIcomYqQx96uVcpmP4nad" data-original="https://cdnfile.sspai.com/editor/u_/cq3l0qtb34tbnhc7l800.png" src="https://cdnfile.sspai.com/editor/u_/cq3l0qtb34tbnhc7l800.png"/&gt;&lt;/figure&gt;&lt;p&gt;这一部分我原本更多是使用 kindle 或阅读纸质书，并手动在 Logseq 进行一些记录。但是在 &lt;a href="https://lutaonan.com/" target="_blank"&gt;Randy&lt;/a&gt; 推出 &lt;a href="https://notepal.randynamic.org/" target="_blank"&gt;Notepal&lt;/a&gt; 工具后，我开始使用微信读书，它本身有很多可阅读的书籍资源，并且我也用它导入 mobi 或是 epub 格式的一些书籍，阅读体验感还不错。&lt;/p&gt;&lt;figure&gt;&lt;img alt="Y00KbkkszooaAGx1Zx0chVVCnog" data-original="https://cdnfile.sspai.com/editor/u_/cq3l0rdb34tbnkthkfmg.png" src="https://cdnfile.sspai.com/editor/u_/cq3l0rdb34tbnkthkfmg.png"/&gt;&lt;/figure&gt;&lt;p&gt;并且也很方便做一些笔记和标注，由于全平台同步，可以很方便地定期通过 Notepal 浏览器插件同步到 Readwise 中，效果也很好（上图就是同步过来的），这样也更有动力在碎片的一些时间里阅读一些书籍。&lt;/p&gt;&lt;h3&gt;信息管理&lt;/h3&gt;&lt;p&gt;上一节我对信息获取的渠道和系统进行了一些梳理，但这些依然还是零散的信息，如果要让它们成为自己知识和思考的一部分，依然需要更多整理、消化与沉淀的过程。但涉及那么多平台，搜索和整理并不方便，也比较难建立起信息之间的关联，受正在读的这本「Building a Second Brain」 启发，我主要做了如下两点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;借鉴和改造了 P.A.R.A 作为自己的全局 Tag 分类系统&lt;/li&gt;&lt;li&gt;使用 Logseq 和 Heptabase 构建 Second Brain&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;全局 Tag 系统&lt;/h4&gt;&lt;figure&gt;&lt;img alt="B7oFblyFmoLCFdx2uyucqUKjnXb" data-original="https://cdnfile.sspai.com/editor/u_/cq3l0rlb34tbnhc7l80g.jpeg" src="https://cdnfile.sspai.com/editor/u_/cq3l0rlb34tbnhc7l80g.jpeg"/&gt;&lt;/figure&gt;&lt;p&gt;其中 P.A.R.A 是作者所提出的一个框架，分别是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Projects，正在做的项目相关&lt;/li&gt;&lt;li&gt;Areas，特定领域&lt;/li&gt;&lt;li&gt;Resources，未来可能会用到的资源&lt;/li&gt;&lt;li&gt;Archives，已完成的项目&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我在这四个的类型的基础上增加了一个「Thoughts」，用于归类我的一些随机的想法。&lt;/p&gt;&lt;figure&gt;&lt;img alt="W9sAb9IfborttkxP9DgcU44bnoh" data-original="https://cdnfile.sspai.com/editor/u_/cq3l0rtb34tbnhc7l810.png" src="https://cdnfile.sspai.com/editor/u_/cq3l0rtb34tbnhc7l810.png"/&gt;&lt;/figure&gt;&lt;p&gt;我的实现思路是把这五个类型作为我的全局一级 Tag，而更具体的一些项目、领域、行业可作为二级、三级 Tag，例如 &lt;code&gt;Projects/writing/pkm&lt;/code&gt;，&lt;code&gt;Areas/blockchain&lt;/code&gt;，&lt;code&gt;Thoughts/weekly-review&lt;/code&gt; 等，Logseq 提供了很强大的多层 Tag 系统，会自动根据 &lt;code&gt;/&lt;/code&gt; 进行分层，便于检索，分类也一目了然，我把之前现有的一些 Tag 修改后效果如下：&lt;/p&gt;&lt;figure&gt;&lt;img alt="M30wb7o3movWVrxDLljcHx7sngf" data-original="https://cdnfile.sspai.com/editor/u_/cq3l0sdb34tbnhc7l81g.png" src="https://cdnfile.sspai.com/editor/u_/cq3l0sdb34tbnhc7l81g.png"/&gt;&lt;/figure&gt;&lt;h4&gt;基于 Heptabase + Logseq 的 Second Brain&lt;/h4&gt;&lt;p&gt;我之前一直都是使用 Logseq 作为自己的知识管理系统的，最近看到了 &lt;a href="https://twitter.com/WuPingJu" target="_blank"&gt;P.J. Wu 吳秉儒&lt;/a&gt; 入职 Heptabase，对这一平台有了更多了解，于是将其纳入自己的知识管理系统，和 Logseq 双刀流共同构建自己的第二大脑。只要因循上文所说的 Tag 系统，两个平台之间并不需要额外的关联便可以各司其职地进行信息管理。&lt;/p&gt;&lt;figure&gt;&lt;img alt="PEhYbjwimoTPaixmUJcc9lBin9f" data-original="https://cdnfile.sspai.com/editor/u_/cq3l0slb34tbnl2a9j8g.png" src="https://cdnfile.sspai.com/editor/u_/cq3l0slb34tbnl2a9j8g.png"/&gt;&lt;/figure&gt;&lt;p&gt;其中，Logseq 作为兼具简单任务管理和双向链接的笔记系统，非常适合沉淀我上述的这些信息流和一些自己阅读后产出的初步想法，如高亮、评论 notes 等，由于 Logseq 有 Readwise 官方插件，可以很方便地将我在微信读书和网络文章中的高亮和笔记自动同步为 Logseq 的 pages，并通过时间与 Journal 关联，这样我在每天/每周写一些回顾时能很直观地看到我过去的阅读和想法，如上文就是我在阅读 &lt;a href="https://twitter.com/MapleShadow" target="_blank"&gt;枫影 Justin Yan&lt;/a&gt; 的这篇「&lt;a href="https://justinyan.me/post/5790" target="_blank"&gt;每个人每天都只有 24 小时，希望我的选择真的是我的选择&lt;/a&gt;」时在他的网站上使用 Readwise Chrome 插件做的一些高亮和笔记，自动同步到了 Logseq 中，并根据我的配置打上了一些 tag 与属性。&lt;/p&gt;&lt;p&gt;Logseq 很适合做一些信息整理和回顾，但当我要对某个领域/概念进行调研、阅读书籍整理脉络或是输出一篇博客文章时就显得稍稍有些单薄，它的信息以 block 为单位散落在每一天的 Journal 中，通过双向链接或是 tag 进行关联跳转，不方便进行一些直接的可视化关联，也需要自己对在前期就对关键词和 tag 做到足够清晰，依然有一些心智负担，所以这一部分我使用 Heptabase 来进行管理。&lt;/p&gt;&lt;p&gt;Heptabase 可以看作是一个功能完善的白板笔记工具， &lt;a href="https://twitter.com/WuPingJu" target="_blank"&gt;P.J. Wu 吳秉儒&lt;/a&gt; 有很多关于 Heptabase 的&lt;a href="https://pinchlime.com/tags/heptabase/" target="_blank"&gt;高质量介绍文章&lt;/a&gt;，可以阅读了解一下。简单来说，它主要分为以下三个层级：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Map&lt;/li&gt;&lt;li&gt;Whiteboard&lt;/li&gt;&lt;li&gt;Card&lt;/li&gt;&lt;/ul&gt;&lt;figure&gt;&lt;img alt="RQVWbigssoqk4rx6hcGcMpRJnSg" data-original="https://cdnfile.sspai.com/editor/u_/cq3l0t5b34tbnn067bf0.png" src="https://cdnfile.sspai.com/editor/u_/cq3l0t5b34tbnn067bf0.png"/&gt;&lt;/figure&gt;&lt;p&gt;其中 Map 可以看作是我们 Second Brain 的整个空间，里面可以装各种白板，我建立了五个白板来作为第一层级 Tag。&lt;/p&gt;&lt;figure&gt;&lt;img alt="GVNBbfX08oyQCFxh4qXcoi4Snre" data-original="https://cdnfile.sspai.com/editor/u_/cq3l0tdb34tbnhc7l820.png" src="https://cdnfile.sspai.com/editor/u_/cq3l0tdb34tbnhc7l820.png"/&gt;&lt;/figure&gt;&lt;p&gt;卡片代表的是我们脑中的一个个想法或是一些独立的信息点，我们可以通过卡片与卡片的关联，白板与卡片之间的层级来组织我们知识。&lt;/p&gt;&lt;p&gt;当我在写 Foundry 智能合约开发框架的教程时，我首先把一些零散的知识点或是实践中遇到的一些经验、教训以一个个白板平铺在 Foundy 的白板上（其为 &lt;code&gt;Projects&lt;/code&gt; - &lt;code&gt;Blockchain&lt;/code&gt; - &lt;code&gt;Smart Contract&lt;/code&gt; 下的第四级子白板），当某个知识点已经足够多时，我会把白板之间再作一些 Section 分组、画线关联等。&lt;/p&gt;&lt;p&gt;其中它还提供了原生与 Readwise 的集成，可以在右侧边栏直接选择 Readwise 中我们对某些文章、书籍的一些 highlights 与 notes 作为卡片直接引入到白板中，为它们建立一些关联，很像我们人脑整理零散信息或是头脑风暴的过程，完美符合了我的需求。&lt;/p&gt;&lt;figure&gt;&lt;img alt="HFf4bTzxgoSfXLx8shfc3VV3n3e" data-original="https://cdnfile.sspai.com/editor/u_/cq3l0tlb34tbnl2a9j90.png" src="https://cdnfile.sspai.com/editor/u_/cq3l0tlb34tbnl2a9j90.png"/&gt;&lt;/figure&gt;&lt;p&gt;我目前还会用它做一些旅行攻略，把从小红书和其他人的攻略帖中的信息点作为一个个 card 放在旅行规划的白板中，然后再通过关联和分组进行整理，很规整。&lt;/p&gt;&lt;h2&gt;信息输出&lt;/h2&gt;&lt;p&gt;而我的输出则主要包含以下几个部分：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;笔记/观点/日常&lt;/li&gt;&lt;li&gt;长文&lt;/li&gt;&lt;li&gt;主题研究&lt;/li&gt;&lt;li&gt;信息流&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;笔记/观点/日常&lt;/h3&gt;&lt;p&gt;其中 Twitter 「&lt;a href="https://twitter.com/pseudo_yu" target="_blank"&gt;pseudo_yu&lt;/a&gt;」是我最主要的无结构化的信息输出渠道，有时候是一些关于新技术的想法、关于工作的感受、与朋友相见的心情或是一张可爱的猫猫图，都构成了我输出，也对应着我输入中那些随机想法的快速产出。&lt;/p&gt;&lt;p&gt;其中，Twitter 上认识的朋友也给我带来了很多温暖。&lt;/p&gt;&lt;h3&gt;长文&lt;/h3&gt;&lt;figure&gt;&lt;img alt="C3AEbZMWqo8XdKxTEogcDiN6nOb" data-original="https://cdnfile.sspai.com/editor/u_/cq3l0u5b34tbnhc7l82g.png" src="https://cdnfile.sspai.com/editor/u_/cq3l0u5b34tbnhc7l82g.png"/&gt;&lt;/figure&gt;&lt;p&gt;而我最重要的输出平台是个人博客「&lt;a href="https://www.pseudoyu.com/" target="_blank"&gt;Pseudoyu&lt;/a&gt;」，目前周报是我的主要出口，偶尔也会有一些主题或专题性的关于技术或是效率工具的博文。&lt;/p&gt;&lt;h3&gt;主题研究&lt;/h3&gt;&lt;p&gt;输出一篇博文由于要考虑到受众、言辞表述与完整性等，其实有一定的心智负担，且周期较长，而我在进行特定领域的主题研究过程中大多把学习资料和一些 Demo 放在 GitHub 仓库中或是 Logseq 的某个笔记角落，有时候时间久了就得要重新学习了。而我现在更多放在 Heptabase 的一个白板里，能够存放很多小的知识点并且在后续的创作中再进一步归纳和精炼，所以其实可以在初具框架后把这个白板共享出来，可以与更多人进行交流，也能对同样在学习的朋友有所帮助。&lt;/p&gt;&lt;h3&gt;信息流输出&lt;/h3&gt;&lt;p&gt;我搭建了一个自己的 n8n 同步服务，采集我零散在各个平台的信息输入输出，并且还会将我对电影、书籍的观后感以及自己其他一些所思所想同步到我的个人信息汇集平台，主要同步以下这些信息来源：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Blog，现在更像是一种生活日志。&lt;/li&gt;&lt;li&gt;YouTube，也是重度用户了，看技术相关教程和数码资讯比较多，偶尔也有很多好玩的内容。&lt;/li&gt;&lt;li&gt;Bilibili，主要保留了自己这么多年一直在关注的一些博主，看旅拍比较多，只看动态不看首页和热门。&lt;/li&gt;&lt;li&gt;Pinboard，书签和网站保存管理工具，重度依赖了。&lt;/li&gt;&lt;li&gt;Instapaper，管理稍后读，主要是一些精品或是长文的保存。&lt;/li&gt;&lt;li&gt;GitHub，也是日常刷了，看一些好的项目，也用列表在管理 Star。&lt;/li&gt;&lt;li&gt;Spotify，好听的歌会标注一下。&lt;/li&gt;&lt;li&gt;豆瓣，记录自己的书籍、剧集、电影、动漫和游戏，也是重度使用了，也在尝试每一个看过/玩过的作品都写一下自己的评价。&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;总结&lt;/h2&gt;&lt;p&gt;It is probably a mistake, in the end, to ask software to improve our thinking.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.theverge.com/authors/casey-newton" target="_blank"&gt;Casey Newton&lt;/a&gt; 在最近的一篇「&lt;a href="https://www.theverge.com/2023/8/25/23845590/note-taking-apps-ai-chat-distractions-notion-roam-mem-obsidian" target="_blank"&gt;Why note-taking apps don&amp;#x27;t make us smarter&lt;/a&gt;」中如是说。确实，这些系统或工具软件终究只能辅助我们进行信息管理和输出，并不能代替我们思考；但构建知识管理系统在取悦自己的同时，也能够让思考变得更加高效，悦己后达人，从而产出更有价值的输出。&lt;/p&gt;&lt;p&gt;希望这篇文章能够对大家有所帮助。&lt;/p&gt;&lt;p&gt;&amp;gt; 下载少数派 &lt;a href="https://sspai.com/page/client" target="_blank"&gt;客户端&lt;/a&gt;、关注 &lt;a href="https://www.xiaohongshu.com/user/profile/63f5d65d000000001001d8d4" target="_blank"&gt;少数派小红书&lt;/a&gt;，感受精彩数字生活 🍃&lt;/p&gt;&lt;p&gt;&amp;gt; 实用、好用的 &lt;a href="https://sspai.com/mall" target="_blank"&gt;正版软件&lt;/a&gt;，少数派为你呈现 🚀&lt;/p&gt;&lt;/div&gt;</description><author>pseudoyu</author><guid>https://sspai.com/post/90223</guid><pubDate>Sat, 06 Jul 2024 07:00:00 GMT</pubDate></item><item><title>线下活动：节奏与世界｜Asalato 制作工坊及世界音乐即兴音乐会</title><link>https://sspai.com/post/90240</link><description>&lt;div&gt;&lt;p&gt;各位少数派的读者们，大家好，为了创造更多和大家面对面交流的机会，少数派门店计划从 7 月开始每月组织至少一次的线下活动。第一期，我们先来场轻松的音乐活动，邀请大家来度过一个放松、愉快又能略有收获的周末下午。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/9097b530173c2ab02fb411ad14bb51d8.jpg" src="https://cdnfile.sspai.com/2024/07/05/9097b530173c2ab02fb411ad14bb51d8.jpg"/&gt;&lt;/figure&gt;&lt;h2&gt;活动信息&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;活动名称：&lt;/strong&gt; 节奏与世界｜Asalato 制作工坊及世界音乐即兴音乐会&lt;/p&gt;&lt;p&gt;&lt;strong&gt;活动时间：&lt;/strong&gt; 2024 年 7 月 13 日，星期六，15:00 - 17:40&lt;/p&gt;&lt;p&gt;&lt;strong&gt;活动地点：&lt;/strong&gt; 少数派线下店 @&lt;a href="https://j.map.baidu.com/fe/aNKK" target="_blank"&gt;深圳后海汇&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;strong&gt;活动介绍：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Asalato 是起源于西非的一个传统乐器，一开始部落里的母亲给孩子制作的玩具。它由一条绳子串连两颗非洲植物鼻烟盒树的果实所组成，透过手的前后摆动，以球体敲击球体来进行演奏。&lt;/p&gt;&lt;p&gt;Asalato 由三部分组成，分别为两颗球、一条短绳、球中的颗粒。因球体为自然果实，故大小并不固定，衍生出的乐器也可随自己手掌大小有不同款式的选择。每一颗球大小不一，细节也不一样，便携，这也许就是 Asalato 这种原声乐器的魅力。&lt;/p&gt;&lt;p&gt;球体材质随着 Asalato 传入不同国家，而衍生出以不同材料制作, 如塑胶、竹、木质、金属等，除了原始鼻烟盒球，其他材质的做的球都统称为 Patica。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/e403330216efe12f5b8a36520bbed284.jpg" src="https://cdnfile.sspai.com/2024/07/05/e403330216efe12f5b8a36520bbed284.jpg"/&gt;&lt;figcaption&gt;制作中的 Asalato&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Asalato 的独特之处在于它不仅是乐器，也是一种舞蹈道具，演奏者通过手指和手掌的快速敲击来产生节奏。Asalato 不仅仅是一种乐器，它在西非文化中具有深厚的社会和文化意义。它常用于社交活动、宗教仪式和庆典中。&lt;/p&gt;&lt;figure&gt;&lt;img alt="" data-original="https://cdnfile.sspai.com/2024/07/05/dd5b50bafca2970cca8a51bf72158b4d.png" src="https://cdnfile.sspai.com/2024/07/05/dd5b50bafca2970cca8a51bf72158b4d.png"/&gt;&lt;img alt="" data-original="https://cdnfile.sspai.com/2024/07/05/550932262791e84d1793a1a05c84d7d6.jpg" src="https://cdnfile.sspai.com/2024/07/05/550932262791e84d1793a1a05c84d7d6.jpg"/&gt;&lt;/figure&gt;&lt;p&gt;Asalato 在全球范围内越来越受欢迎，许多音乐家和打击乐手将其融入现代音乐中，包括爵士乐、嘻哈、电子音乐等。随着 Asalato 的流行，也出现了各种变体和创新的演奏方式，比如使用不同材质的 Asalato，或者结合手碟、现代电子设备等进行演奏。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/article/df5c98aaf89aea2e3d231978cb42faa6.png" src="https://cdnfile.sspai.com/2024/07/05/article/df5c98aaf89aea2e3d231978cb42faa6.png"/&gt;&lt;figcaption&gt;痛仰乐队主唱在演出中使用 Asalato 演奏。图源网络&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;导师介绍：浓籽 + Jing&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;浓籽：&lt;/strong&gt;游迹于山川河海，在一次丛林体验中更加坚定于世界节拍音乐，通过世界音乐，用原始乐器和新世纪乐器，共振出新世纪的声音，传达爱与和平的信息，感受自己的同時，也能疗愈他人。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/article/98f264162f2a2d5f54d41e56c99b3301.png" src="https://cdnfile.sspai.com/2024/07/05/article/98f264162f2a2d5f54d41e56c99b3301.png"/&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Jing：&lt;/strong&gt;通过东方禅宗哲学，重构形而上的古老声音仪式。将心灵与表象世界合一的原始力量融入进她有机而独特的视听语言中。民族部落音色敲打着波谲云诡的震动，创造出一个跨越时间与空间束缚、自然文明的终端世界。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/article/54599b67db03310294a2a4f18e5bfe31.png" src="https://cdnfile.sspai.com/2024/07/05/article/54599b67db03310294a2a4f18e5bfe31.png"/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;strong&gt;活动流程&lt;/strong&gt;&lt;/h2&gt;&lt;h3&gt;介绍与讲解&lt;/h3&gt;&lt;p&gt;导师在现场向大家介绍 Asalato 及世界音乐相关的小知识，比如世界音乐的起源、精神，以及世界各地的相应活动等等。&lt;/p&gt;&lt;h3&gt;制作教学和实践&lt;/h3&gt;&lt;p&gt;本环节收费，费用参考下方链接。&lt;/p&gt;&lt;p&gt;导师现场指导学员如何切割、打磨和组装您的 Asalato。学员们将在导师的帮助下，亲自动手制作自己的 Asalato。同时导师也会教授 Asalato 的基本演奏技巧，并与学员们一起演奏。&lt;/p&gt;&lt;h3&gt;世界音乐即兴演奏&lt;/h3&gt;&lt;p&gt;本环节完全免费，欢迎大家有事没事来听音乐。&lt;strong&gt;现场还有少数派周边随机送出～&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;最后就是音乐欣赏环节，导师们会在门店现场进行世界音乐即兴演奏，直至结束。本环节免费向所有顾客开放无需门票。&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;报名信息&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;费用：&lt;/strong&gt; 少数派 Prime 会员 139 元/人，非会员 169 元/人，已包含所有制作材料和工具使用，以及少数派现场送出伴手礼一份。本次活动选用天然果实为球体材料，市场常见售价为 300 元/对或更高。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;报名方式：&lt;/strong&gt; 请 &lt;a href="https://sspai.com/item/420" target="_blank"&gt;点此链接&lt;/a&gt; 付费报名（限量 10 张，每个帐号限购 1 张）&lt;/p&gt;&lt;h3&gt;温馨提示&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;请穿着舒适的衣物，以便您在工作坊中自由活动。&lt;/li&gt;&lt;li&gt;虽然门票数量有限且限购，但我们鼓励您带上朋友或家人，一起分享这份独特的文化体验，我们不会收取额外费用。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这是少数派门店线下活动系列的第一场，由新朋友「JABA 爪巴」联合呈现，未来还会有更多类型更多场次，期待面对面与你相见！&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/06/e84a90cbdd928230a5f7b5dc90eec4a0.png" src="https://cdnfile.sspai.com/2024/07/06/e84a90cbdd928230a5f7b5dc90eec4a0.png"/&gt;&lt;figcaption&gt;JABA 爪巴代表当下、独立与年轻，是以专注和包容的态度，以音乐为圆心放射出多个文化维度的大笨笨策划团队。&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;题图 by &lt;a href="https://unsplash.com/photos/four-boys-laughing-and-sitting-on-grass-during-daytime-lP_FbBkMn1c" target="_blank"&gt;Robert Colins&lt;/a&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;/div&gt;</description><author>吃派的水獭</author><guid>https://sspai.com/post/90240</guid><pubDate>Sat, 06 Jul 2024 02:41:52 GMT</pubDate></item><item><title>本周看什么 | 最近值得一看的 8 部作品</title><link>https://sspai.com/post/90243</link><description>&lt;div&gt;&lt;h2&gt;☕️ TL;DR&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;近期佳作推荐：[美剧] 熊家餐馆 第三季、[日剧] 柚木家的四兄弟。、[日剧] 海的开始、[国产] 消失的大象、[法剧] 成为卡尔·拉格斐、[动画] 鹿乃子乃子乃子虎视眈眈、[纪录片] 地球、[纪录片] 希特勒与纳粹：恶行的审判&lt;/li&gt;&lt;li&gt;几则精彩预告：《剧场版 鬼灭之刃 无限城篇》三部曲制作决定、《神偷奶爸 4》发布终极预告、《死侍与金刚狼》发布中国版预告、《地球脉动：极境生存》内地定档 7 月 27 日、《巴黎大饭店》发布首支特报&lt;/li&gt;&lt;li&gt;几则影视资讯：《新吊带袜天使》定档，AX2024 动画资讯速览、《灌篮高手》定档 8 月 3 日重映、《误杀 3》官宣杀青并发布概念海报、《穿越时空的少女》确认引进内地、电影《解密》发布定档海报&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;👀 N 部作品推荐&lt;/h2&gt;&lt;p&gt;根据读者反馈，如果推荐语涉及剧透（对故事核心、暗线、伏笔、结局等关键要素的透露），我们会在对应作品的标题前增加 🔦 的 Emoji。&lt;/p&gt;&lt;p&gt;往期推荐可 &lt;a href="https://sspai.com/tag/%E6%9C%AC%E5%91%A8%E7%9C%8B%E4%BB%80%E4%B9%88" target="_blank"&gt;点此&lt;/a&gt; 或点击文末 tag #本周看什么，更多主题片单可 &lt;a href="https://sspai.com/topic/419" target="_blank"&gt;点此&lt;/a&gt; 查看；想要查看更多深度影视内容，可以关注我们的衍生栏目「&lt;a href="https://sspai.com/topic/416" target="_blank"&gt;看什么 Café&lt;/a&gt;」。如有其他建议也欢迎在评论区提出，感谢大家对「看什么」栏目的喜爱和支持。&lt;/p&gt;&lt;h3&gt;[美剧] 熊家餐馆 第三季&lt;/h3&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/article/73cac76f4f9dea8adbc26e277edac516.jpeg" src="https://cdnfile.sspai.com/2024/07/05/article/73cac76f4f9dea8adbc26e277edac516.jpeg"/&gt;&lt;/figure&gt;&lt;p&gt;关键词：剧情&lt;/p&gt;&lt;p&gt;片长：30 分钟左右（单集）× 10 集；&lt;a href="https://movie.douban.com/subject/36631942/" target="_blank"&gt;豆瓣链接&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Push, push, push.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;@利兹与青鸟：上一季所有人都在试炼中获得成长，新餐厅也在感动中成功开业。第三季的故事则以一种新的影像形式展开，第一集用碎片化的叙事，呈现出卡门曾在纽约工作细节与现在的餐厅事业，是回顾也是新征程的开启。晃动的镜头、各色食材和烹饪的特写、影响至深的记忆片段、快速的交叉跳剪，弥漫着观众熟悉的快节奏与焦虑感；但配合舒缓轻灵的音乐，既能让观众在画面中代入郁闷焦灼的氛围，又能通过配乐跳出，欣赏这一场令人目不暇接的剪辑盛宴。&lt;/p&gt;&lt;p&gt;熊家餐馆无论后厨还是前厅都充斥着巨大的压力，而这都离不开卡门的严要求、高标准。没错，卡门又做了一个震惊合作伙伴的决定。而卡门和表哥里奇超快语速的吵架，配合他们面部的特写跳切，这熟悉的配方在令人暴躁之外，竟也奇妙地有点解压。每位人物也都在经历着他们人生的大事件，有人送别母亲，有人迎接新生命的到来，而生产部分更是本季高光。于是，有条不紊和杂乱无章在熊家餐馆共存，精致美味的菜肴背后则是无数的争吵和疲累。&lt;/p&gt;&lt;h3&gt;[日剧] 柚木家的四兄弟。&lt;/h3&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/article/90aa07f0774b881f66e26e0075ed1d99.jpeg" src="https://cdnfile.sspai.com/2024/07/05/article/90aa07f0774b881f66e26e0075ed1d99.jpeg"/&gt;&lt;/figure&gt;&lt;p&gt;关键词： 剧情&lt;/p&gt;&lt;p&gt;片长：15 分钟左右（单集）× 32 集；&lt;a href="https://movie.douban.com/subject/36803491/" target="_blank"&gt;豆瓣链接&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;看完之后觉得自己&lt;s&gt;尸体&lt;/s&gt;暖暖的。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;@潘誉晗 ：两年前父母意外去世，身为长男的隼虽然还是一个大学生，但依然承担起了父母和长兄的责任，独自抚养三个弟弟生活。两年过去了，从大学毕业的隼成为了高中教师，二弟尊、三弟凑进入了隼所在学校的初中部，四弟小岳也成为了小学生，四兄弟互相扶持的生活也在继续着。&lt;/p&gt;&lt;p&gt;作为一部根据同名漫画改编的作品，选角非常贴合原著的剧集还是相当成功的，所以即便是在深夜时间段播出，这部剧依然收获了诸多好评。十五分钟每集的时长很好地浓缩了四兄弟的温馨日常，观看时不仅不会有时间上的压力，反而会因为太过短暂让人觉得意犹未尽，比漫画更贴近生活的改编也让剧情变得更为合理。在尚未独立的年纪就早早失去了父母，四兄弟注定比同龄人多了一份让人心疼的成熟。但好在有着血亲的陪伴，所以四兄弟一边磕绊一边成长的故事，也在泪水与欢笑中治愈着我们。&lt;/p&gt;&lt;h3&gt;[日剧] 海的开始&lt;/h3&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/17d47c113c169709c3ed60f3cc8caad7.jpg" src="https://cdnfile.sspai.com/2024/07/05/17d47c113c169709c3ed60f3cc8caad7.jpg"/&gt;&lt;/figure&gt;&lt;p&gt;（竖版海报太模糊了不高清）&lt;/p&gt;&lt;p&gt;关键词：剧情 / 爱情 / 家庭&lt;/p&gt;&lt;p&gt;片长：45 分钟左右（单集，首集 60 分钟）× 11 集；&lt;a href="https://movie.douban.com/subject/36650636/" target="_blank"&gt;豆瓣链接&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;海边突然出现一个小可爱，社畜变身单亲爸爸。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;@潘誉晗 ：月冈夏正准备着求职的某天，女友水季拿着人工流产同意书出现，拜托他签下名字。之后，她突然从大学退学，在电话中提出分手，至此消失在夏的生命里。多年后，夏得知了水季去世的消息。在水季的葬礼上，他遇到了一个名唤海的孩子，并从水季母亲口中得知，当年水季并没有放弃孩子，眼前的这个女孩，就是他的亲生女儿。&lt;/p&gt;&lt;p&gt;为了男友前程选择分手的女友独自抚养孩子、突然要担起父亲责任的青年、发现男友竟有一名七岁女儿的女性、失去了母亲之后大胆找到父亲天真地问出「你什么时候要当我爸爸」的女孩，每个人面临着不同的立场、不同的处境，却因为那份深深牵绊的爱，还有深深羁绊的血缘，被紧密地联系在了一起。&lt;/p&gt;&lt;p&gt;2022 年大爆剧《静雪》团队以「亲子之爱」作为主题再度出发，又一次引发了广泛的关注度与讨论，温情向的剧情，为本次夏季档投下了一枚治愈款的催泪弹。&lt;/p&gt;&lt;h3&gt;[国产] 消失的大象&lt;/h3&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/69e5b852ae5b85e8a461ec5f5cd7b344.jpg" src="https://cdnfile.sspai.com/2024/07/05/69e5b852ae5b85e8a461ec5f5cd7b344.jpg"/&gt;&lt;/figure&gt;&lt;p&gt;关键词：喜剧 / 悬疑&lt;/p&gt;&lt;p&gt;片长：40-60 分钟左右（单集）× 12 集&lt;/p&gt;&lt;p&gt;观看渠道：&lt;a href="https://www.iqiyi.com/a_1g7lblcqh6l.html" target="_blank"&gt;爱奇艺&lt;/a&gt;；&lt;a href="https://movie.douban.com/subject/35970338/" target="_blank"&gt;豆瓣链接&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;「破产兄弟」在「疯狂的马拉松」寻找「消失的大象」。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;@利兹与青鸟：一场象城马拉松，吸引了市井青年张矿和兄弟刘明，二人借助张矿女友杂技团少班主的身份，偷出象城明星「灰哥」，想以此为噱头跻身马拉松策划，却在混乱中丢失了大象。而赞助方温泉酒店经理崔黑妹不仅涉及贩卖假钞，其老板象城商会会长高伟志更是深不可测。还有想要抢杂技团地皮的狗哥团伙，试图拉张矿当替罪羊的马拉松总策划……有着千丝万缕联系的几方势力就这样围绕着一头消失的大象展开。&lt;/p&gt;&lt;p&gt;作为广电总局的重点扶持剧目，本剧演员阵容颇有看头，除了李九霄、蒋龙、任素汐等几位演技在线的青年演员，还有老戏骨王志文、余皑磊的加盟，再加上喜剧天赋点满的五条人，以及潘斌龙、蒋诗萌等喜剧人，让剧集的黑色幽默得到了充分地发挥。特别是又蠢又直的打工仔常发，与上司崔黑妹的对话尤为搞笑。全剧以川渝方言为主，采用多视角叙事且多条故事线并行，这些阴差阳错增加了笑料的同时，也让每个人物更立体，但也导致主线推进较慢。有笑点、有故事、有阴谋，很适合下饭。&lt;/p&gt;&lt;h3&gt;[法剧] 成为卡尔·拉格斐&lt;/h3&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/b8d5f2cec056f95e7f2d60d1e5654118.jpg" src="https://cdnfile.sspai.com/2024/07/05/b8d5f2cec056f95e7f2d60d1e5654118.jpg"/&gt;&lt;/figure&gt;&lt;p&gt;关键词：剧情 / 传记 / 历史&lt;/p&gt;&lt;p&gt;片长：45 分钟左右（单集）× 6 集；&lt;a href="https://movie.douban.com/subject/35582112/" target="_blank"&gt;豆瓣链接&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;时尚，不止属于女人。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;@潘誉晗 ：剧集聚焦在时尚界的传奇设计师「老佛爷」卡尔·拉格斐身上，讲述他成名之前的故事。起初他只想当一个匿名设计师，但在雅克·德·巴舍尔的鼓励下，他开始重新思考自己的生活和选择。最后他决定以艺术总监的身份公开发表成衣制作。剧集同时也讲述了他和圣罗兰设计师皮埃尔·伯格之间的竞争，以及和雅克之间的浪漫爱情故事。&lt;/p&gt;&lt;p&gt;时尚确实是个轮回。根据同名传记改编的剧集有了大量的史实作为依据和参考，准备了诸多精致华丽的场景，短短6 集的篇幅就安排了 3000 套的服饰，直接把我们带回了当年那个时尚的中心。丹尼尔·布鲁赫一如既往值得信任的演技足够惊艳，21 岁就拿下欧洲影帝的他本就能说四国语言，所以即便法语并非母语，他也很好地用法语完成了整部剧的演出。每一个细微的表情、每一个克制又优雅的动作，他用自己的方式，尽可能地为我们还原出一个真实的卡尔。&lt;/p&gt;&lt;h3&gt;[动画] 鹿乃子乃子乃子虎视眈眈&lt;/h3&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/af977ad996f03dea666dbd5e29e30301.png" src="https://cdnfile.sspai.com/2024/07/05/af977ad996f03dea666dbd5e29e30301.png"/&gt;&lt;/figure&gt;&lt;p&gt;关键词：漫画改 / 喜剧 / 日常 / 奇幻&lt;/p&gt;&lt;p&gt;片长：24 分钟（单集）× 12 集，每周日更新&lt;/p&gt;&lt;p&gt;观看渠道：&lt;a href="https://acg.gamer.com.tw/acgDetail.php?s=138313" target="_blank"&gt;巴哈姆特动画疯&lt;/a&gt;；&lt;a href="https://movie.douban.com/subject/36788554/" target="_blank"&gt;豆瓣链接&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;🦌しかのこのこのこ🎶🐯こしたんたん🎶&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;@SHY：努力维持品学兼优形象的女高中生虎视虎子，在上学路上突然被冰冷的鼻涕拍脸，抬头一看，竟是一位长着鹿角的奇怪少女鹿乃子乃子被卡在电线杆上。两人相遇之后，原本平静的校园生活被彻底打乱，那一天，虎子终于回想起了，曾经一度被鹿所支配的恐怖。&lt;/p&gt;&lt;p&gt;又一部未播先火的新生代网红动画，在原著少有人知晓的情况下，凭借拿捏短视频痛点的剪辑和放飞自我的官方整活轻松破圈。一小时洗脑循环 PV 创下千万点击量 0 完播率纪录后，官方也豪言正片要以 100% 收视率为目标。顶着碾压同期一众动画的高关注度，第 1 集的成片质量大抵符合我的心理预期。&lt;/p&gt;&lt;p&gt;曾执导《摇曳百合》等一众名作的导演太田雅彦，与霸权社 WIT STUDIO 再度合作，拿捏这类无厘头日常喜剧可谓得心应手。从字面意义上「脑洞大开」的情节，到随时随地乱入的狂野鹿群，动画左手 Meta 右手 Neta，能吐的槽点一个都不放过，让人直呼神经。虽然与密集梗轰炸的 PV 相比，正片的节奏还是稍显平缓，但相信制作组能在后续集数带来更多奇思妙想。&lt;/p&gt;&lt;h3&gt;[纪录片] 地球&lt;/h3&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/b148c7d194c3b44f4728720965d2474a.jpg" src="https://cdnfile.sspai.com/2024/07/05/b148c7d194c3b44f4728720965d2474a.jpg"/&gt;&lt;/figure&gt;&lt;p&gt;片长：50 分钟左右（单集）× 5 集；&lt;a href="https://movie.douban.com/subject/36473026/" target="_blank"&gt;豆瓣链接&lt;/a&gt;&lt;/p&gt;&lt;p&gt;观看渠道：&lt;a href="https://www.bilibili.com/bangumi/play/ep827299" target="_blank"&gt;哔哩哔哩&lt;/a&gt; / &lt;a href="https://v.qq.com/x/cover/mzc00200pl14gwh/n4100wbw94l.html" target="_blank"&gt;腾讯视频&lt;/a&gt; / &lt;a href="https://v.youku.com/v_show/id_XNjAwMTE3MzgwOA==.html" target="_blank"&gt;优酷视频&lt;/a&gt; / &lt;a href="https://www.bbc.co.uk/iplayer/episodes/p0fpwhhm/earth" target="_blank"&gt;BBC iPlayer&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;自然纪录片遗珠。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;@利兹与青鸟：又是一部最近被 B 站购入的纪录片，虽首播于去年 8 月，但豆瓣标记人数却不过百，绝对称得上是自然纪录片界的遗珠。这部纪录片来自 BBC Earth，聚焦地球演化的过程，分为烈火炼狱、雪球地球、绿色生命、蔚蓝天幕、人类星球五集，有着不输《地球脉动》系列的制作水准，视觉效果很是惊艳，观赏性极高。逼真的 CGI 影像配合学者采访，能让观众在他们的讲述中，感受到对自然科学的热爱。或恢宏或空灵的配乐更是让人想到《沙丘》，沉浸感十足。&lt;/p&gt;&lt;p&gt;纪录片一开头就用一连串问题牢牢抓住了观众的注意，地球是怎么从称得上是史上最严重的一次物种灭绝里生存下来的？于是镜头带领我们来到了2.53 亿年前的二叠纪晚期，生动地讲述这断断续续持续了约 200 万年的岩浆，是如何撕裂盘古大陆的。看着这些庞大又遥远的数字，很难不让人感叹人类的渺小与造物的伟大。既有强大的数据支撑，又有实地考察亿万年前痕迹，还总有出人意料线索吸引人们去探索；虽是徐徐道来，却科普性与戏剧性兼具，值得一看！&lt;/p&gt;&lt;h3&gt;[纪录片] 希特勒与纳粹：恶行的审判&lt;/h3&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/388701833364291da259891cb8b5ceb4.jpg" src="https://cdnfile.sspai.com/2024/07/05/388701833364291da259891cb8b5ceb4.jpg"/&gt;&lt;/figure&gt;&lt;p&gt;关键词：纪录片 / 历史&lt;/p&gt;&lt;p&gt;片长：65 分钟左右（单集）× 6 集&lt;/p&gt;&lt;p&gt;观看渠道： &lt;a href="https://www.netflix.com/jp/title/81561941" target="_blank"&gt;Netflix&lt;/a&gt; ；&lt;a href="https://movie.douban.com/subject/36888564/" target="_blank"&gt;豆瓣链接&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;这是一个关于人类历史上最为血腥政策的兴衰故事。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;@潘誉晗 ： Netflix 最新推出的这部纪录片，以纽伦堡审判为开场，然后引出了纪录片的主人公：阿道夫·希特勒。透过大量的史料影像分享，相关教授、研究员的采访，以及重大场景的演绎再现，纪录片较为全面地审视了希特勒的一生，讲述了他的从政发展，也因此记述了关于纳粹从起源到统治再到清算的一个过程。&lt;/p&gt;&lt;p&gt;多方视角的展现给了观众一个更理性思考的空间，毕竟对任何事物的评价，我们都应该学着用不同的立场去分析，才会得到一个更为公正的答案。纽伦堡审判的开篇足够吸睛，作为那场满是噩梦的长夜终于结束的象征，这一场人类历史上首次反对世界和平罪的审判，有着太多太多的意义。纪录片紧接着对于希特勒大事件的回溯也拍得很好，演员们的场景演绎，更是让观众更好地走进了这位小个子政治家的人生，他以德意志救世主的身份出现，却为全世界带来了漫长而充满绝望和黑暗的纳粹长夜。&lt;/p&gt;&lt;h3&gt;更多&lt;/h3&gt;&lt;p&gt;&lt;a href="https://movie.douban.com/subject/36895444/" target="_blank"&gt;[日剧] 晚酌的流派 3&lt;/a&gt; @潘誉晗：今年美幸因工作能力出众，搬进了员工宿舍，虽然空间不如以往宽敞，甚至店长就住边上，但胜在更经济实惠，加上她的人生理念不是住多大的房子，而是致力于在完成了每天的工作之后，能享受自己的独酌时光。一个人，一顿饭，几瓶啤酒的快乐，足够填满她的胃，也足够慰藉她的心房。晚酌的风格一如既往。&lt;/p&gt;&lt;p&gt;&lt;a href="https://movie.douban.com/subject/36135788/" target="_blank"&gt;[西班牙] 女人领地&lt;/a&gt; @潘誉晗：为了躲避失踪丈夫所欠下的巨款，加拉带着母亲和女儿躲到了西班牙的一个小镇，这是她母亲的故乡，也藏着母亲最深的秘密。凭《绝望主妇》出名的女星伊娃这次依然难逃绝望境地，好在加拉拥有无穷韧劲，为了生存，她提出用自己的专业帮助当地人制作出最棒的葡萄酒。西班牙的风景很美，轻松浪漫的故事也充满热情。&lt;/p&gt;&lt;p&gt;&lt;a href="https://movie.douban.com/subject/36053237/" target="_blank"&gt;[美剧] 我的简·格雷&lt;/a&gt; @潘誉晗：大概「历史上寥寥几笔的史实更有改编空间」这句话确为真理，这部剧以历史上赫赫有名的「九日女王」简·格雷为灵感，不仅没让她被处死，更是脑洞大开，给她安排了一位白天是马、晚上才能恢复人形的丈夫。奇幻题材的爱情剧看着略显癫狂，但温柔地为这位英国历史上首位被罢黜的女王，赋予了一段崭新的人生。&lt;/p&gt;&lt;p&gt;&lt;a href="https://movie.douban.com/subject/36840846/" target="_blank"&gt;[动画] 星球大战：帝国传说&lt;/a&gt; @潘誉晗：动画首集就讲述了摩根族人被屠杀的背景，被山族所救之后的摩根，心中依然放不下亲眼看着母亲和族人被杀害的悲愤，决心复仇。每集均长大概十五分钟，很适合作为饭点时的下饭剧。动画也确实做到了短小精悍，虽然每集时间并不长，但制作精良，传统的画风多了份古典的味道，光影也一流。&lt;/p&gt;&lt;p&gt;&lt;a href="https://movie.douban.com/subject/36540857/" target="_blank"&gt;[综艺] 喜人奇妙夜&lt;/a&gt; @利兹与青鸟：一年一度喜剧大赛的第三季从爱奇艺搬到了腾讯，于是改了名字。首期共有 10 个作品参加竞演，既有对我来说完全不好笑、却得了高分的作品，也有一些让人会心一笑的作品，比如切合时下新梗的《熬人奇妙夜》，低期待的《葫芦兄弟》也有不少巧妙的梗，融合了漫才形式的《小品的世界》更是在一众作品中显得格外惊艳。看到喜欢的笑一笑，看到尴尬的骂一骂，倒也很适合周末不带脑子地解解压。&lt;/p&gt;&lt;h2&gt;📅 本周新预告&lt;/h2&gt;&lt;h3&gt;《剧场版 鬼灭之刃 无限城篇》三部曲制作决定&lt;/h3&gt;&lt;p&gt;6 月 30 日，TV 动画《鬼灭之刃 柱训练篇》最终话播出后，宣布将制作《剧场版 鬼灭之刃 无限城篇》三部曲，并发布了特报和先导视觉图，讲述鬼杀队与鬼舞辻无惨的无限城决战，档期待定。 &lt;a href="https://kimetsu.com/anime/mugenjyohen_movie/news/?article_id=65691" target="_blank"&gt;来源&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;《神偷奶爸 4》发布终极预告&lt;/h3&gt;&lt;p&gt;7 月 4 日，动画电影《神偷奶爸 4》发布了终极预告，将于 7 月 12 日中国内地上映。克里斯·雷纳德、帕特里克·德拉吉执导，照明娱乐制作，超级小黄人首度亮相，与格鲁一家展开爆笑冒险。 &lt;a href="https://weibo.com/5653724764/Om0TKD7Ec" target="_blank"&gt;来源&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;《死侍与金刚狼》发布中国版预告&lt;/h3&gt;&lt;p&gt;7 月 2 日，电影《死侍与金刚狼》发布了中国预告，将于 7 月 26 日同步北美上映。肖恩·利维执导，瑞安·雷诺兹、休·杰克曼主演，当「独行侠」金刚狼遇上「嘴炮」死侍，王炸组合，顶峰相「贱」，携手颠覆漫威电影宇宙。 &lt;a href="https://weibo.com/2600825323/OlIPtaPpV" target="_blank"&gt;来源&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;《地球脉动：极境生存》内地定档 7 月 27 日&lt;/h3&gt;&lt;p&gt;7 月 5 日，知名自然纪录剧集《地球脉动》首部大电影《地球脉动：极境生存》确认引进中国内地，定档 7 月 27 日上映。历时 1904 天，跨越六大洲、34 个国家和地区，展现大自然和生命的神奇、美丽。 &lt;a href="https://weibo.com/6776159567/Om7tMi5kg" target="_blank"&gt;来源&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;《巴黎大饭店》发布首支特报&lt;/h3&gt;&lt;p&gt;7 月 2 日，《东京大饭店》续篇电影《巴黎大饭店》发布了首支特报，木村拓哉、铃木京香等回归主演，尾花和伦子在法国巴黎开设了新店，为成为第一个获得米其林三星称号的亚洲人而奋斗，将于 2024 年冬在日本上映。 &lt;a href="https://x.com/gurame_tbs/status/1807896971274813894" target="_blank"&gt;来源&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;更多&lt;/h3&gt;&lt;p&gt;&lt;a href="https://www.bilibili.com/video/BV1RS411c7Cn/" target="_blank"&gt;&lt;strong&gt;动作喜剧电影《头奖》首支预告：&lt;/strong&gt;&lt;/a&gt;保罗·费格执导，约翰·塞纳、奥卡菲娜、刘思慕等主演，设定在不久的将来，在日落前杀死大乐透赢家者能合法领取对方的奖赏，意外中奖的凯蒂必须和业余头奖保护者诺尔合作，以领取数十亿美金奖励，8 月 15 日上线 Amazon Prime Video。 &lt;a href="https://x.com/PrimeVideo/status/1808139330797686876" target="_blank"&gt;来源&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://weibo.com/tv/show/1034:5051714303098895?from=old_pc_videoshow" target="_blank"&gt;&lt;strong&gt;尼古拉斯·凯奇新片《长脚怪》发布终极预告：&lt;/strong&gt;&lt;/a&gt;7 月 2 日，奥兹·珀金斯自编自导、麦卡·梦露和尼古拉斯·凯奇主演的惊悚心理恐怖片《长脚怪》发布终极预告。故事讲述联邦调查局特工李·哈克受命调查一桩悬而未决的连环杀人案件，却发觉自己与凶手有私人关系，影片将于 7 月 12 日北美上映。&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.bilibili.com/video/BV1xn4y1X7t4/" target="_blank"&gt;&lt;strong&gt;沈腾、马丽新片《抓娃娃》发布新预告：&lt;/strong&gt;&lt;/a&gt;影片由闫非、彭大魔执导，彭大魔、闫非、林炳宝担任编剧，沈腾、马丽领衔主演，史彭元、萨日娜、肖帛辰主演，贾冰特别出演，讲述生活在西虹市的马成钢（沈腾 饰）和春兰（马丽 饰）的反向养娃之路，背地里马家夫妇却有自己的小秘密，提档 7 月 16 日上映。&lt;/p&gt;&lt;h2&gt;📽 影视新闻周报&lt;/h2&gt;&lt;h3&gt;《新吊带袜天使》定档，AX2024 动画资讯速览&lt;/h3&gt;&lt;p&gt;在洛杉矶当地时间 7 月 4 日至 7 日举行的 Anime Expo 2024 动画博览会上，众多动画发行及制作方将发布旗下作品的最新动态。以下是展会第一天值得关注的部分资讯：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1SH4y1F7pi/" target="_blank"&gt;&lt;strong&gt;TV 动画《尖帽子的魔法工坊》首支特报：&lt;/strong&gt;&lt;/a&gt;改编自白滨鸥的同名漫画，渡边步（《海兽之子》《夏日重现》）执导，山口真依担任人物设定，前 FS 社作曲家北村友香（《黑暗之魂 3》《艾尔登法环》）配乐，BUG FILMS 制作，2025 年开始播出； &lt;a href="https://x.com/tongari_anime/status/1809036977670353374" target="_blank"&gt;来源&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1hT421Y7cY/" target="_blank"&gt;&lt;strong&gt;动画《忍者蝙蝠侠对极道联盟》首支特报：&lt;/strong&gt;&lt;/a&gt;延续《忍者蝙蝠侠》主创阵容，水崎淳平、高木真司执导，中岛一基编剧，冈崎能士担任人物设定，菅野祐悟配乐，神风动画制作，山寺宏一为蝙蝠侠配音，档期待定； &lt;a href="https://x.com/batmanninja2018/status/1809029428103561253" target="_blank"&gt;来源&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;动画《新吊带袜天使》先导视觉图 &amp;amp; 主创阵容：&lt;/strong&gt;今石洋之执导，与若林广海共同编剧，锦织敦史、吉成曜、小山重人等前作主创回归，石崎寿夫、坂本胜、米山舞等知名动画人参与，TRIGGER 扳机社制作，2025 年开始播出； &lt;a href="https://x.com/trigger_inc/status/1808878641973248097" target="_blank"&gt;来源&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;动画剧集《动物狂想曲 最终季》第一部分主视觉图：&lt;/strong&gt;改编自板垣巴留的同名漫画，仍由松见真一执导，樋口七海编剧，Orange 制作，分为两季度，第一部分 2024 年 12 月上线 Netflix。 &lt;a href="https://x.com/bst_anime/status/1808878443498713431" target="_blank"&gt;来源&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure&gt;&lt;img alt="" data-original="https://cdnfile.sspai.com/2024/07/05/2ab8e8ea525573d603a90908d4482590.jpg" src="https://cdnfile.sspai.com/2024/07/05/2ab8e8ea525573d603a90908d4482590.jpg"/&gt;&lt;img alt="" data-original="https://cdnfile.sspai.com/2024/07/05/ac99000780c657dd7b847cbfc3b5c76d.jpg" src="https://cdnfile.sspai.com/2024/07/05/ac99000780c657dd7b847cbfc3b5c76d.jpg"/&gt;&lt;/figure&gt;&lt;h3&gt;《灌篮高手》定档 8 月 3 日重映&lt;/h3&gt;&lt;p&gt;7 月 5 日，动画电影《灌篮高手》发布了 &lt;a href="https://www.bilibili.com/video/BV1hZ421T7SJ/" target="_blank"&gt;中国内地重映预告&lt;/a&gt; 和海报，将于 8 月 3 日在院线重映。本作由漫画原作者井上雄彦执导、编剧，东映动画、Dandelion 动画工作室制作，2023 年 4 月 20 日在中国内地首映。 &lt;a href="https://weibo.com/7821538309/Om7ovlsVy" target="_blank"&gt;来源&lt;/a&gt;&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/article/f52d3556f2df9331284bbb5c1447eb15.jpeg" src="https://cdnfile.sspai.com/2024/07/05/article/f52d3556f2df9331284bbb5c1447eb15.jpeg"/&gt;&lt;/figure&gt;&lt;h3&gt;《误杀 3》官宣杀青并发布概念海报&lt;/h3&gt;&lt;p&gt;7 月 2 日，电影《误杀3》宣布杀青并发布概念海报，由陈思诚监制，甘剑宇执导，肖央领衔主演，将有全新的故事体系展开。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/article/f7b7ab40043cd6fa050d5a60b6235a7c.jpeg" src="https://cdnfile.sspai.com/2024/07/05/article/f7b7ab40043cd6fa050d5a60b6235a7c.jpeg"/&gt;&lt;/figure&gt;&lt;h3&gt;《穿越时空的少女》确认引进内地&lt;/h3&gt;&lt;p&gt;7 月 3 日，细田守动画电影《穿越时空的少女》确认引进内地，档期待定。《穿越时空的少女》曾在 2006 年于日本上映，讲述 17 岁少女绀野真琴意外拥有穿越时空的能力，为了帮助自己和朋友，不断回到过去，却发现自己手臂上的数字原来是穿越时空的次数，次数变得越来越少……&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/article/3ecf3c56616ea061f396e9679a81a8ec.jpeg" src="https://cdnfile.sspai.com/2024/07/05/article/3ecf3c56616ea061f396e9679a81a8ec.jpeg"/&gt;&lt;/figure&gt;&lt;h3&gt;电影《解密》发布定档海报&lt;/h3&gt;&lt;p&gt;根据麦家同名小说改编，陈思诚执导的《解密》官宣定档 8 月 3 日，并发布定档海报。影片由陈思诚、Christopher MacBride 担任编剧，刘昊然、约翰·库萨克领衔主演，陈道明、吴彦祖、俞飞鸿特别出演，任璐遥、陈雨锶、王雨甜、周游、朱珠主演。影片全程由 IMAX 特制拍摄。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/5d6e48ec52def97b0cd938bc760fac24.jpg" src="https://cdnfile.sspai.com/2024/07/05/5d6e48ec52def97b0cd938bc760fac24.jpg"/&gt;&lt;/figure&gt;&lt;h3&gt;更多&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;动画剧集《终结者：零》首张海报：&lt;/strong&gt;工藤昌史执导，马特森·汤姆林编剧，Production I.G 制作，一名战士被送往 1997 年的日本保护一位科学家，天网派来的刺客也接踵而至，8 月 29 日上线 Netflix。 &lt;a href="https://x.com/NetflixGeeked/status/1808123563234181235" target="_blank"&gt;来源&lt;/a&gt;&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/article/b0bcf4ab3b09476ce36227b9153651ce.png" src="https://cdnfile.sspai.com/2024/07/05/article/b0bcf4ab3b09476ce36227b9153651ce.png"/&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;《惊天魔盗团 3》北美定档：&lt;/strong&gt;《惊天魔盗团 3》北美定档 2025 年 11 月 14 日。本片由鲁本·弗雷斯彻执导，除了杰西·艾森伯格、伍迪·哈里森、艾拉·菲舍尔、戴夫·弗兰科以及摩根·弗里曼之外，贾斯蒂斯·史密斯（《龙与地下城：侠盗荣耀》）、多米尼克·塞萨（《留校联盟》）、阿丽亚娜·格林布拉特（《芭比》）将饰演新一代魔术师。&lt;/p&gt;&lt;h2&gt;🎪 彩蛋&lt;/h2&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/bbb228613b0d00c46bb326b4d4d3835a.png" src="https://cdnfile.sspai.com/2024/07/05/bbb228613b0d00c46bb326b4d4d3835a.png"/&gt;&lt;/figure&gt;&lt;p&gt;本期的彩蛋是「关键词猜电影」，首位猜中片名的读者，可获得彩蛋提供名额 1 次（彩蛋内容包括但不限于「猜电影」「你喜欢的经典影视作品/影人/台词」「电影冷知识」），和我们不定期发放的奖品。本期猜中的「第一名」将会在这篇文章中更新，届时也请各位参与互动的朋友注意站内私信~&lt;/p&gt;&lt;p&gt;&amp;gt; 小红书 📕 关注 &lt;a href="https://www.xiaohongshu.com/user/profile/63f5d65d000000001001d8d4" target="_blank"&gt;少数派sspai&lt;/a&gt;、&lt;a href="https://www.xiaohongshu.com/user/profile/62fb4cf90000000012002431" target="_blank"&gt;本周看什么&lt;/a&gt;，找到数字时代更好的生活方式 🎊&lt;/p&gt;&lt;p&gt;&amp;gt; &lt;a href="https://sspai.com/topic/416" target="_blank"&gt;看什么 Café&lt;/a&gt; / &lt;a href="https://sspai.com/topic/419" target="_blank"&gt;主题片单&lt;/a&gt; 专题页、&lt;a href="https://sspai.com/page/2021/movie" target="_blank"&gt;2021 年度回顾&lt;/a&gt;，更多影视推荐尽在 &lt;a href="https://sspai.com/tag/%E6%9C%AC%E5%91%A8%E7%9C%8B%E4%BB%80%E4%B9%88" target="_blank"&gt;#本周看什么&lt;/a&gt; 🎬&lt;/p&gt;&lt;/div&gt;</description><author>少数派编辑部</author><guid>https://sspai.com/post/90243</guid><pubDate>Fri, 05 Jul 2024 10:24:06 GMT</pubDate></item><item><title>具透 Plus | 企图变聪明的 Chrome 与小广告止不住的 Windows</title><link>https://sspai.com/prime/story/inside-release-notes-240705</link><description>&lt;article&gt;&lt;p&gt;欢迎阅读「具透 Plus」，这是我们为会员中的软件爱好者准备的栏目。&lt;/p&gt;
&lt;p&gt;如名称所表明，本栏目延续了首页人气栏目「&lt;a href="https://sspai.com/tag/%E5%85%B7%E9%80%8F" target="_blank"&gt;具透&lt;/a&gt;」的关注方向，但更加深入，关注那些隐藏在更新日志字里行间、并未被广泛报道的功能和安全更新，并解释相关背景和用法。此外，本栏目将特别重视来源考证的严谨，只引述最接近官方的第一手依据，避免道听途说和以讹传讹，也方便读者按图索骥、自行探索。&lt;/p&gt;
&lt;p&gt;总之，如果你曾经对着系统密密麻麻的更新日志感到一头雾水，或者听说了一些似是而非的新功能却不知如何找到，本栏目或许能为你解决一些困惑。&lt;/p&gt;
&lt;p&gt;收录范围方面，本栏目主要关注 Windows、macOS 等桌面系统，Android、iOS 等移动系统，Chromium、Firefox 和 Safari 等主流浏览器，以及一些重要应用软件。我们将根据反馈情况来动态调整这个范围，也欢迎就此提供反馈。&lt;/p&gt;
&lt;hr/&gt;
&lt;h2&gt;Chrome 内置 Gemini Nano 模型上线&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://sspai.com/u/platyhsu" target="_blank"&gt;@PlatyHsu&lt;/a&gt;: &lt;a href="https://developer.chrome.com/docs/ai/built-in" target="_blank"&gt;Chrome 内置 AI 模型&lt;/a&gt;是今年 Google I/O 上&lt;a href="https://io.google/2024/explore/47fc6e98-8359-4be0-b9b9-4bc7b28bd063/" target="_blank"&gt;揭晓&lt;/a&gt;的 AI 相关新功能之一。从 Chrome 127（6 月 12 日进入测试通道）起，这个功能已经可以使用了。目前，用于支撑这个功能的模型是谷歌 Gemini 系列中最小的 Nano 版本，这也是 &lt;a href="https://developer.android.com/ai/generativeai" target="_blank"&gt;Android 内置 AI&lt;/a&gt; 选用的模型。&lt;/p&gt;
&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/article/a9491edb7865a355a06dfa48be79c38a.png" src="https://cdnfile.sspai.com/2024/07/05/article/a9491edb7865a355a06dfa48be79c38a.png"/&gt;
&lt;figcaption&gt;Chrome 内置 AI 架构（来源：谷歌）&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;根据&lt;a href="https://docs.google.com/document/d/1VG8HIyz361zGduWgNG7R_R8Xkv0OOJ8b5C9QKeCjU0c/view" target="_blank"&gt;官方说明&lt;/a&gt;，启用 Chrome 内置 AI 的步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确保安装了 Chrome 127 或以上版本（目前尚未发布正式版，因此需安装 Dev 或 Canary 通道版本），并确保有 22GB 以上空余硬盘空间；&lt;/li&gt;
&lt;li&gt;打开 &lt;code&gt;about:flags&lt;/code&gt; 页面，调整以下选项，并重启 Chrome——&lt;ul&gt;
&lt;li&gt;&lt;code&gt;optimization-guide-on-device-model&lt;/code&gt; 设置为 Enabled BypassPerfRequirement；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prompt-api-for-gemini-nano&lt;/code&gt; 设置为 Enabled；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在任意页面打开 DevTools（即在页面空白处点击右键，选择「检查元素」），然后切换到 Console 选项卡，输入以下语句并回车执行：&lt;code&gt;await window.ai.createTextSession();&lt;/code&gt;。这是为了触发模型下载，目前返回错误是正常的。&lt;/li&gt;
&lt;li&gt;打开 &lt;code&gt;about:components&lt;/code&gt; 页面，此时应当能看到一项 Optimization Guide On Device Model，其右侧版本号不为空（否则可以点击下面 Check for update 按钮手动刷新）。这个组件首次使用时需要下载一个大约 1.28GB 的模型文件，当其状态显示为 Up-to-date 时即为下载完成。&lt;/li&gt;
&lt;li&gt;此时回到 DevTools，在控制台中执行 &lt;code&gt;await window.ai.canCreateTextSession();&lt;/code&gt; 如返回 &lt;code&gt;readily&lt;/code&gt; 即说明启用成功。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;（其中，第 3 步是很多现有文章没有提到的，我在启用过程中也卡在这步比较久，提醒遇到类似问题的读者注意。）&lt;/p&gt;
&lt;p&gt;需要指出，目前 Chrome 只是开放了一套 Prompt API 供网页或插件使用，但没有提供任何基于 Gemini Nano 的内置功能。一份不太完整的 Prompt API &lt;a href="https://github.com/explainers-by-googlers/prompt-api" target="_blank"&gt;文档&lt;/a&gt;可以在 Chrome 团队的 GitHub 找到，简言之——&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chrome 现在提供一个 &lt;code&gt;ai&lt;/code&gt; 接口用于执行端侧模型请求。网页和插件可以使用 &lt;code&gt;canCreateTextSession()&lt;/code&gt; 来检查浏览器是否支持该功能。&lt;/li&gt;
&lt;li&gt;与模型的交互是在会话（session）中完成的。为此，首先要用 &lt;code&gt;createTextSession()&lt;/code&gt; 方法创建一个会话，在此过程中可以选填的参数包括 &lt;code&gt;systemPrompt&lt;/code&gt;（系统提示词，字符串）、&lt;code&gt;initialPrompts&lt;/code&gt;（现有提示词，数组）、&lt;code&gt;temperature&lt;/code&gt; 和 &lt;code&gt;topK&lt;/code&gt;（两个控制模型「自由发挥」的常见参数）。&lt;/li&gt;
&lt;li&gt;要从模型获得输出，通过会话的 &lt;code&gt;prompt()&lt;/code&gt; 方法发送提示词，或者用 &lt;code&gt;promptStreaming()&lt;/code&gt; 方法获得流式输出（「打字机」效果）。&lt;/li&gt;
&lt;li&gt;已创建的会话可以用 &lt;code&gt;clone()&lt;/code&gt; 方法复制，以及用 &lt;code&gt;destroy()&lt;/code&gt; 方法删除。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（你也可以查阅 AI 模块的&lt;a href="https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/modules/ai/" target="_blank"&gt;代码&lt;/a&gt;或者在控制台输入 &lt;code&gt;ai&lt;/code&gt; 来了解其支持的方法。）&lt;/p&gt;
&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/article/5bf55a8527d0c7071396e8767fd2eae8.png" src="https://cdnfile.sspai.com/2024/07/05/article/5bf55a8527d0c7071396e8767fd2eae8.png"/&gt;&lt;/figure&gt;
&lt;p&gt;例如，要从当前网页获取文章正文，并通过 Gemini Nano 总结，可以在控制台运行以下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const article = document.querySelector(&amp;quot;article&amp;quot;).innerText;

const session = await ai.createTextSession({
  systemPrompt: &amp;quot;Summarize the article provided by the user, maintaining the original language of the article. The summary should capture key points and main ideas, using bullet points for clarity and conciseness. Ensure the summary is no longer than 5-7 bullet points, covering the introduction, key arguments, and conclusion.&amp;quot;
});

const result = await session.prompt(article);
console.log(result);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我用了少数派最近一篇大约六千字的&lt;a href="https://sspai.com/prime/story/ppc-history-11" target="_blank"&gt;文章&lt;/a&gt;做测试。在一台 MacBook Air (M2, 2022) 上运行代码大约花费了 15 秒；在此期间，Chrome 的 CPU 占用率从 1.1% 提高到 4.6%，内存占用增加了大约 1.1GB，应该说是比较轻量的，对大多数当代电脑配置压力不大。&lt;/p&gt;
&lt;p&gt;不过，限于 Gemini Nano 模型的能力（也可能是我使用姿势不对？），获得的效果有点一言难尽，并且还出现了幻觉。&lt;/p&gt;
&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/article/7b871ec11e7777daedff1318296d2559.png" src="https://cdnfile.sspai.com/2024/07/05/article/7b871ec11e7777daedff1318296d2559.png"/&gt;&lt;/figure&gt;
&lt;p&gt;如果你不想自己写代码，也有一些现成项目可以用对话式界面来和内置 AI 交互，例如 Lightning Joyce 的 &lt;a href="https://chromeai.co/" target="_blank"&gt;chromeai.co&lt;/a&gt;。我因为不是很死心，又挑了几个这两天问过 GPT 的问题来问 Gemini Nano。结果……请大家自己判断。&lt;/p&gt;
&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/article/f08465972d26e6c7b848c8504c961577.png" src="https://cdnfile.sspai.com/2024/07/05/article/f08465972d26e6c7b848c8504c961577.png"/&gt;
&lt;figcaption&gt;同学醒醒&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;但这个效果倒也不完全出乎意料。根据谷歌此前提供的 &lt;a href="https://arxiv.org/pdf/2312.11805" target="_blank"&gt;Gemini 模型信息&lt;/a&gt;，Nano 有 1.8B 和 3.25B 参数两种版本，均采用 4-bit 量化。从下载尺寸看，Chrome 中用的应该是 1.8B 版本。至于实际性能，由于谷歌并未提供 Gemini Nano 的 API，没有太多可供参考的测试成绩，唯一有一定可比性的通用测试是 MMLU (5-shot)，谷歌公布的成绩是 45.9。与其他几个热门轻量模型对比，Phi-3 Mini (3.8B) 的成绩是 68.8，Mistral 7B 是 60.1，Llama 3 8B 是 68.4（来自各自官方数据）。&lt;/p&gt;
&lt;p&gt;诚然，这个对比不太公平，但考虑到 7B 尺寸的模型在很多电脑上也能跑得起来，在线模型也越来越便宜，对于其实没那么看重本地运行隐私性的日常用户而言，Gemini Nano 的竞争力确实不太高（君不见当初有多少人哭着喊着想要在隐私地狱 Bing 开通 GPT-4），唯一有优势的可能就是 32K 的上下文窗口了。不过 Chrome 内置 AI 据谷歌说法是一个通用框架，理论上可以接入更多模型，这就有待后续观察了。&lt;/p&gt;
&lt;h2&gt;Windows 11 的广告更多了&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://sspai.com/u/clyde" target="_blank"&gt;@克莱德&lt;/a&gt;：下次遇到「什么系统广告最多」这个话题，讨论的时候别忘了带上 Windows 11。&lt;/p&gt;
&lt;p&gt;在早前的首页文章中我们有提到，部分 Windows 11 的广告是关不掉的，比如设置页面中的 Copilot 推广。或许微软也知道系统设置是块「风水宝地」，在近期推送给稳定通道的 &lt;a href="https://support.microsoft.com/zh-cn/topic/2024-%E5%B9%B4-6-%E6%9C%88-25-%E6%97%A5-kb5039302-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%86%85%E9%83%A8%E7%89%88%E6%9C%AC-22621-3810-%E5%92%8C-22631-3810-%E9%A2%84%E8%A7%88%E7%89%88-0ab34e3f-bca9-4a52-a1a4-404bf8162f58" target="_blank"&gt;KB5039302&lt;/a&gt; 更新中，已登录微软账号且「主动在设备上玩游戏」的用户还将看到 Xbox Game Pass 的广告……大概长这个样子：&lt;/p&gt;
&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/article/812f5d49142c04721632c20b9c6bb025.png" src="https://cdnfile.sspai.com/2024/07/05/article/812f5d49142c04721632c20b9c6bb025.png"/&gt;&lt;/figure&gt;
&lt;p&gt;这还没完——最近采用新设计的 Windows 11 天气应用也已经开始推送了，新设计谈不上惊艳，倒是让原本嵌入在信息流里的广告卡片更加直观了。一般而言，你能在当前天气状态和详细信息两个区域找到两个固定的广告位——体验与部分国产 Android 定制系统看齐。&lt;/p&gt;
&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/05/article/05020defd886ec3924781f4210f46d80.png" src="https://cdnfile.sspai.com/2024/07/05/article/05020defd886ec3924781f4210f46d80.png"/&gt;&lt;/figure&gt;
&lt;p&gt;略有不同的是微软良心尚存（一点），因为关掉这个广告的方法还是有的，并且有点幽默：将天气的窗口调小一点，广告卡片就会自动隐藏。你看，微软也是知道小设备屏幕显示区域「寸土寸金」这个道理的嘛。&lt;/p&gt;
&lt;p&gt;说完坏消息说点好消息。微软调整了任务栏最右侧「显示桌面」按钮的显示逻辑。此前因为 Copilot 按钮的出现，这个按钮在部分地区被挤出了 Windows 的任务栏，引来了诸多老用户的不满。要知道这个按钮早年可是能够实现鼠标悬停即可透视的效果（Windows Aero Peek），它在 Windows 11 中本就挨了一刀，现在硬要「蒸发」掉更可以说是「违背祖训」。&lt;/p&gt;&lt;/article&gt;</description><author>少数派编辑部</author><guid>https://sspai.com/prime/story/inside-release-notes-240705</guid><pubDate>Fri, 05 Jul 2024 10:02:52 GMT</pubDate></item><item><title>当云服务器崩溃时，我是如何救援重要数据的</title><link>https://sspai.com/post/90154</link><description>&lt;div&gt;&lt;p&gt;周五的时候我的服务器突然内核报错，连不上 ssh 也 无法重启。经过了迂回的各种抢救方案，终于救回了一千多张图床的的图片，心有余悸，记录一下救援过程，顺便折腾了一套新的图床方案。&lt;/p&gt;&lt;h2&gt;服务器救援&lt;/h2&gt;&lt;p&gt;这台服务器大约已经稳定运行了一年半，运行了我许多重要服务，还有我博客图床的一千多张无备份的图片通过 Docker Volume 持久化在主机上。&lt;/p&gt;&lt;h3&gt;服务器宕机&lt;/h3&gt;&lt;p&gt;其实我至今仍不知道出了什么问题，早上刚好需要更新服务器上的我运行的 RSSHub 实例的镜像版本，于是想着干脆把所有服务都更新到最新吧，于是一通 &lt;code&gt;docker pull&lt;/code&gt; 和 &lt;code&gt;docker-compose&lt;/code&gt; 重启操作，前面的都没什么问题，直到最后一个服务突然启动容器失败，报了一个类似 &lt;code&gt;not enough space&lt;/code&gt; 的错误，我心想着可能是下载的镜像太多了导致磁盘满了，于是又一通 &lt;code&gt;docker image prune --all&lt;/code&gt;、&lt;code&gt;docker volume prune&lt;/code&gt; 和 &lt;code&gt;docker system prune&lt;/code&gt; 操作，释放出了接近 10G 的空间，重试，依然不行。&lt;/p&gt;&lt;p&gt;作为一个有且仅有一点服务器运维经验的开发来说，我第一反应想到的就是重启，未曾想，这才是一天噩梦的开始。&lt;/p&gt;&lt;figure&gt;&lt;img alt="DpEIbC2WUo9XGgx4PoLcEaLinGf" data-original="https://cdnfile.sspai.com/editor/u_/cq1qurdb34t8g5vb9r70.png" src="https://cdnfile.sspai.com/editor/u_/cq1qurdb34t8g5vb9r70.png"/&gt;&lt;/figure&gt;&lt;p&gt;没想到重启后我的 Uptime Kuma 提醒我所有服务都下线了，也无法再通过 ssh 连上机子了。&lt;/p&gt;&lt;figure&gt;&lt;img alt="KCyibCBPTogkAYxCuXOcjUEEnIg" data-original="https://cdnfile.sspai.com/editor/u_/cq1qurlb34t8s07b8da0.jpeg" src="https://cdnfile.sspai.com/editor/u_/cq1qurlb34t8s07b8da0.jpeg"/&gt;&lt;/figure&gt;&lt;p&gt;于是赶紧登录到服务器的线上控制台，发现内核报错，无法启动，强制重启也依然不生效，并且赶紧求援我的 DevOps 朋友们。&lt;/p&gt;&lt;h3&gt;拯救数据&lt;/h3&gt;&lt;p&gt;STRRL 说应该 &lt;code&gt;rootfs&lt;/code&gt; 出现了问题，不过鉴于我的服务器云厂商并没有提供什么高级启动等额外的功能，这条路堵住了。但想到我有一年半毫无备份的图床数据在上面，依然不甘心，于是开始想办法抢救数据。&lt;/p&gt;&lt;figure&gt;&lt;img alt="Rj41b42odoBQ5PxQbcbcuytQnTf" data-original="https://cdnfile.sspai.com/editor/u_/cq1quslb34t8s07b8db0.png" src="https://cdnfile.sspai.com/editor/u_/cq1quslb34t8s07b8db0.png"/&gt;&lt;/figure&gt;&lt;p&gt;研究了一下服务器的控制台，发现它提供一个大约每周一次的备份，并且可以一键将备份转为快照，最近的一次在 6 月 22 日，还好。我首先想到的是直接通过快照恢复机器，如果是我今天的操作导致了什么配置问题，那理应一周前的快照是能正常启动的，于是满怀信心地等待了十几分钟的快照恢复，结果报了同样的错误。依然不死心，把 6 月 15 的备份也恢复了一下，还是不行。&lt;/p&gt;&lt;p&gt;这下意识到了事情的严重性，甚至做好了数据全部丢失的最坏打算，同时开始检索类似情况，最后发现服务器的快照镜像是可以下载的。&lt;/p&gt;&lt;p&gt;于是先下载了快照镜像，得到了一个 &lt;code&gt;.disk&lt;/code&gt; 文件，这个文件应该是一个专属格式，可以通过 Virtual Box 的命令行工具 &lt;code&gt;vboxmanage convertfromraw&lt;/code&gt; 来进行格式转换，但官网下载后发现并不支持 M 芯片的 Mac，于是又在之前的老 19 款 Intel Mac 上安装并且执行转换，得到了一个 &lt;code&gt;.vmdk&lt;/code&gt; 文件。&lt;/p&gt;&lt;p&gt;转换完成后将这个 &lt;code&gt;.vmdk&lt;/code&gt; 作为一个磁盘挂载到 Virtual Box CentOS 虚拟机上，发现依然报同样的错误。&lt;/p&gt;&lt;figure&gt;&lt;img alt="GjSFb2nmyoyVbgxMEK4cd9t7noe" data-original="https://cdnfile.sspai.com/editor/u_/cq1qustb34t8s07b8dbg.png" src="https://cdnfile.sspai.com/editor/u_/cq1qustb34t8s07b8dbg.png"/&gt;&lt;/figure&gt;&lt;p&gt;于是另辟蹊径，发现 &lt;a href="https://arc.net/l/quote/tirhqejc" target="_blank"&gt;7-Zip&lt;/a&gt; 软件支持常见虚拟机格式的解压，但客户端只有 Windows 版本。&lt;/p&gt;&lt;figure&gt;&lt;img alt="HIZGbOm1FoJLjqx17chcQcuOnke" data-original="https://cdnfile.sspai.com/editor/u_/cq1qut5b34t8g2c721p0.jpeg" src="https://cdnfile.sspai.com/editor/u_/cq1qut5b34t8g2c721p0.jpeg"/&gt;&lt;/figure&gt;&lt;p&gt;虽然按理说可以在 macOS 上使用命令行版本 &lt;a href="https://github.com/p7zip-project/p7zip" target="_blank"&gt;p7zip&lt;/a&gt; 来执行，但我解压时会报错，所以又堵住了一条路，想了个曲线救国的方式，通过虚拟机下载了一个 Win11，下载了 7-Zip 软件直接解压成功了。&lt;/p&gt;&lt;p&gt;问题又来了，解压得到的是 &lt;code&gt;1.img&lt;/code&gt;、&lt;code&gt;2.img&lt;/code&gt; 这样格式的 Linux 磁盘镜像文件，macOS 上无法加载，又用 fuse 折腾了一下，还是无法加载。&lt;/p&gt;&lt;figure&gt;&lt;img alt="A4VxboRf7o3SXExEJuTca6BgnQd" data-original="https://cdnfile.sspai.com/editor/u_/cq1qutlb34t8g5vb9r7g.jpeg" src="https://cdnfile.sspai.com/editor/u_/cq1qutlb34t8g5vb9r7g.jpeg"/&gt;&lt;/figure&gt;&lt;p&gt;期间倒也是有好消息，在全网搜罗的时候发现了一个数据恢复软件 UFS Explorer，尝试了一下可以正常加载，只是超过 768k 的文件则需要付费，当然没打算，看到文件确实是可以识读之后心里就安心了许多，至少数据还在，剩下都是技术问题了。&lt;/p&gt;&lt;p&gt;STRRL 告诉我 &lt;a href="https://orbstack.dev" target="_blank"&gt;OrbStack&lt;/a&gt; 可以启动一个 Linux Machine，然后可以把这个 &lt;code&gt;img&lt;/code&gt; 作为一个 Linux 磁盘挂载上去。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;sudo losetup -fP 1.img
mkdir /mnt/bwg

sudo mount /dev/loop0 /mnt/bwg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过以上命令成功把我的 &lt;code&gt;img&lt;/code&gt; 磁盘镜像挂载到了 OrbStack 的 Ununtu 机器上。&lt;/p&gt;&lt;figure&gt;&lt;img alt="Q1Ygb0O9FoDsv5xOSeLc36oVnxb" data-original="https://cdnfile.sspai.com/editor/u_/cq1quu5b34t8g2c721pg.png" src="https://cdnfile.sspai.com/editor/u_/cq1quu5b34t8g2c721pg.png"/&gt;&lt;/figure&gt;&lt;p&gt;当我看到我的图片出现在命令行输出结果时，感动得都快流泪了 😭。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;tar -czvf cheverto_chevereto_images.tar.gz cheverto_chevereto_images/

rsync -acvP ./cheverto_chevereto_images.tar.gz pseudoyu@[yu-mac-studio]:~/Downloads/
&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img alt="HQscbjZ6LolKM0xrOqecqQIznpd" data-original="https://cdnfile.sspai.com/editor/u_/cq1quudb34t8s07b8dcg.jpeg" src="https://cdnfile.sspai.com/editor/u_/cq1quudb34t8s07b8dcg.jpeg"/&gt;&lt;/figure&gt;&lt;p&gt;紧接着赶紧打个 &lt;code&gt;tar&lt;/code&gt; 包，然后通过 &lt;code&gt;rsync&lt;/code&gt; 传到了我本地的 Mac 上，本机解压后，终于看到了我所有的图片。&lt;/p&gt;&lt;h3&gt;迁移图床系统至 r2&lt;/h3&gt;&lt;p&gt;但由于这一次的遭遇，不再信任服务器单机部署的图床稳定性了，花了半天折腾了一套新的免费图床系统 —— 「&lt;a href="https://sspai.com/post/90170" target="_blank"&gt;从零开始搭建你的免费图床系统 （Cloudflare R2 + WebP Cloud + PicGo）&lt;/a&gt;」。&lt;/p&gt;&lt;figure&gt;&lt;img alt="UoHHb8TBAoMmIux9zbqcBK6tnh9" data-original="https://cdnfile.sspai.com/editor/u_/cq1quulb34t8g67no0mg.jpeg" src="https://cdnfile.sspai.com/editor/u_/cq1quulb34t8g67no0mg.jpeg"/&gt;&lt;/figure&gt;&lt;p&gt;至于现有的数据传到 &lt;code&gt;r2&lt;/code&gt;，我则是使用了 &lt;code&gt;rclone&lt;/code&gt; 来进行上传，彻底完成迁移，大功告成！&lt;/p&gt;&lt;h2&gt;总结&lt;/h2&gt;&lt;p&gt;经过这么一次，我也开始重新考虑了服务部署、数据安全等问题，准备还是将一些重要的数据上云而不再依赖单机，也继续把一些服务迁移到 &lt;a href="https://fly.io" target="_blank"&gt;fly.io&lt;/a&gt;&lt;a href="https://zeabur.com/" target="_blank"&gt;、Zeabur&lt;/a&gt; 等 serverless 平台。&lt;/p&gt;&lt;p&gt;&amp;gt; 下载少数派 &lt;a href="https://sspai.com/page/client" target="_blank"&gt;客户端&lt;/a&gt;、关注 &lt;a href="https://www.xiaohongshu.com/user/profile/63f5d65d000000001001d8d4" target="_blank"&gt;少数派小红书&lt;/a&gt;，感受精彩数字生活 🍃&lt;/p&gt;&lt;p&gt;&amp;gt; 实用、好用的 &lt;a href="https://sspai.com/mall" target="_blank"&gt;正版软件&lt;/a&gt;，少数派为你呈现 🚀&lt;/p&gt;&lt;/div&gt;</description><author>pseudoyu</author><guid>https://sspai.com/post/90154</guid><pubDate>Fri, 05 Jul 2024 07:02:15 GMT</pubDate></item><item><title>「临门一脚」助你入门 Vim：Kickstart 配置笔记</title><link>https://sspai.com/post/90115</link><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;Matrix&lt;/strong&gt; &lt;strong&gt;首页推荐&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;&lt;a href="https://sspai.com/matrix" target="_blank"&gt;Matrix&lt;/a&gt; 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。&lt;/p&gt;&lt;p&gt;文章代表作者个人观点，少数派仅对标题和排版略作修改。&lt;/p&gt;&lt;hr/&gt;&lt;h2&gt;前言&lt;/h2&gt;&lt;p&gt;Vim 绝对是一个让很多人又爱又恨的软件，爱它的速度快与功能强大，恨它的学习曲线与复杂的配置。我接触 Vim 的这些年来，从原版 Vim 折腾到 Neovim，也慢慢构建了一套属于自己的 Neovim 配置，主题、快捷键、插件配置等等都比较顺手了，也逐渐习惯用 Neovim 编辑一切，事实上，我在此网站发布的文章，包括目前正在写的这篇，都是我用 Neovim 以 Markdown 格式编辑完成的。但是随着时间的流逝，我也遇到一些问题，主要的问题是我的配置大多都是东拼西凑从互联网各处抄来的，配置文件写得比较杂乱且没有很好地作注释，时间一长搞得我自己也看不懂我的配置文件了，遇到一些问题要排查就要废挺多脑筋。&lt;/p&gt;&lt;p&gt;网上也存在一些现成的 Neovim 配置，或者叫「Neovim 发行版」，比如 &lt;a href="https://www.lazyvim.org/" target="_blank"&gt;LazyVim&lt;/a&gt;、&lt;a href="https://www.lunarvim.org/" target="_blank"&gt;LunarVim&lt;/a&gt; 和 &lt;a href="https://nvchad.com/" target="_blank"&gt;NvChad&lt;/a&gt; 等等，这些所谓的发行版都提供了开即用的使用体验，不过我个人倒是觉得这些发行版有些「重」了，根据我自己的使用情况，可能根本用不到里面的很多高级功能，而且后期自定义与添加插件也多少有点不方便。&lt;/p&gt;&lt;p&gt;就在最近，我了解到了一个项目 &lt;a href="https://github.com/nvim-lua/kickstart.nvim" target="_blank"&gt;kickstart.nvim&lt;/a&gt;，按照项目的介绍，这并不是一个 Neovim 发行版，而是一套 Neovim 配置的「出发点」，追求用最少的配置达到可以开箱即用的功能，同时对配置内容做了很详尽的注释，用户可以在这一套配置之上进一步自定义，打造属于自己的 Neovim 配置。&lt;/p&gt;&lt;p&gt;在详细看了一遍项目的内容后，发现我常用的绝大多数功能，在这个项目中都已经配置好了，而且没有太多多余的功能。所以我打算，在这个项目的基础上，重新自定义一套我自己的配置，并对配置内容做好整理与注释，方便未来的自己进一步管理。&lt;/p&gt;&lt;h2&gt;开始安装&lt;/h2&gt;&lt;h3&gt;前置要求&lt;/h3&gt;&lt;p&gt;首先，&lt;s&gt;要学会&lt;/s&gt;&lt;a href="https://github.com/hakluke/how-to-exit-vim" target="_blank"&gt;&lt;s&gt;如何退出 Vim&lt;/s&gt;&lt;/a&gt;，也就是说了解一些 Vim 的基础操作，比如一些基础的移动、编辑、保存与退出之类的。&lt;/p&gt;&lt;p&gt;之后，要了解一些 Lua 的基本用法，因为这个项目的配置文件是用 Lua 编写的，不了解也没关系，我就是在自己折腾过程中慢慢了解 Lua 的语法的。&lt;/p&gt;&lt;p&gt;接着，需要安装最新稳定版或 nightly 版本的 Neovim，旧版本的 Neovim 可能有些特性不兼容，原版的 Vim 也不行，因为不支持 lua 配置文件。&lt;/p&gt;&lt;p&gt;最后，安装项目推荐的 &lt;a href="https://github.com/nvim-lua/kickstart.nvim?tab=readme-ov-file#install-external-dependencies" target="_blank"&gt;外部依赖&lt;/a&gt;，如 git、make、unzip、gcc 等等，以及可选安装 Nerd Font 字体用来在终端显示图标。&lt;/p&gt;&lt;h3&gt;安装&lt;/h3&gt;&lt;p&gt;如果你已经有一套 Neovim 配置了，需要将位于 &lt;code&gt;~/.config/nvim/&lt;/code&gt; 的配置文件备份到别处，并将配置文件目录 &lt;code&gt;~/.config/nvim/&lt;/code&gt; 与数据目录 &lt;code&gt;~/.local/share/nvim/&lt;/code&gt; 删除。&lt;/p&gt;&lt;p&gt;或者也可以让新旧配置文件共存，添加环境变量 &lt;code&gt;NVIM_APPNAME&lt;/code&gt; 并运行 nvim，比如 &lt;code&gt;NVIM_APPNAME=&amp;quot;nvim-kickstart&amp;quot; nvim&lt;/code&gt; 就可以让 Neovim 以 &lt;code&gt;~/.config/nvim-kickstart&lt;/code&gt; 作为配置文件目录启动，数据目录也会相应的变为 &lt;code&gt;~/.local/share/nvim-kickstart/&lt;/code&gt;，我个人是在 &lt;code&gt;.zshrc&lt;/code&gt; 中添加了一行 alias：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;alias k=&amp;#x27;NVIM_APPNAME=&amp;quot;nvim-kickstart&amp;quot; nvim&amp;#x27;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就可以用命令 &lt;code&gt;k&lt;/code&gt; 来启动新的 Neovim 配置文件，而常规的 &lt;code&gt;nvim&lt;/code&gt; 命令则是启动旧的配置文件。&lt;/p&gt;&lt;p&gt;之后将 kickstart 项目克隆到本地，我个人并没有用原版的 kickstart，而是用的它的一个 Fork，&lt;a href="https://github.com/dam9000/kickstart-modular.nvim" target="_blank"&gt;kickstart-modular&lt;/a&gt;，相比于原版的 kickstart，这个项目将配置文件拆成了多份，在管理上更方便一些，实际内容是一样的。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;git clone https://github.com/dam9000/kickstart-modular.nvim.git &amp;quot;${XDG_CONFIG_HOME:-$HOME/.config}&amp;quot;/nvim&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然如果选择了新旧配置文件共存，需要相应修改路径：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;git clone https://github.com/dam9000/kickstart-modular.nvim.git &amp;quot;${XDG_CONFIG_HOME:-$HOME/.config}&amp;quot;/nvim-kickstart&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另外文档中也比较推荐自己将仓库 Fork 下来，并克隆自己的 Fork 仓库，这样在后期比较方便版本管理与维护。&lt;/p&gt;&lt;p&gt;之后重新打开 Neovim，插件管理器 Lazy 会自动下载安装插件，之后呈现在你面前的就是一个完全配置好开箱即用的 Neovim 配置了。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/d40ed15b51eb8618060148ac278a568c.png" src="https://cdnfile.sspai.com/2024/07/03/d40ed15b51eb8618060148ac278a568c.png"/&gt;&lt;/figure&gt;&lt;p&gt;之后你就可以探索这套配置可以用来做什么了。它用了 &lt;a href="https://github.com/folke/which-key.nvim" target="_blank"&gt;Which Key&lt;/a&gt; 插件用来管理快捷键，只要按下 leader 键（在这套配置里是空格键），并停顿半秒钟，屏幕上面就会显现目前所有可用的快捷键了；&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/db0fd3424bd3cddac39e8ed4c45f9996.png" src="https://cdnfile.sspai.com/2024/07/03/db0fd3424bd3cddac39e8ed4c45f9996.png"/&gt;&lt;/figure&gt;&lt;p&gt;&lt;br/&gt;也可以仔细阅读配置文件中的注释内容，并了解其中每个插件的作用；或者也可以观看作者录制的&lt;a href="https://youtu.be/m8C0Cq9Uv9o" target="_blank"&gt;介绍视频&lt;/a&gt;，以对这个项目有更直观的了解。&lt;/p&gt;&lt;h2&gt;自定义配置&lt;/h2&gt;&lt;p&gt;在了解了这个项目的大致内容后，就需要根据自己的需要对配置进行自定义修改了，在这一节内容中我会 kickstart 的配置进行修改，以满足我自己的使用习惯。&lt;/p&gt;&lt;h3&gt;内置选项&lt;/h3&gt;&lt;p&gt;kickstart 在配置文件中有些选项是默认禁用的没有启用，我们可以根据自己的喜好将其启用，也可以禁用其中一些选项。&lt;/p&gt;&lt;p&gt;首先编辑 &lt;code&gt;init.lua&lt;/code&gt; 文件，找到 &lt;code&gt;vim.g.have_nerd_font = false&lt;/code&gt;，这个选项默认禁用了 Nerd Font 图标字体，使用 Unicode emoji 作为图标字体，如果你的终端已经配置好了 Nerd Font 的话，可以将这个选项改为 true，这样界面中的图标就会以 Nerd Font 图标字体显示了。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/7a97d66e08c7733535649c2228a21ba7.png" src="https://cdnfile.sspai.com/2024/07/03/7a97d66e08c7733535649c2228a21ba7.png"/&gt;&lt;/figure&gt;&lt;p&gt;之后编辑 &lt;code&gt;lua/options.lua&lt;/code&gt; 文件。首先找到 &lt;code&gt;vim.opt.relativenumber = true&lt;/code&gt;，这个选项控制显示相对于当前光标所在行的相对行号，打开这个选项后就可以比较方便地跳转多行。这一行是被注释掉的，删掉前面的 &lt;code&gt;--&lt;/code&gt; 就可以取消注释，另外因为安装了 &lt;a href="https://github.com/numToStr/Comment.nvim" target="_blank"&gt;Comment.nvim&lt;/a&gt; 插件，可以直接在 Visual 模式中选中这一行，按快捷键 &lt;code&gt;gc&lt;/code&gt; 来快速取消注释。&lt;/p&gt;&lt;p&gt;接着找到 &lt;code&gt;vim.opt.clipboard = &amp;#x27;unnamedplus&amp;#x27;&lt;/code&gt;，这个选项可以让 Neovim 与系统共享剪贴板，不过我个人倒不太喜欢这个功能，因为 Vim 每一次剪切或删除操作都会把内容保存进剪贴板，如果与系统共享剪贴板，会导致系统剪贴板被一大堆无意义的内容占据，之后我会定义一个快捷键，专门用来将内容复制到系统剪贴板。同样选中这一行按 &lt;code&gt;gc&lt;/code&gt; 就可以将内容注释掉。&lt;/p&gt;&lt;p&gt;然后找到 &lt;code&gt;vim.opt.undofile = true&lt;/code&gt;，这个选项会将文件的修改历史保存到磁盘里，这样即使退出重新打开文件也可以找到之前的修改历史，不过我个人不太喜欢这个功能，所以将其注释掉了，如果觉得这个功能有用也可以保留。&lt;/p&gt;&lt;h3&gt;快捷键&lt;/h3&gt;&lt;p&gt;我个人主要添加了两组快捷键，一个是快速切换与关闭 buffer，另一个是将当前选中内容复制进系统剪贴板，编辑 &lt;code&gt;lua/keymaps.lua&lt;/code&gt;，在最后插入下面几行：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;-- Changeing buffer
vim.keymap.set(&amp;#x27;n&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;l&amp;#x27;, &amp;#x27;:bnext&amp;lt;CR&amp;gt;&amp;#x27;, { desc = &amp;#x27;Switch to Next buffer&amp;#x27; })
vim.keymap.set(&amp;#x27;n&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;h&amp;#x27;, &amp;#x27;:bprevious&amp;lt;CR&amp;gt;&amp;#x27;, { desc = &amp;#x27;Switch to Previous buffer&amp;#x27; })
vim.keymap.set(&amp;#x27;n&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;bd&amp;#x27;, &amp;#x27;:bd&amp;lt;CR&amp;gt;&amp;#x27;, { desc = &amp;#x27;Delete Current Buffer&amp;#x27; })
vim.keymap.set(&amp;#x27;n&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;b!&amp;#x27;, &amp;#x27;:bd!&amp;lt;CR&amp;gt;&amp;#x27;, { desc = &amp;#x27;Force Delete Current Buffer&amp;#x27; })

-- Yanking into clipboard
vim.keymap.set(&amp;#x27;v&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;y&amp;#x27;, [[&amp;quot;+y]], { desc = &amp;#x27;Yanking into Clipboard&amp;#x27; })&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;kickstart 配置文件中已经定义了 leader 键是空格键，所以上面的快捷键就是：在打开了多个 buffer 的情况下，&lt;code&gt;空格+l&lt;/code&gt; 与 &lt;code&gt;空格+h&lt;/code&gt; 用来在 Buffer 间快速切换，&lt;code&gt;空格+bd&lt;/code&gt; 快速关闭当前 buffer，&lt;code&gt;空格+b!&lt;/code&gt; 强制关闭当前 buffer 不询问是否保存。还有最后一个 &lt;code&gt;空格+y&lt;/code&gt; 将当前选中内容复制进系统剪贴板。&lt;/p&gt;&lt;p&gt;不过 &lt;code&gt;空格+h&lt;/code&gt; 的快捷键与 gitsigns 插件定义的快捷键冲突了，所以还需要改一下 gitsigns 的快捷键，编辑 &lt;code&gt;lua/kickstart/plugins/gitsigns.lua&lt;/code&gt; 文件，找到下面的内容：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;        -- visual mode
        map(&amp;#x27;v&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;hs&amp;#x27;, function()
          gitsigns.stage_hunk { vim.fn.line &amp;#x27;.&amp;#x27;, vim.fn.line &amp;#x27;v&amp;#x27; }
        end, { desc = &amp;#x27;stage git hunk&amp;#x27; })
        map(&amp;#x27;v&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;hr&amp;#x27;, function()
          gitsigns.reset_hunk { vim.fn.line &amp;#x27;.&amp;#x27;, vim.fn.line &amp;#x27;v&amp;#x27; }
        end, { desc = &amp;#x27;reset git hunk&amp;#x27; })
        -- normal mode
        map(&amp;#x27;n&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;hs&amp;#x27;, gitsigns.stage_hunk, { desc = &amp;#x27;git [s]tage hunk&amp;#x27; })
        map(&amp;#x27;n&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;hr&amp;#x27;, gitsigns.reset_hunk, { desc = &amp;#x27;git [r]eset hunk&amp;#x27; })
        map(&amp;#x27;n&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;hS&amp;#x27;, gitsigns.stage_buffer, { desc = &amp;#x27;git [S]tage buffer&amp;#x27; })
        map(&amp;#x27;n&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;hu&amp;#x27;, gitsigns.undo_stage_hunk, { desc = &amp;#x27;git [u]ndo stage hunk&amp;#x27; })
        map(&amp;#x27;n&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;hR&amp;#x27;, gitsigns.reset_buffer, { desc = &amp;#x27;git [R]eset buffer&amp;#x27; })
        map(&amp;#x27;n&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;hp&amp;#x27;, gitsigns.preview_hunk, { desc = &amp;#x27;git [p]review hunk&amp;#x27; })
        map(&amp;#x27;n&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;hb&amp;#x27;, gitsigns.blame_line, { desc = &amp;#x27;git [b]lame line&amp;#x27; })
        map(&amp;#x27;n&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;hd&amp;#x27;, gitsigns.diffthis, { desc = &amp;#x27;git [d]iff against index&amp;#x27; })
        map(&amp;#x27;n&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;hD&amp;#x27;, function()
          gitsigns.diffthis &amp;#x27;@&amp;#x27;
        end, { desc = &amp;#x27;git [D]iff against last commit&amp;#x27; })&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;改成：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;        -- visual mode
        map(&amp;#x27;v&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;gs&amp;#x27;, function()
          gitsigns.stage_hunk { vim.fn.line &amp;#x27;.&amp;#x27;, vim.fn.line &amp;#x27;v&amp;#x27; }
        end, { desc = &amp;#x27;stage git hunk&amp;#x27; })
        map(&amp;#x27;v&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;gr&amp;#x27;, function()
          gitsigns.reset_hunk { vim.fn.line &amp;#x27;.&amp;#x27;, vim.fn.line &amp;#x27;v&amp;#x27; }
        end, { desc = &amp;#x27;reset git hunk&amp;#x27; })
        -- normal mode
        map(&amp;#x27;n&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;gs&amp;#x27;, gitsigns.stage_hunk, { desc = &amp;#x27;git [s]tage hunk&amp;#x27; })
        map(&amp;#x27;n&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;gr&amp;#x27;, gitsigns.reset_hunk, { desc = &amp;#x27;git [r]eset hunk&amp;#x27; })
        map(&amp;#x27;n&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;gS&amp;#x27;, gitsigns.stage_buffer, { desc = &amp;#x27;git [S]tage buffer&amp;#x27; })
        map(&amp;#x27;n&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;gu&amp;#x27;, gitsigns.undo_stage_hunk, { desc = &amp;#x27;git [u]ndo stage hunk&amp;#x27; })
        map(&amp;#x27;n&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;gR&amp;#x27;, gitsigns.reset_buffer, { desc = &amp;#x27;git [R]eset buffer&amp;#x27; })
        map(&amp;#x27;n&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;gp&amp;#x27;, gitsigns.preview_hunk, { desc = &amp;#x27;git [p]review hunk&amp;#x27; })
        map(&amp;#x27;n&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;gb&amp;#x27;, gitsigns.blame_line, { desc = &amp;#x27;git [b]lame line&amp;#x27; })
        map(&amp;#x27;n&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;gd&amp;#x27;, gitsigns.diffthis, { desc = &amp;#x27;git [d]iff against index&amp;#x27; })
        map(&amp;#x27;n&amp;#x27;, &amp;#x27;&amp;lt;leader&amp;gt;gD&amp;#x27;, function()
          gitsigns.diffthis &amp;#x27;@&amp;#x27;
        end, { desc = &amp;#x27;git [D]iff against last commit&amp;#x27; })&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;基本就是把 h 开头的快捷键改成了 g 开头。&lt;/p&gt;&lt;p&gt;之后还需要改一下 which-key 的快捷键提示，编辑 &lt;code&gt;lua/kickstart/plugins/which-key.lua&lt;/code&gt;，找到如下内容：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;      require(&amp;#x27;which-key&amp;#x27;).register {
        [&amp;#x27;&amp;lt;leader&amp;gt;c&amp;#x27;] = { name = &amp;#x27;[C]ode&amp;#x27;, _ = &amp;#x27;which_key_ignore&amp;#x27; },
        [&amp;#x27;&amp;lt;leader&amp;gt;d&amp;#x27;] = { name = &amp;#x27;[D]ocument&amp;#x27;, _ = &amp;#x27;which_key_ignore&amp;#x27; },
        [&amp;#x27;&amp;lt;leader&amp;gt;r&amp;#x27;] = { name = &amp;#x27;[R]ename&amp;#x27;, _ = &amp;#x27;which_key_ignore&amp;#x27; },
        [&amp;#x27;&amp;lt;leader&amp;gt;s&amp;#x27;] = { name = &amp;#x27;[S]earch&amp;#x27;, _ = &amp;#x27;which_key_ignore&amp;#x27; },
        [&amp;#x27;&amp;lt;leader&amp;gt;w&amp;#x27;] = { name = &amp;#x27;[W]orkspace&amp;#x27;, _ = &amp;#x27;which_key_ignore&amp;#x27; },
        [&amp;#x27;&amp;lt;leader&amp;gt;t&amp;#x27;] = { name = &amp;#x27;[T]oggle&amp;#x27;, _ = &amp;#x27;which_key_ignore&amp;#x27; },
        [&amp;#x27;&amp;lt;leader&amp;gt;h&amp;#x27;] = { name = &amp;#x27;Git [H]unk&amp;#x27;, _ = &amp;#x27;which_key_ignore&amp;#x27; },
      }
      -- visual mode
      require(&amp;#x27;which-key&amp;#x27;).register({
        [&amp;#x27;&amp;lt;leader&amp;gt;h&amp;#x27;] = { &amp;#x27;Git [H]unk&amp;#x27; },
      }, { mode = &amp;#x27;v&amp;#x27; })&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;改成：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;      require(&amp;#x27;which-key&amp;#x27;).register {
        [&amp;#x27;&amp;lt;leader&amp;gt;c&amp;#x27;] = { name = &amp;#x27;[C]ode&amp;#x27;, _ = &amp;#x27;which_key_ignore&amp;#x27; },
        [&amp;#x27;&amp;lt;leader&amp;gt;d&amp;#x27;] = { name = &amp;#x27;[D]ocument&amp;#x27;, _ = &amp;#x27;which_key_ignore&amp;#x27; },
        [&amp;#x27;&amp;lt;leader&amp;gt;r&amp;#x27;] = { name = &amp;#x27;[R]ename&amp;#x27;, _ = &amp;#x27;which_key_ignore&amp;#x27; },
        [&amp;#x27;&amp;lt;leader&amp;gt;s&amp;#x27;] = { name = &amp;#x27;[S]earch&amp;#x27;, _ = &amp;#x27;which_key_ignore&amp;#x27; },
        [&amp;#x27;&amp;lt;leader&amp;gt;w&amp;#x27;] = { name = &amp;#x27;[W]orkspace&amp;#x27;, _ = &amp;#x27;which_key_ignore&amp;#x27; },
        [&amp;#x27;&amp;lt;leader&amp;gt;t&amp;#x27;] = { name = &amp;#x27;[T]oggle&amp;#x27;, _ = &amp;#x27;which_key_ignore&amp;#x27; },
        [&amp;#x27;&amp;lt;leader&amp;gt;g&amp;#x27;] = { name = &amp;#x27;{G]it Hunk&amp;#x27;, _ = &amp;#x27;which_key_ignore&amp;#x27; },
        [&amp;#x27;&amp;lt;leader&amp;gt;b&amp;#x27;] = { name = &amp;#x27;[B]uffer&amp;#x27;, _ = &amp;#x27;which_key_ignore&amp;#x27; },
      }
      -- visual mode
      require(&amp;#x27;which-key&amp;#x27;).register({
        [&amp;#x27;&amp;lt;leader&amp;gt;g&amp;#x27;] = { &amp;#x27;[G]it Hunk&amp;#x27; },
      }, { mode = &amp;#x27;v&amp;#x27; })&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;启用内置插件&lt;/h3&gt;&lt;p&gt;kickstart 还有一些内置的插件默认没有启用，我想要启用 autopairs 和 neo-tree 这两个插件，autopairs 可以自动补全括号、双引号这些成对的符号，而 neo-tree 则可以在侧边栏显示一个文件树用来管理文件，按下反斜杠 &lt;code&gt;\&lt;/code&gt; 就可以显示或隐藏文件树。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/b299c4b2dfd81cf2c1c39be6e2fadefd.gif" src="https://cdnfile.sspai.com/2024/07/03/b299c4b2dfd81cf2c1c39be6e2fadefd.gif"/&gt;&lt;/figure&gt;&lt;p&gt;&lt;br/&gt;要启用这两个插件也很简单，编辑 &lt;code&gt;lua/lazy-plugins.lua&lt;/code&gt;，找到以下两行并取消注释：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  -- require &amp;#x27;kickstart.plugins.autopairs&amp;#x27;,
  -- require &amp;#x27;kickstart.plugins.neo-tree&amp;#x27;,&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另外我还想要禁用一个插件 mini.nvim，这是个很多功能简单的小插件的集合，目前下面的状态栏就是用它实现的，不过我后面打算用其他插件来代替它，所以先将它禁用了，找到 &lt;code&gt;require &amp;#x27;kickstart/plugins/mini&amp;#x27;,&lt;/code&gt; 并将其注释掉。&lt;/p&gt;&lt;p&gt;之后重新打开 Neovim，就会自动开始下载缺失的插件，之后输入 &lt;code&gt;:Lazy&lt;/code&gt; 回车打开 Lazy 的主界面，会看到 mini.nvim 已经被禁用了，按大写 &lt;code&gt;X&lt;/code&gt; 就可以将禁用的插件卸载。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/9ec4cc61b385b0751f0ac1ca4ec71a71.png" src="https://cdnfile.sspai.com/2024/07/03/9ec4cc61b385b0751f0ac1ca4ec71a71.png"/&gt;&lt;/figure&gt;&lt;p&gt;此外，kickstart 还有其他插件默认没有启用，比如 nvim-dap 用来 debug，indent-blankline 用来显示缩进，nvim-lint 用来语法检查。&lt;/p&gt;&lt;h3&gt;自动补全&lt;/h3&gt;&lt;p&gt;kickstart 使用 &lt;a href="https://github.com/hrsh7th/nvim-cmp" target="_blank"&gt;nvim-cmp&lt;/a&gt; 插件进行自动补全，这个插件的配置项十分丰富，kickstart 默认只配置了 lsp 与文件系统路径作为补全来源，虽然配置了 Luasnip 来补全代码片段，但没有启用代码片段的来源，而且 kickstart 对 nvim-cmp 的快捷键设定我也不太习惯。所以对这个插件的配置修改会比较复杂。&lt;/p&gt;&lt;p&gt;编辑 &lt;code&gt;lua/kickstart/plugins/cmp.lua&lt;/code&gt;，首先添加更多补全来源，找到下面的内容并取消注释，这启用了 &lt;a href="https://github.com/rafamadriz/friendly-snippets" target="_blank"&gt;friendly-snippets&lt;/a&gt; 插件，包含了很多常用的适用于各种文件格式的代码补全片段：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;          -- {
          --   &amp;#x27;rafamadriz/friendly-snippets&amp;#x27;,
          --   config = function()
          --     require(&amp;#x27;luasnip.loaders.from_vscode&amp;#x27;).lazy_load()
          --   end,
          -- },&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另外我还添加了一些我自己写的代码片段，位于 &lt;code&gt;~/.config/nvim/snippets&lt;/code&gt;，主要是在 Markdown 文档里方便地输入直角引号，具体的内容可以看&lt;a href="https://github.com/so1ar/kickstart.nvim/tree/master/snippets" target="_blank"&gt;这里&lt;/a&gt;。所以修改完之后应该是这样的：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;          {
            &amp;#x27;rafamadriz/friendly-snippets&amp;#x27;,
            config = function()
              require(&amp;#x27;luasnip.loaders.from_vscode&amp;#x27;).lazy_load()
              require(&amp;#x27;luasnip.loaders.from_vscode&amp;#x27;).lazy_load { paths = { &amp;#x27;~/.config/nvim/snippets&amp;#x27; } }
            end,
          },&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后再在插件列表中添加两个插件分别用来补全来自 buffer 中的内容和 vim 命令行的内容：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;      &amp;#x27;hrsh7th/cmp-buffer&amp;#x27;,
      &amp;#x27;hrsh7th/cmp-cmdline&amp;#x27;,&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再在文件最后添加刚刚的补全源：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;        sources = {
          { name = &amp;#x27;nvim_lsp&amp;#x27; },
          { name = &amp;#x27;luasnip&amp;#x27; },
          { name = &amp;#x27;path&amp;#x27; },
          { name = &amp;#x27;buffer&amp;#x27; },
        },
        -- 前面三个是之前就有的，最后的 buffer 是要添加的&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你想在 vim 命令行中或使用 &lt;code&gt;/&lt;/code&gt; 搜索内容时显示补全，则需要添加以下几行：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;      -- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won&amp;#x27;t work anymore).
      cmp.setup.cmdline({ &amp;#x27;/&amp;#x27;, &amp;#x27;?&amp;#x27; }, {
        mapping = cmp.mapping.preset.cmdline(),
        sources = {
          { name = &amp;#x27;buffer&amp;#x27; },
        },
      })

      -- Use cmdline &amp;amp; path source for &amp;#x27;:&amp;#x27; (if you enabled `native_menu`, this won&amp;#x27;t work anymore).
      cmp.setup.cmdline(&amp;#x27;:&amp;#x27;, {
        mapping = cmp.mapping.preset.cmdline(),
        sources = cmp.config.sources({
          { name = &amp;#x27;path&amp;#x27; },
        }, {
          { name = &amp;#x27;cmdline&amp;#x27; },
        }),
        matching = { disallow_symbol_nonprefix_matching = false },
      })&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;默认 nvim-cmp 只会在进入 Insert 模式后才会启用，要想让它在 vim 命令行下也可以自动启用，需要添加相关的 event，找到 &lt;code&gt;event = &amp;#x27;InsertEnter&amp;#x27;,&lt;/code&gt; 这一行，改成 &lt;code&gt;event = { &amp;#x27;InsertEnter&amp;#x27;, &amp;#x27;CmdlineEnter&amp;#x27; },&lt;/code&gt;，这样 nvim-cmp 就会在进入 vim 命令行模式时自动启用了。&lt;/p&gt;&lt;p&gt;接着是自定义快捷键，kickstart 使用 &lt;code&gt;ctrl+n&lt;/code&gt; 和 &lt;code&gt;ctrl+p&lt;/code&gt; 来上下选择不同的补全项，用 &lt;code&gt;ctrl+y&lt;/code&gt; 来选中补全项，对于代码片段，使用 &lt;code&gt;ctrl+l&lt;/code&gt; 和 &lt;code&gt;ctrl+h&lt;/code&gt; 来跳转上一个和下一个占位符。如果你可以接受这个快捷键设定，则无需折腾了，不过我更习惯使用 &lt;code&gt;Tab&lt;/code&gt; 和 &lt;code&gt;Shift+Tab&lt;/code&gt; 来选择补全项，回车来选中补全项。好在这种快捷键在 nvim-cmp 的文档里面有&lt;a href="https://github.com/hrsh7th/nvim-cmp/wiki/Example-mappings#super-tab-like-mapping" target="_blank"&gt;教程&lt;/a&gt;。首先禁用先前定义的快捷键，找到下面这些行，将其注释掉：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;          [&amp;#x27;&amp;lt;C-n&amp;gt;&amp;#x27;] = cmp.mapping.select_next_item(),

          [&amp;#x27;&amp;lt;C-p&amp;gt;&amp;#x27;] = cmp.mapping.select_prev_item(),

          [&amp;#x27;&amp;lt;C-y&amp;gt;&amp;#x27;] = cmp.mapping.confirm { select = true },

          [&amp;#x27;&amp;lt;C-l&amp;gt;&amp;#x27;] = cmp.mapping(function()
            if luasnip.expand_or_locally_jumpable() then
              luasnip.expand_or_jump()
            end
          end, { &amp;#x27;i&amp;#x27;, &amp;#x27;s&amp;#x27; }),
          [&amp;#x27;&amp;lt;C-h&amp;gt;&amp;#x27;] = cmp.mapping(function()
            if luasnip.locally_jumpable(-1) then
              luasnip.jump(-1)
            end
          end, { &amp;#x27;i&amp;#x27;, &amp;#x27;s&amp;#x27; }),
          -- 这些行在配置文件中应该是分散开的&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后添加新的快捷键：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;          [&amp;#x27;&amp;lt;CR&amp;gt;&amp;#x27;] = cmp.mapping(function(fallback)
            if cmp.visible() then
              if luasnip.expandable() then
                luasnip.expand()
              else
                cmp.confirm {
                  select = true,
                }
              end
            else
              fallback()
            end
          end),

          [&amp;#x27;&amp;lt;Tab&amp;gt;&amp;#x27;] = cmp.mapping(function(fallback)
            if cmp.visible() then
              cmp.select_next_item()
            elseif luasnip.locally_jumpable(1) then
              luasnip.jump(1)
            else
              fallback()
            end
          end, { &amp;#x27;i&amp;#x27;, &amp;#x27;s&amp;#x27; }),

          [&amp;#x27;&amp;lt;S-Tab&amp;gt;&amp;#x27;] = cmp.mapping(function(fallback)
            if cmp.visible() then
              cmp.select_prev_item()
            elseif luasnip.locally_jumpable(-1) then
              luasnip.jump(-1)
            else
              fallback()
            end
          end, { &amp;#x27;i&amp;#x27;, &amp;#x27;s&amp;#x27; }),&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再之后还可以自定义补全菜单的&lt;a href="https://github.com/hrsh7th/nvim-cmp/wiki/Menu-Appearance" target="_blank"&gt;外观&lt;/a&gt;，比如说我想在补全菜单中显示图标，首先在插件列表中添加 &lt;code&gt;onsails/lspkind.nvim&lt;/code&gt; 这个插件，之后在 &lt;code&gt;config = function()&lt;/code&gt; 这个函数里面添加一行 &lt;code&gt;local lspkind = require(&amp;#x27;lspkind&amp;#x27;)&lt;/code&gt;，并在 &lt;code&gt;cmp.setup {}&lt;/code&gt; 这个 lua table 里面添加如下内容：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;        formatting = {
          format = lspkind.cmp_format {
            mode = &amp;#x27;symbol_text&amp;#x27;,
            menu = {
              buffer = &amp;#x27;[Buffer]&amp;#x27;,
              nvim_lsp = &amp;#x27;[LSP]&amp;#x27;,
              path = &amp;#x27;[Path]&amp;#x27;,
              luasnip = &amp;#x27;[Snippet]&amp;#x27;,
              cmdline = &amp;#x27;[Cmdline]&amp;#x27;,
            },
          },
        },&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中的 &lt;code&gt;mode&lt;/code&gt; 可以选择 &lt;code&gt;text&lt;/code&gt;、&lt;code&gt;text_symbol&lt;/code&gt;、&lt;code&gt;symbol_text&lt;/code&gt; 以及 &lt;code&gt;symbol&lt;/code&gt;，分别对应只显示文字、先文字后图标、先图标后文字以及只显示图标，&lt;code&gt;menu&lt;/code&gt; 里面是自定义各个补全来源显示的名字。&lt;/p&gt;&lt;p&gt;另外我还配置了显示 Ghost Text，即在光标后面显示预补全内容：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;        experimental = {
          ghost_text = true,
        },&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果觉得这部分的配置太过复杂，&lt;a href="https://github.com/so1ar/kickstart.nvim/blob/master/lua/kickstart/plugins/cmp.lua" target="_blank"&gt;这里&lt;/a&gt;是我完整的 nvim-cmp 的配置文件，直接抄作业就行了。&lt;/p&gt;&lt;p&gt;通过 nvim-cmp，我可以在编辑 Markdown 文档时快速地输入一些内容，比如各级标题、图片、链接、表格等等&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/5f20f782207fc2afb58ae971c56d3313.gif" src="https://cdnfile.sspai.com/2024/07/03/5f20f782207fc2afb58ae971c56d3313.gif"/&gt;&lt;/figure&gt;&lt;h3&gt;LSP 配置&lt;/h3&gt;&lt;p&gt;LSP 的全称是「Language Server Protocol」，是微软开发并开源的一个协议，简单来说就是可以让 Language Server 与编辑器相互沟通，从而为代码提供补全、诊断、Code Action 等等接近完整 IDE 的功能。Neovim 原生支持 LSP，kickstart 使用 &lt;a href="https://github.com/neovim/nvim-lspconfig" target="_blank"&gt;nvim-lspconfig&lt;/a&gt; 插件来配置 Language Server，用 &lt;a href="https://github.com/williamboman/mason.nvim" target="_blank"&gt;Mason.nvim&lt;/a&gt; 插件来自动安装 Language Server。&lt;/p&gt;&lt;p&gt;kickstart 默认为 lua 文件配置了 Lua_ls 和 stylua 作为 Language Server。在上一节配置完 nvim-cmp 后，你会发现在配置文件中出现了一些 Missing fileds 警告：&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/9f01c8611dce18fad44f7694598ced1a.png" src="https://cdnfile.sspai.com/2024/07/03/9f01c8611dce18fad44f7694598ced1a.png"/&gt;&lt;/figure&gt;&lt;p&gt;&lt;br/&gt;但实际上这个警告是不影响功能的，如果觉得这个警告比较恼人，可以选择禁用它，编辑 &lt;code&gt;lua/kickstart/plugins/lspconfig.lua&lt;/code&gt;，找到下面一行取消注释即可：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;              -- diagnostics = { disable = { &amp;#x27;missing-fields&amp;#x27; } },&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果为其他语言配置 Language Server，只需运行 &lt;code&gt;:Mason&lt;/code&gt; 回车打开 Mason 插件的界面，选择自己想要安装的 Language Server 安装即可，或者也可以在配置文件中指定自动安装：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;      vim.list_extend(ensure_installed, {
        &amp;#x27;stylua&amp;#x27;, -- Used to format Lua code
        &amp;#x27;marksman&amp;#x27;, -- Used for markdown file
      })&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另外也可以自定义代码诊断的&lt;a href="https://github.com/neovim/nvim-lspconfig/wiki/UI-Customization#customizing-how-diagnostics-are-displayed" target="_blank"&gt;图标&lt;/a&gt; ，在 &lt;code&gt;config = function()&lt;/code&gt; 后面添加下面这几行：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;      vim.diagnostic.config {
        virtual_text = false,
        signs = true,
        underline = true,
        update_in_insert = false,
        severity_sort = false,
      }

      -- Diagnostics icons
      local signs = { Error = &amp;#x27;󰅚 &amp;#x27;, Warn = &amp;#x27;󰀪 &amp;#x27;, Hint = &amp;#x27;󰌶 &amp;#x27;, Info = &amp;#x27; &amp;#x27; }
      for type, icon in pairs(signs) do
        local hl = &amp;#x27;DiagnosticSign&amp;#x27; .. type
        vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = hl })
      end&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;更多 LSP 相关的自定义可以查看 nvim-lspconfig 的 &lt;a href="https://github.com/neovim/nvim-lspconfig/wiki" target="_blank"&gt;Wiki&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;因为我并不是程序员，LSP 对我来说用处并不大，所以我只打算在一些特定的文件中启用它，在配置文件中添加一行 &lt;code&gt;ft = { &amp;#x27;markdown&amp;#x27;, &amp;#x27;lua&amp;#x27; },&lt;/code&gt;，会让插件只在 Markdown 文件和 Lua 文件中启用，在其他情况下禁用，可以提升一点启动速度。在 Lua 中启用可以让我更好地编辑 Neovim 配置文件，而在 Markdown 中则可以用 marksman 提供的 Code Action 来方便地添加标题目录。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/5e05746b9b5e06f80de605cc236aade0.gif" src="https://cdnfile.sspai.com/2024/07/03/5e05746b9b5e06f80de605cc236aade0.gif"/&gt;&lt;/figure&gt;&lt;h3&gt;文档格式化&lt;/h3&gt;&lt;p&gt;在编辑代码或是文档时，虽然一些格式上的不标准可能并不会影响最终的效果，但对于其他人来说可读性就要差很多，但是大部分时候我们可能没有精力去关心格式是否标准，或者出现了格式错误也很难及时发现，这时就需要借助一些工具来格式化文档了。&lt;/p&gt;&lt;p&gt;kickstart 使用 &lt;a href="https://github.com/stevearc/conform.nvim" target="_blank"&gt;conform.nvim&lt;/a&gt; 插件来格式化文档，并通过 Mason 插件来自动安装格式化工具，conform 支持的工具列表可以看&lt;a href="https://github.com/stevearc/conform.nvim?tab=readme-ov-file#formatters" target="_blank"&gt;这里&lt;/a&gt; 。默认已经配置了使用 stylua 来为 lua 文件格式化，在编辑完 lua 文件后，保存时便可自动格式化，也可以使用快捷键 &lt;code&gt;空格+f&lt;/code&gt; 来手动格式化。&lt;/p&gt;&lt;p&gt;如果不太喜欢在每次保存时自动格式化，可以选择禁用这个功能，编辑 &lt;code&gt;lua/kickstart/plugins/conform.lua&lt;/code&gt; 文件，找到下面的内容注释掉：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;      format_on_save = function(bufnr)
        -- Disable &amp;quot;format_on_save lsp_fallback&amp;quot; for languages that don&amp;#x27;t
        -- have a well standardized coding style. You can add additional
        -- languages here or re-enable it for the disabled ones.
        local disable_filetypes = { c = true, cpp = true }
        return {
          timeout_ms = 500,
          lsp_fallback = not disable_filetypes[vim.bo[bufnr].filetype],
        }
      end,&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;并替换为：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;      format_on_save = false,&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我另外还为 Markdown 文档配置了使用 &lt;a href="https://github.com/huacnlee/autocorrect" target="_blank"&gt;autocorrect&lt;/a&gt; 来进行格式化，可以实现在中英文混输的文档里面为中英文之间自动添加空格，更正标点符号等操作：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;      formatters_by_ft = {
        lua = { &amp;#x27;stylua&amp;#x27; },
        markdown = { &amp;#x27;autocorrect&amp;#x27; },
        -- Conform can also run multiple formatters sequentially
        -- python = { &amp;quot;isort&amp;quot;, &amp;quot;black&amp;quot; },
        --
        -- You can use a sub-list to tell conform to run *until* a formatter
        -- is found.
        -- javascript = { { &amp;quot;prettierd&amp;quot;, &amp;quot;prettier&amp;quot; } },
      },&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/59de553ee6524e0009b80c200412cc17.gif" src="https://cdnfile.sspai.com/2024/07/03/59de553ee6524e0009b80c200412cc17.gif"/&gt;&lt;/figure&gt;&lt;p&gt;不过 autocorrect 目前不支持使用 Mason 来自动安装，需要手动将其安装到当前系统的 $PATH 里面，具体可以参考项目 README 的&lt;a href="https://github.com/huacnlee/autocorrect?tab=readme-ov-file#installation" target="_blank"&gt;安装部分&lt;/a&gt;。另外我还发现使用 autocorrect 最新的 2.11.1 版本，在每次格式化后文件的最后会多出一个空行，而上一个版本 2.10.0 就没这个问题，如果介意的话，可以选择安装旧版本。&lt;/p&gt;&lt;p&gt;为了更快地启动 Neovim，我还配置了让 conform 只在 Lua 和 Markdown 文件中启用，找到 &lt;code&gt;lazy = false,&lt;/code&gt; 一行，将其注释掉，并在其后面添加一行：&lt;code&gt;ft = { &amp;#x27;lua&amp;#x27;, &amp;#x27;markdown&amp;#x27; },&lt;/code&gt;。&lt;/p&gt;&lt;h3&gt;懒加载更多插件&lt;/h3&gt;&lt;p&gt;kickstart 使用 Lazy.nvim 来管理插件，从其名字也可以推测出来，这个插件管理器一大特色功能就是懒加载，Lazy 对插件懒加载的配置可谓十分灵活，可以配置让插件在不同的情况下懒加载。让插件只在必须的时候进行加载，可以很大程度上提升 Neovim 的启动速度。&lt;/p&gt;&lt;p&gt;kickstart 默认已经为一些插件配置了懒加载，还有些插件我前文的配置过程中也按照我自己的使用情况配置了懒加载，不过还有一些插件默认没有配置懒加载，虽然其中大部分插件对启动速度影响并不大，但积少成多还是能省出一点启动时间的。&lt;/p&gt;&lt;p&gt;首先是 vim-sleuth 和 Comment.nvim，这两个插件大概是作为演示作用，没有配置懒加载，也没有放进单独的配置文件，而是直接写在 &lt;code&gt;lua/lazy-plugins.lua&lt;/code&gt; 里面。&lt;/p&gt;&lt;p&gt;vim-sleuth 插件可以自动检测并调整当前文本的 tab 缩进，所以实际上只有在加载 buffer 或是 新建 buffer 的时候才真正有用，所以找到 &lt;code&gt;&amp;#x27;tpope/vim-sleuth&amp;#x27;,&lt;/code&gt; 这一行，改成：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  {
    &amp;#x27;tpope/vim-sleuth&amp;#x27;, -- Detect tabstop and shiftwidth automatically
    event = { &amp;#x27;BufReadPre&amp;#x27;, &amp;#x27;BufNewFile&amp;#x27; },
  },&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Comment.nvim 插件可以快捷地对文档进行注释，这个功能在前文已经介绍过了，我自己实际上也只用到了它的 &lt;code&gt;gc&lt;/code&gt; 快捷键，所以我打算让它只在按下这个快捷键的时候再启用，找到 &lt;code&gt;{ &amp;#x27;numToStr/Comment.nvim&amp;#x27;, opts = {} },&lt;/code&gt; 一行，改成：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  {
    &amp;#x27;numToStr/Comment.nvim&amp;#x27;,
    keys = { &amp;#x27;gc&amp;#x27; },
    opts = {},
  },&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;todo-comments.nvim 这个插件可以自动高亮代码中包含 &lt;code&gt;TODO&lt;/code&gt;、&lt;code&gt;NOTE&lt;/code&gt; 等关键词的注释段落，让注释更有可读性，这个插件也只有在加载 buffer 的时候才有用，编辑 &lt;code&gt;lua/kickstart/plugins/todo-comments.lua&lt;/code&gt;，找到 &lt;code&gt;event = &amp;#x27;VimEnter&amp;#x27;,&lt;/code&gt; 改成 &lt;code&gt;event = { &amp;#x27;BufRead&amp;#x27;, &amp;#x27;BufNewFile&amp;#x27; },&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;gitsigns.nvim 插件提供了 git 的集成，也只有在加载 buffer 的时候才有用，编辑 &lt;code&gt;lua/kickstart/plugins/gitsigns.lua&lt;/code&gt; 添加一行：&lt;code&gt;event = { &amp;#x27;BufReadPre&amp;#x27;, &amp;#x27;BufNewFile&amp;#x27; },&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;which-key.nvim 插件可以帮助显示快捷键，所以在不使用快捷键的时候自然也用不到，编辑 &lt;code&gt;lua/kickstart/plugins/which-key.lua&lt;/code&gt;，将 &lt;code&gt;event = &amp;#x27;VimEnter&amp;#x27;,&lt;/code&gt; 改成 &lt;code&gt;event = &amp;#x27;VeryLazy&amp;#x27;,&lt;/code&gt;。这个的意思大概是在其他东西都加载完之后再加载它，我也是从其他人的配置里抄来的。&lt;/p&gt;&lt;p&gt;nvim-treesitter 插件主要用来显示代码高亮，我为它配置了只在加载 buffer 的时候启用，同样加一行 &lt;code&gt;event = { &amp;#x27;BufReadPre&amp;#x27;, &amp;#x27;BufNewFile&amp;#x27; },&lt;/code&gt; 即可。&lt;/p&gt;&lt;p&gt;telescope.nvim 是一个类似于 Fzf 的模糊查找器，但是功能更强大，telescope 与 kickstart 是同一个作者写的（同时这个作者也是 Neovim 项目的主要维护者之一），自然 kickstart 中有很多功能都用到了 telescope，打开 Lazy 的主界面也可以看到 telescope 的启动占用了挺长的时间。为了让 telescope 实现懒加载而不影响到现有的功能，需要将 telescope 的快捷键重新注册一遍，编辑 &lt;code&gt;lua/kickstart/plugins/telescope.lua&lt;/code&gt;，找到 &lt;code&gt;event = &amp;#x27;VimEnter&amp;#x27;,&lt;/code&gt; 并将其注释掉，并在后面添加如下内容：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    keys = {
      { &amp;#x27;&amp;lt;leader&amp;gt;sh&amp;#x27;, desc = &amp;#x27;[S]earch [H]elp&amp;#x27; },
      { &amp;#x27;&amp;lt;leader&amp;gt;sk&amp;#x27;, desc = &amp;#x27;[S]earch [K]eymaps&amp;#x27; },
      { &amp;#x27;&amp;lt;leader&amp;gt;sf&amp;#x27;, desc = &amp;#x27;[S]earch [F]iles&amp;#x27; },
      { &amp;#x27;&amp;lt;leader&amp;gt;ss&amp;#x27;, desc = &amp;#x27;[S]earch [S]elect Telescope&amp;#x27; },
      { &amp;#x27;&amp;lt;leader&amp;gt;sw&amp;#x27;, desc = &amp;#x27;[S]earch current [W]ord&amp;#x27; },
      { &amp;#x27;&amp;lt;leader&amp;gt;sg&amp;#x27;, desc = &amp;#x27;[S]earch by [G]rep&amp;#x27; },
      { &amp;#x27;&amp;lt;leader&amp;gt;sd&amp;#x27;, desc = &amp;#x27;[S]earch [D]iagnostics&amp;#x27; },
      { &amp;#x27;&amp;lt;leader&amp;gt;sr&amp;#x27;, desc = &amp;#x27;[S]earch [R]esume&amp;#x27; },
      { &amp;#x27;&amp;lt;leader&amp;gt;s.&amp;#x27;, desc = &amp;#x27;[S]earch Recent Files (&amp;quot;.&amp;quot; for repeat)&amp;#x27; },
      { &amp;#x27;&amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;&amp;#x27;, desc = &amp;#x27;[ ] Find existing buffers&amp;#x27; },
      { &amp;#x27;&amp;lt;leader&amp;gt;/&amp;#x27;, desc = &amp;#x27;[/] Fuzzily search in current buffer&amp;#x27; },
      { &amp;#x27;&amp;lt;leader&amp;gt;s/&amp;#x27;, desc = &amp;#x27;[S]earch [/] in Open Files&amp;#x27; },
      { &amp;#x27;&amp;lt;leader&amp;gt;sn&amp;#x27;, desc = &amp;#x27;[S]earch [N]eovim files&amp;#x27; },
    },&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;意思是 telescope 只会在按下上面这些快捷键的时候才会启用，并添加了功能描述方便 which-key 识别。&lt;/p&gt;&lt;p&gt;经过上面这些配置，我这个性能相当弱鸡的笔记本，Neovim 的启动速度也可以控制在 50ms 以下了。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/572a6f0d269189206875474eea66b175.png" src="https://cdnfile.sspai.com/2024/07/03/572a6f0d269189206875474eea66b175.png"/&gt;&lt;/figure&gt;&lt;h2&gt;添加更多插件&lt;/h2&gt;&lt;p&gt;为了满足我的使用习惯，我还需要添加更多插件，好在 kickstart 安装额外插件也比较简单，只要编辑 &lt;code&gt;lua/lazy-plugins.lua&lt;/code&gt; 文件，找到 &lt;code&gt;-- { import = &amp;#x27;custom.plugins&amp;#x27; },&lt;/code&gt; 一行取消注释，之后将想要添加的插件配置放到 &lt;code&gt;lua/custom/plugins&lt;/code&gt; 文件夹里，重新启动 Neovim，就可以自动安装了。&lt;/p&gt;&lt;h3&gt;主题配色&lt;/h3&gt;&lt;p&gt;使用什么样的主题配色这个完全是看个人喜好了，kickstart 默认使用了 tokyonight 主题配色，不过我个人更喜欢 Gruvbox 配色，要使用新的主题配色，首先禁用原来的的 tokyonight 主题，编辑 &lt;code&gt;lua/lazy-plugins.lua&lt;/code&gt; 文件，找到 &lt;code&gt;require &amp;#x27;kickstart/plugins/tokyonight&amp;#x27;,&lt;/code&gt; 并注释掉。然后添加新的主题插件，新建 &lt;code&gt;lua/custom/plugins/gruvbox.lua&lt;/code&gt; 文件，然后重启 Neovim 即可：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;return {
  {
    &amp;#x27;ellisonleao/gruvbox.nvim&amp;#x27;,
    priority = 1000, -- Make sure to load this before all the other start plugins.
    init = function()
      vim.o.background = &amp;#x27;dark&amp;#x27; -- or &amp;quot;light&amp;quot; for light mode
      vim.cmd [[colorscheme gruvbox]]
    end,
  },
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是这样你会发现虽然大部分时候 Neovim 都是用的 Gruvbox 主题，在 Lazy 在安装新插件的时候还是用的之前的主题配色，这是因为 Lazy 默认在安装插件时使用了不同的主题配色，这可能是为了在主题插件还没准备好时防止 Neovim 的默认配色闪瞎眼。你也可以配置 Lazy 在安装插件时使用的主题配色，编辑 &lt;code&gt;lua/lazy-plugins.lua&lt;/code&gt; 文件，在最后一个括号前插入一行：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  install = { colorscheme = { &amp;#x27;gruvbox&amp;#x27; } },&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然如果 gruvbox 插件没装的话这个设置是不起作用的。&lt;/p&gt;&lt;h3&gt;状态栏&lt;/h3&gt;&lt;p&gt;在前面的内容里面我禁用了 mini.nvim 插件，其中就包括状态栏插件，我要用另一个状态栏插件来代替它，就是 &lt;a href="https://github.com/nvim-lualine/lualine.nvim" target="_blank"&gt;lualine.nvim&lt;/a&gt;。新建 &lt;code&gt;lua/custom/plugins/lualine.lua&lt;/code&gt;：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;return {
  &amp;#x27;nvim-lualine/lualine.nvim&amp;#x27;,
  dependencies = { &amp;#x27;nvim-tree/nvim-web-devicons&amp;#x27; },
  event = &amp;quot;VeryLazy&amp;quot;,
  config = function()
    require(&amp;#x27;lualine&amp;#x27;).setup {
      options = {
        theme = &amp;#x27;gruvbox&amp;#x27;,
      },
      sections = {
        lualine_a = { &amp;#x27;mode&amp;#x27; },
        lualine_b = { &amp;#x27;branch&amp;#x27;, &amp;#x27;diff&amp;#x27;, &amp;#x27;diagnostics&amp;#x27; },
        lualine_c = { &amp;#x27;filename&amp;#x27;, &amp;#x27;lsp_progress&amp;#x27; },
        lualine_x = {
          {
            require(&amp;#x27;lazy.status&amp;#x27;).updates,
            cond = require(&amp;#x27;lazy.status&amp;#x27;).has_updates,
            --color = { fg = &amp;quot;#a89984&amp;quot; },
          },
          &amp;#x27;encoding&amp;#x27;,
          &amp;#x27;fileformat&amp;#x27;,
          &amp;#x27;filetype&amp;#x27;,
        },
        lualine_y = { &amp;#x27;progress&amp;#x27; },
        lualine_z = { &amp;#x27;location&amp;#x27; },
      },
      tabline = {
        lualine_a = { &amp;#x27;tabs&amp;#x27; },
        lualine_b = { &amp;#x27;buffers&amp;#x27; },
        lualine_c = {},
        lualine_x = {},
        lualine_y = {},
        lualine_z = {},
      },
    }
  end,
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;除了常规的底部状态栏，我还在顶部添加了标签栏和 buffer 栏，方便结合前面设定的快捷键快速跳转 buffer。&lt;/p&gt;&lt;p&gt;另外我还添加了一个功能用来在状态栏上显示当前有多少插件可以更新，我也忘了是在哪里抄来的了，不过要想这个功能可用，还需要为 Lazy 启用自动检查更新，编辑 &lt;code&gt;lua/lazy-plugins.lua&lt;/code&gt;，在最后一个括号前插入一行：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  checker = { enabled = true, frequency = 600, notify = false },&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个的意思是启用自动检查更新，10 分钟检查一次，并禁用更新通知（因为有更新的话会在状态栏上显示）。&lt;/p&gt;&lt;p&gt;更多的配置项可以查看 lualine 的文档&lt;/p&gt;&lt;h3&gt;输入法切换&lt;/h3&gt;&lt;p&gt;使用 Vim 编辑中文时，最恼人的一点就是输入法问题，在 Insert 模式输入完中文并退出到 normal 模式后，必须将输入法手动切换到英文模式才可以正常使用，不过还好这个问题也有很多插件可以解决，我目前正在用的插件是 &lt;a href="https://github.com/rlue/vim-barbaric" target="_blank"&gt;vim-barbaric&lt;/a&gt;，可以支持在退出 Insert 模式时自动切换到英文输入法，进入 Insert 模式又切换回中文，我用的 Fcitx5 输入法，可以完美支持，其他输入法请自行测试。新建 &lt;code&gt;lua/custom/plugins/barbaric.lua&lt;/code&gt;：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;return {
  &amp;#x27;rlue/vim-barbaric&amp;#x27;,
  event = &amp;#x27;InsertEnter&amp;#x27;,
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我配置了懒加载，让它在进入 Insert 模式时再启用。&lt;/p&gt;&lt;h3&gt;快速跳转&lt;/h3&gt;&lt;p&gt;使用 Vim 编辑中文另一个让人头疼的问题是几乎完全不支持中文分词，Vim 快捷键用来跳转上一个与下一个单词的快捷键 &lt;code&gt;w&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt;，在中文文档中会直接跳转一整句，要想在中文中实现指哪打哪的快速跳转，就需要借助 &lt;a href="https://github.com/easymotion/vim-easymotion" target="_blank"&gt;vim-easymotion&lt;/a&gt; 和 &lt;a href="https://github.com/zzhirong/vim-easymotion-zh?tab=readme-ov-file" target="_blank"&gt;vim-easymotion-zh&lt;/a&gt; 这两个插件了。vim-easymotion 实现了在 Vim 中搜索并快速跳转，而 vim-easymotion-zh 则在其基础上实现了使用双拼搜索中文。新建 &lt;code&gt;lua/custom/plugins/easymotion.lua&lt;/code&gt;：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;return {
  &amp;#x27;zzhirong/vim-easymotion-zh&amp;#x27;,
  dependencies = { &amp;#x27;easymotion/vim-easymotion&amp;#x27; },
  config = function()
    vim.cmd [[
    let g:EasyMotion_leader_key=&amp;quot;;&amp;quot;
    let g:EasyMotion_skipfoldedline=0
    let g:EasyMotion_space_jump_first=1
    let g:EasyMotion_move_highlight = 0
    let g:EasyMotion_use_migemo = 1
    ]]
  end,
  keys = {
    {
      &amp;#x27;&amp;lt;leader&amp;gt;sp&amp;#x27;,
      &amp;#x27;&amp;lt;Plug&amp;gt;(easymotion-overwin-f2)&amp;#x27;,
      mode = &amp;#x27;n&amp;#x27;,
      desc = &amp;#x27;Search Current Page&amp;#x27;,
    },
  },
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我定义了一个快捷键 &lt;code&gt;空格+sp&lt;/code&gt;，按下快捷键后，输入要跳转内容的前两个英文字母，或是中文的小鹤双拼码，比如「键」这个字就是「jm」，输入后会显示当前页面所有符合搜索结果的位置，按下对应的按键就可快速跳转。当然这个功能只有比较熟悉小鹤双拼的人才能用的比较顺手吧，惯用其他双拼方案的人可以在原作者基础上进行修改，如果根本不熟悉双拼，则可以看看 &lt;a href="https://github.com/ZSaberLv0/vim-easymotion-chs" target="_blank"&gt;vim-easymotion-chs&lt;/a&gt;。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/7c429da1eb8716a8e4381f6dd9adf775.png" src="https://cdnfile.sspai.com/2024/07/03/7c429da1eb8716a8e4381f6dd9adf775.png"/&gt;&lt;/figure&gt;&lt;h3&gt;记住光标位置&lt;/h3&gt;&lt;p&gt;Neovim 默认不会记住上次关闭文件时光标所在的位置，所以每次打开文件时光标都会在第一行，这有时挺烦人的，为了让 Neovim 记住上一次光标的位置，可以添加 &lt;a href="https://github.com/farmergreg/vim-lastplace" target="_blank"&gt;vim-lastplace&lt;/a&gt; 这个插件，新建 &lt;code&gt;lua/custom/plugins/lastplace.lua&lt;/code&gt;：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;return {
  &amp;#x27;farmergreg/vim-lastplace&amp;#x27;,
  event = { &amp;#x27;BufReadPre&amp;#x27;, &amp;#x27;BufNewFile&amp;#x27; },
}&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;处理大文件&lt;/h3&gt;&lt;p&gt;在打开一些比较大的文档时，一些插件，比如 lspconfig 和 treesitter，可能会拖慢 Neovim 的加载速度，严重时会导致 Neovim 卡死，&lt;a href="https://github.com/LunarVim/bigfile.nvim" target="_blank"&gt;bigfile.nvim&lt;/a&gt; 这个插件会在打开大文件时自动禁用一些会拖慢 Neovim 的功能，从而加快 Neovim 的加载，新建 &lt;code&gt;lua/custom/plugins/bigfile.lua&lt;/code&gt;：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;return {
  &amp;#x27;LunarVim/bigfile.nvim&amp;#x27;,
  event = { &amp;quot;FileReadPre&amp;quot;, &amp;quot;BufReadPre&amp;quot;, &amp;quot;User FileOpened&amp;quot; },
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个配置是我从 LunarVim 项目里抄来的，触发文件的大小与禁用哪些功能都可以单独配置，具体可以看项目的文档。&lt;/p&gt;&lt;h3&gt;Markdown 预览&lt;/h3&gt;&lt;p&gt;&lt;a href="https://github.com/iamcco/markdown-preview.nvim" target="_blank"&gt;markdown-preview.nvim&lt;/a&gt; 插件可以在编辑 Markdown 文档时打开一个浏览器页面实时显示文档渲染效果，实现所见即所得。新建 &lt;code&gt;lua/custom/plugins/markdown-preview.lua&lt;/code&gt;：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;return {
  &amp;#x27;iamcco/markdown-preview.nvim&amp;#x27;,
  build = function()
    vim.fn[&amp;#x27;mkdp#util#install&amp;#x27;]()
  end,
  ft = &amp;#x27;markdown&amp;#x27;,
  config = function()
    vim.g.mkdp_filetypes = { &amp;#x27;markdown&amp;#x27; }
    vim.cmd [[let g:mkdp_browser = &amp;#x27;firefox&amp;#x27;]]
  end,
  keys = {
    {
      &amp;#x27;&amp;lt;leader&amp;gt;m&amp;#x27;,
      &amp;#x27;:MarkdownPreviewToggle&amp;lt;CR&amp;gt;&amp;#x27;,
      mode = &amp;#x27;&amp;#x27;,
      desc = &amp;#x27;[M]arkdown Preview&amp;#x27;,
    },
  },
}&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/71e7174af416c85ce99eb5c4b04b84bf.png" src="https://cdnfile.sspai.com/2024/07/03/71e7174af416c85ce99eb5c4b04b84bf.png"/&gt;&lt;/figure&gt;&lt;p&gt;&lt;br/&gt;这里我配置了使用 firefox 来预览 Markdown 文档，定义了一个快捷键 &lt;code&gt;空格+m&lt;/code&gt; 来快速打开预览。不过需要注意的是，插件第一次安装好后还需要下载额外文件，如果下载失败，会导致功能不可用。&lt;/p&gt;&lt;h3&gt;包裹符号&lt;/h3&gt;&lt;p&gt;&lt;a href="https://github.com/tpope/vim-surround" target="_blank"&gt;vim-surround&lt;/a&gt; 插件可以方便地删除、添加以及修改包裹符号，包括括号、引号等等，比如我常用的一个功能，选中一个词，按大写 &lt;code&gt;S&lt;/code&gt;，再按下想要将其包裹的符号，比如引号，就可以快速将其包裹上引号。添加 &lt;code&gt;lua/custom/plugins/surround.lua&lt;/code&gt;：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;return {
  &amp;#x27;tpope/vim-surround&amp;#x27;,
  event = { &amp;#x27;CursorMoved&amp;#x27;, &amp;#x27;CursorMovedI&amp;#x27; },
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;更多这个插件的高级用法，可以查看项目的文档。&lt;/p&gt;&lt;h3&gt;更好的修改历史预览&lt;/h3&gt;&lt;p&gt;在 Vim 中在 Normal 模式下按下 &lt;code&gt;u&lt;/code&gt; 就可以撤销之前的修改，而若是想要更直观地查看自己的修改历史并快速撤销修改，就需要 &lt;a href="https://github.com/mbbill/undotree" target="_blank"&gt;undotree&lt;/a&gt; 这个插件了，这个插件在侧边显示一个菜单用来显示之前的修改历史，并可以在不同的修改历史之间快速跳转。添加 &lt;code&gt;lua/custom/plugins/undotree.lua&lt;/code&gt;：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;return {
  &amp;#x27;mbbill/undotree&amp;#x27;,
  keys = {
    {
      &amp;#x27;&amp;lt;leader&amp;gt;u&amp;#x27;,
      &amp;#x27;:UndotreeToggle&amp;lt;CR&amp;gt;&amp;#x27;,
      mode = &amp;#x27;n&amp;#x27;,
      desc = &amp;#x27;Toggle Undo Tree&amp;#x27;,
    },
  },
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我定义了一个快捷键 &lt;code&gt;空格+u&lt;/code&gt; 用来显示或隐藏侧边菜单。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/5100acb84dc8f5c74756786aa0eafd0e.png" src="https://cdnfile.sspai.com/2024/07/03/5100acb84dc8f5c74756786aa0eafd0e.png"/&gt;&lt;/figure&gt;&lt;h3&gt;打开终端&lt;/h3&gt;&lt;p&gt;在编辑文本时，有时需要临时打开终端执行一些命令，这时就需要退出编辑器，执行完命令后再重新打开编辑器，这就有些麻烦了，而 &lt;a href="https://github.com/akinsho/toggleterm.nvim" target="_blank"&gt;toggleterm.nvim&lt;/a&gt; 这个插件就解决了这个问题，这个插件允许在 Neovim 中临时打开一个终端。新建 &lt;code&gt;lua/custom/plugins/toggleterm.lua&lt;/code&gt;：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;return {
  &amp;#x27;akinsho/toggleterm.nvim&amp;#x27;,
  config = function()
    require(&amp;#x27;toggleterm&amp;#x27;).setup {
      size = 20,
      open_mapping = [[&amp;lt;c-\&amp;gt;]],
      direction = &amp;#x27;float&amp;#x27;,
      float_opts = {
        border = &amp;#x27;curved&amp;#x27;,
      },
    }

    function _G.set_terminal_keymaps()
      local opts = { buffer = 0 }
      vim.keymap.set(&amp;#x27;t&amp;#x27;, &amp;#x27;jk&amp;#x27;, [[&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;]], opts)
    end

    -- if you only want these mappings for toggle term use term://*toggleterm#* instead
    vim.cmd &amp;#x27;autocmd! TermOpen term://* lua set_terminal_keymaps()&amp;#x27;
  end,
  keys = [[&amp;lt;c-\&amp;gt;]],
  cmd = &amp;#x27;ToggleTerm&amp;#x27;,
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个插件默认使用 &lt;code&gt;ctrl+\&lt;/code&gt; 来打开终端，或者也可以用命令 &lt;code&gt;ToggleTerm&lt;/code&gt; 来打开终端，使用快捷键 &lt;code&gt;jk&lt;/code&gt; 来进入「vim 模式」，从而用 vim 快捷键复制当前终端中的任意内容，快捷键 &lt;code&gt;i&lt;/code&gt; 回到终端模式。而且在打开的终端中，还可以再套娃打开一个 Neovim，只要屏幕够大，就可以无限套娃下去，虽然这样并没有什么用就是了。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/57ac4f3c6d25f9313bdc69ac47fbe9ed.png" src="https://cdnfile.sspai.com/2024/07/03/57ac4f3c6d25f9313bdc69ac47fbe9ed.png"/&gt;&lt;/figure&gt;&lt;h2&gt;结尾&lt;/h2&gt;&lt;p&gt;我目前已经将我的 Neovim 配置完全迁移到了基于 kickstart 的配置，相比于旧的配置文件，新的配置不但有更丰富的功能，还有更清晰的结构，方便我后期维护。&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/so1ar/kickstart.nvim" target="_blank"&gt;这里&lt;/a&gt;是我完整的配置文件，想要抄作业的朋友可以直接来看，不过还是推荐在 kickstart 的基础上进行自定义，这样更符合自己的使用习惯，而且能对 Neovim 配置文件的结构有更好的理解。&lt;/p&gt;&lt;/div&gt;</description><author>so1ar</author><guid>https://sspai.com/post/90115</guid><pubDate>Fri, 05 Jul 2024 03:27:30 GMT</pubDate></item><item><title>派早报：双因素认证服务 Authy 数据泄露、FTC 要求公司修改非法保修条款等</title><link>https://sspai.com/post/90218</link><description>&lt;div&gt;&lt;h2&gt;你可能错过的新鲜事&lt;/h2&gt;&lt;h3&gt;双因素认证服务 Authy 数据泄露&lt;/h3&gt;&lt;p&gt;7 月 4 日，Twilio 旗下双因素认证服务 Authy 确定数据泄露。&lt;/p&gt;&lt;p&gt;Twilio 表示其双因素认证服务 Authy 使用的电话号码已被窃取，可能用于钓鱼攻击和其他诈骗活动。该事件源自 2022 年一次网络钓鱼攻击，攻击者访问了 163 个 Twilio 账户的数据，并在 93 个 Authy 账户注册了额外设备。Twilio 发现问题源于一个未经认证的端点，并已修复。上周，威胁行为者 ShinyHunters 在暗网发布了 3300 万个 Authy 账户的电话号码。&lt;/p&gt;&lt;p&gt;Twilio 在安全报告中指出，威胁行为者通过将大量电话号码输入到 Authy 的未加密 API 端点来验证这些号码是否与该应用程序相关。Twilio 建议所有 Authy 用户保持警惕，并在安卓及 iOS 设备上更新 Authy 应用程序（Authy 桌面应用已不维护）。Twilio 表示，目前没有证据显示威胁行为者获得了 Twilio 系统或其他敏感数据的访问权限，Authy 账户也未被泄露。&lt;a href="https://www.theverge.com/2024/7/3/24191791/twilio-authy-2fa-app-phone-numbers-hack-data-breach" target="_blank"&gt;来源&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;FTC 要求公司修改非法保修条款&lt;/h3&gt;&lt;p&gt;7 月 4 日，FTC 要求 ASRock、Gigabyte 和 Zotac 等公司更改非法保修条款，并调查相关保修程序，确保不会非法威胁用户的保修权利。目前，这些公司的保修条款规定产品贴纸撕毁、损坏外壳或打开外壳会导致保修失效，这违反了联邦法律。&lt;/p&gt;&lt;p&gt;2018 年，FTC 曾就类似问题警告任天堂、索尼和微软，随后这些公司更新了其政策。iFixit 的博客指出，「撕毁贴纸保修失效」标签在其他地区可能合法，但在美国存在问题。&lt;a href="https://www.theverge.com/2024/7/3/24191790/asrock-gigabyte-zotac-ftc-warranty-void-right-to-repair" target="_blank"&gt;来源&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Surreal Interactive 推出 Vision Pro 的第三方追踪手柄&lt;/h3&gt;&lt;p&gt;Surreal Interactive 近日为 Apple Vision Pro 推出了一款名为 Surreal Touch 的手柄，设计上与 Meta Quest 的 Touch Pro 手柄相似，具有类似的按钮、握把和扳机布局。&lt;/p&gt;&lt;figure&gt;&lt;img alt="P5PzbzyvMogx6ZxqZYXcZHSCnib" data-original="https://cdnfile.sspai.com/editor/u_/cq3k0h5b34tbnn067b5g.jpeg" src="https://cdnfile.sspai.com/editor/u_/cq3k0h5b34tbnn067b5g.jpeg"/&gt;&lt;/figure&gt;&lt;p&gt;由于 Apple Vision Pro 本身不具备追踪手柄的内置传感器，Surreal Touch 配备了追踪摄像头和一个板载芯片组，能够独立确定自身位置（6DoF），精度达到 10 毫米。用户可通过该公司的 SDK 在原生 Vision Pro 应用中使用这些手柄，或通过 Surreal Link 应用在支持 Apple Vision Pro 的 PCVR 游戏中使用。Surreal Interactive 尚未公布 Surreal Touch 手柄的具体发售价格及时间，但已宣布该手柄将于 8 月开启预售。&lt;a href="https://www.surreal-interactive.com/" target="_blank"&gt;来源&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;macOS 版 ChatGPT 被指以纯文本存储 AI 对话&lt;/h3&gt;&lt;p&gt;开发者 Pedro Vieito 近日在 Thread 平台发布动态，指出 macOS 版 ChatGPT 应用以纯文本形式存储用户对话，这些对话未加密，直接以明文形式保存在本机的固定位置，存在潜在的安全隐患。&lt;/p&gt;&lt;p&gt;后续 OpenAI 第一时间发布了更新，新版本已对聊天对话进行加密，现在第三方无法通过工具查看对话内容。&lt;a href="https://www.theverge.com/2024/7/3/24191636/openai-chatgpt-mac-app-conversations-plain-text" target="_blank"&gt;来源&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;看看就行的小道消息&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;7 月 4 日消息，有消息源称 Apple 将采用台积电先进封装平台 SoIC，也将是除 AMD 外第二位采用该封装平台的企业。据悉，SoIC 是一种 3D 硅堆叠技术，配合先进封装平台 CoWoS 可以大幅提升电晶体密度，实现更快的运行速率。据该消息源表示，Apple 有计划在下一代 M 系列处理器中使用该技术，但也不排除 A 系列处理器采用该技术的可能性。&lt;a href="https://money.udn.com/money/story/5612/8070011?from=edn_subcatelist_cate" target="_blank"&gt;来源&lt;/a&gt;&lt;/li&gt;&lt;li&gt;AndroidAuthority 报道，Google 计划在 Pixel 9 系列中使用超声波屏下指纹识别技术，以取代此前来自 Goodix 的光学扫描仪。光学扫描仪对手指上的水渍、赃污更敏感，且屏幕需要点亮光学扫描仪所在的位置，在暗光环境下对用户不太友好。从传闻来看 Pixel 9 系列将采用 Galaxy S24 Ultra 所使用的型号——高通的 3D Sonic Gen 2 (QFS4008)，但 Pixel Fold 将继续采用电源键内指纹识别方案。&lt;a href="https://www.androidauthority.com/pixel-9-fingerprint-scanner-3456801/" target="_blank"&gt;来源&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;少数派的近期动态&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;面向 AI 时代，共建「多维」未来：多维表格开发者日 | AI 专场&lt;a href="https://sspai.com/post/90180" target="_blank"&gt;&lt;strong&gt;邀你报名&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;。&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;玩出个性桌搭，好拼、好看、好玩的特洛克积木插座新品首发优惠中，&lt;a href="https://sspai.com/post/89696" target="_blank"&gt;&lt;strong&gt;前往选购&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;。&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure&gt;&lt;img alt="OpEfb4qkqoKCkmx6HlicH2xznYb" data-original="https://cdnfile.sspai.com/editor/u_/cq3k0hdb34tbnhc7l7lg.png" src="https://cdnfile.sspai.com/editor/u_/cq3k0hdb34tbnhc7l7lg.png"/&gt;&lt;/figure&gt;&lt;ul&gt;&lt;li&gt;7 月 13 日，我们计划在少数派线下店（深圳南山区海岸城旁边的后海汇商场 B2-40，后海地铁站 A2 出闸后的地铁商场负二楼）举行一次线下活动，有喜欢世界音乐的朋友可以提前关注。&lt;a href="https://sspai.com/link?target=https%3A%2F%2Fwww.amap.com%2Fplace%2FB0JDR9TMCG" target="_blank"&gt;&lt;strong&gt;高德地图&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://maps.apple.com/?address=Yuehai%20Residential%20District%20Haizhu%20Community%20Houhaibin%20Road%203288%20Haohou%20Haihui%20B2-40,%20Nanshan,%20Shenzhen,%20Guangdong%20China&amp;amp;auid=1118678389726048&amp;amp;ll=22.516372,113.940730&amp;amp;lsp=57879&amp;amp;q=Shaoshupai&amp;amp;t=r" target="_blank"&gt;&lt;strong&gt;苹果地图&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;带在身边的一缕风，让夏天更快乐的 4 款小风扇，来看看派商店的&lt;a href="https://sspai.com/post/90075" target="_blank"&gt;&lt;strong&gt;夏日上新&lt;/strong&gt;&lt;/a&gt;。&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;你可能错过的好文章&lt;/h2&gt;&lt;p&gt;&amp;gt; 下载 &lt;a href="https://sspai.com/page/client" target="_blank"&gt;少数派 2.0 客户端&lt;/a&gt;、关注 &lt;a href="https://sspai.com/s/J71e" target="_blank"&gt;少数派公众号&lt;/a&gt;，解锁全新阅读体验 📰&lt;/p&gt;&lt;p&gt;&amp;gt; 实用、好用的 &lt;a href="https://sspai.com/mall" target="_blank"&gt;正版软件&lt;/a&gt;，少数派为你呈现 🚀&lt;/p&gt;&lt;/div&gt;</description><author>少数派编辑部</author><guid>https://sspai.com/post/90218</guid><pubDate>Fri, 05 Jul 2024 00:46:04 GMT</pubDate></item><item><title>空想特摄的浪漫（二）：《假面骑士》入坑指南</title><link>https://sspai.com/post/90188</link><description>&lt;div&gt;&lt;h2&gt;石ノ森章太郎&lt;/h2&gt;&lt;p&gt;说起「假面骑士」，那就不得不提每次片头曲都会出现的「原作——石ノ森章太郎」 。作为假面骑士之父，石之森章太郎贯穿了昭和、平成和令和的所有假面骑士。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/article/5bed826dcae5f31e708e55c448ab1b8b.png" src="https://cdnfile.sspai.com/2024/07/03/article/5bed826dcae5f31e708e55c448ab1b8b.png"/&gt;&lt;/figure&gt;&lt;p&gt;大多数人只知道他是假面骑士的原作者，却不知道，年轻的石之森，曾经是手冢治虫大师在《铁臂阿童木》的助手。也是因为这段缘分，手冢治虫大师让还在高中的石之森章太郎作为漫画家出道了。在出道后，石之森章太郎先后创作了《二级天使》《人造人 009》等经典作品。也和藤子不二雄等人组成了「新漫画党」。&lt;/p&gt;&lt;p&gt;随后石之森开始为东映的特摄企划「假面骑士」开始创作原作漫画。他主要负责提供世界设置和角色设计，并以导演的身份知道了部分作品。也从《假面骑士》开始，东映的特摄帝国正式拉开帷幕。&lt;/p&gt;&lt;p&gt;哦对了，三巨头的最后一位巨头「超级战队系列」，原作也冠着石之森章太郎的名字。&lt;/p&gt;&lt;h2&gt;骑士来了&lt;/h2&gt;&lt;p&gt;彼时日本特摄界还是《奥特曼》的天下，东映看到了特摄的市场，决定也做出自己的当家特摄片。在东映、石之森章太郎的共同努力下，《假面骑士》诞生了。&lt;/p&gt;&lt;h3&gt;昭和骑士&lt;/h3&gt;&lt;p&gt;1971 年，第一作《假面骑士》正式开播。贯穿整个假面骑士历史的另一位「那个男人」——假面骑士一号（本乡猛），也正式登上历史舞台。最初的假面骑士有着诸多特征被后辈们争相模仿（真的不是东映你们创意不足吗），蝗虫的复眼、摩托车、变身腰带、头上的天线、必杀骑士踢等等。&lt;/p&gt;&lt;p&gt;在一号这部作品中，另一个重要的概念也被提出，即&lt;strong&gt;「敌我同源」：假面骑士的能力同对手的能力都来源于同一个力量。&lt;/strong&gt;在第一部作品中出现了一号与二号两位假面骑士，而二号骑士的定位也在后续作品中延续下来，作为「二骑」参与到剧情中，如比较有名的 DIEND 就是作为 DECADE 的二骑出现（也有一说是「空我」，因为在官网中空我是排在 DECADE 后面的）。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/bc77e4d5eb2f84015b132454b0f93b67.png" src="https://cdnfile.sspai.com/2024/07/03/bc77e4d5eb2f84015b132454b0f93b67.png"/&gt;&lt;/figure&gt;&lt;p&gt;第一作一共有 98 集，是所有骑士中最长的一部，这也导致它的放送时间有两年之久。在 1973 年，《假面骑士 V3 》开始放送。前两年有个表情包挺火的，一个红白相间的假面骑士站在天上，指着画面说「nmd，为什么」，那个就是 V3。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/article/348a6708feab2695f3dc0e6d8c57895d.png" src="https://cdnfile.sspai.com/2024/07/03/article/348a6708feab2695f3dc0e6d8c57895d.png"/&gt;&lt;figcaption&gt;名场面.jpg&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;虽然这句话并非出自 V3，但他确实也是嘴巴最臭的一个假面骑士，脏话频出。也正是这种诙谐的风格，让 V3 在放送结束二十年之后的今天依然是收视率最高的一作假面骑士（东映你们好好反省一下行不行）。剧情接着前作，对手依然是改造人，由于敌我同源的主要思想，主角自身也是敌方技术造就的改造人（还是一号二号俩人一起帮他改造的）。&lt;/p&gt;&lt;p&gt;本作中的二骑——骑士人，也是假面骑士系列中首位半露脸的假面骑士。骑士人本身是敌方阵营的科学家，后来被组织陷害从而帮助 V3 守护世界和平。在剧集本作中壮烈牺牲，但是在漫画中透露他只是失去记忆，并在后续战斗中重新找回记忆。&lt;/p&gt;&lt;figure&gt;&lt;img alt="" data-original="https://cdnfile.sspai.com/2024/07/03/6a778ea41a3916645d398ba997cdf778.png" src="https://cdnfile.sspai.com/2024/07/03/6a778ea41a3916645d398ba997cdf778.png"/&gt;&lt;img alt="" data-original="https://cdnfile.sspai.com/2024/07/03/b7bde90d8567cabc0b8927fc173375cd.png" src="https://cdnfile.sspai.com/2024/07/03/b7bde90d8567cabc0b8927fc173375cd.png"/&gt;&lt;/figure&gt;&lt;p&gt;第三作《假面骑士 X》，本作一改以往风格，只有一位假面骑士（也是首位机械骑士），但是有个不是二骑胜似二骑的角色——立花藤兵卫，也就是在系列中被称为「老爹」的人。他是一号机车的技师，也是系列中许多假面骑士的领导者，同时还是一家快餐店的老板。没有意外，本作的假面骑士力量依然是来自敌方组织的技术（主角父亲主导的研究）。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/article/a05932ceadf8afcf6871262f331b38ac.png" src="https://cdnfile.sspai.com/2024/07/03/article/a05932ceadf8afcf6871262f331b38ac.png"/&gt;&lt;/figure&gt;&lt;p&gt;在昭和时代，假面骑士系列探索了许多元素，如成人向的亚马逊、黑日、真·假面骑士，还有单集放送的十周年特别骑士 10 号、20 周年的特别其实 ZO 等。在黑日中，也首次出现了「宿敌」这一概念，也沿用至今。&lt;/p&gt;&lt;p&gt;我现在依然愿意称昭和时代为「假面骑士的黄金时代」，在这个时代，假面骑士保持了多项记录，收视第一第二也都来自这个时代。在这个时代的假面骑士也保留了当时日本影视界的良好作风，深入探讨了许多社会问题。感兴趣的朋友们可以去看看。&lt;/p&gt;&lt;p&gt;值得一提的是，在 2022 年，五十周年之际， Amazon Prime 在日本推出了纪念作《假面骑士 BLACKSUN》，风格更加成人化，血腥的打斗场面比比皆是。同时主题也更加黑暗，完全脱离了「假面骑士」系列在当下的「子供向」主题。十集的剧情，内容非常紧凑且有趣。&lt;/p&gt;&lt;p&gt;相比之下，次年上映的、由庵野秀明导演的《新·假面骑士》，则不太让观众满意。过于线性的剧情，简单且无聊，仿佛在玩一个上世纪的打塔游戏一样，一层一层上去，一层一层通关，最后来到塔顶，打完 boss ，完成人生救赎（顺带救赎了 2 号）。这两部作品都属于成人向，血腥暴力美学展现得淋漓尽致。不过与当下假面骑士宇宙关系并不大，当做外传来看看也是不错的选择。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/0bae70cfc0da54a1ab2bc27f1cf4f43b.png" src="https://cdnfile.sspai.com/2024/07/03/0bae70cfc0da54a1ab2bc27f1cf4f43b.png"/&gt;&lt;/figure&gt;&lt;h3&gt;平成骑士&lt;/h3&gt;&lt;p&gt;平成时代的第一位骑士——假面骑士·空我，诞生于 2000 年。昭和与平成的界限并不是昭和最后一部骑士「黑日 RX」，而是从拍摄风格上发生巨大改变的空我。从空我开始，而作为平成第一作，许多拍摄手法也实现了突破，比较出名的就是通过精密计算并以字母的形式打上了剧中的时间。&lt;/p&gt;&lt;p&gt;骑士腰带的重要性也在这一作中被确定，主角不再需要是改造人了，力量的来源就是腰带本身，而「形态」的概念也从本作开始。可以说我们现在看到的骑士很多设定都是由空我奠定的。而如此精彩的作品，自然也获得了系列唯一一个星云奖。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/article/009b6703e617e000b2a597b883e5527d.png" src="https://cdnfile.sspai.com/2024/07/03/article/009b6703e617e000b2a597b883e5527d.png"/&gt;&lt;/figure&gt;&lt;p&gt;在经历过平成收视王亚极陀后，假面骑士的另一个分水岭也正式被推出——《假面骑士 龙骑》。从龙骑开始，假面骑士的腰带正式成为了一种外挂变身装置，这也直接导致了同一个假面骑士会出现复数变身者的设定。&lt;/p&gt;&lt;p&gt;在本作中也第一次出现了主角骑士死去的画面，且……都是同一个男人，假面骑士·夜骑。细数一下，夜骑在本篇中重伤死亡一次、《RIDER TIME 龙骑》中死过一次、特别篇中死过一次。&lt;/p&gt;&lt;p&gt;本作相比其他的假面骑士也有着其独特的地方，如变身者全部阵亡、结局不确定等。总之在平成时代是我认为非常之帅且好看的一部作品。当然某些地方确实挺……黑深残的。&lt;/p&gt;&lt;figure&gt;&lt;img alt="" data-original="https://cdnfile.sspai.com/2024/07/03/1479fed4a75f22cd5d541edca7b2a6b6.png" src="https://cdnfile.sspai.com/2024/07/03/1479fed4a75f22cd5d541edca7b2a6b6.png"/&gt;&lt;img alt="" data-original="https://cdnfile.sspai.com/2024/07/03/052955da390f4cc5d310bda74bd2581c.png" src="https://cdnfile.sspai.com/2024/07/03/052955da390f4cc5d310bda74bd2581c.png"/&gt;&lt;/figure&gt;&lt;p&gt;时间来到 2005 年，假面骑士系列出现了迄今为止唯一的「异端」——假面骑士·响鬼。本作由于原本是制作组想开启全新系列而筹备的，但是最后还是被划分到了假面骑士中。&lt;/p&gt;&lt;p&gt;这也导致主角团们在本作中并没有使用骑士腰带，变身的时候也没喊「変身」，骑士踢也不复存在。本作的主要元素是和风、阴阳师等，所以在影视风格上也与前作有着较大分别。&lt;/p&gt;&lt;p&gt;响鬼之后的 35 周年纪念作假面骑士 KABUTO ，开创式的将变身器从腰带变成了多种不一样的东西，例如剑、手环、枪座等。&lt;/p&gt;&lt;p&gt;这一部假面骑士的拍摄手法采用了大量静态的「参照物」来体现加速后的战斗，视觉风格非常独特。有意思的是，剧情中多次出现料理对决的剧情，剧组为此也每周在网站上更新食谱。而主角天道总司的演员水岛宏也在后来和歌手结婚，并开设 YouTube 频道做料理。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/3a2226c8184aee06260edbf3cbf53a41.png" src="https://cdnfile.sspai.com/2024/07/03/3a2226c8184aee06260edbf3cbf53a41.png"/&gt;&lt;/figure&gt;&lt;p&gt;顺带一提，中途复出的时候他出演过日本有名的管家——塞巴斯蒂安·米卡利斯。&lt;/p&gt;&lt;p&gt;紧跟着 KABUTO 播出的是电王，这是第一部引入时空穿梭的骑士，同时向世人推出了名为「佐藤健」的荷尔蒙。&lt;/p&gt;&lt;p&gt;感兴趣的朋友可以去看看《浪客剑心真人版》。电王的下一作为假面骑士 KIVA ，第一部以双时间线叙事的作品。而本作最出彩的地方不是吸血鬼题材，而是那个「拥有五条腰带的男人」——武田航平。男演员武田航平在本作中就有了三条腰带了，并在平成倒数第二部作品 BUILD 中又收获了两条，目前仅此一位。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/7322bd36af1a71884f682e6410eb42b2.png" src="https://cdnfile.sspai.com/2024/07/03/7322bd36af1a71884f682e6410eb42b2.png"/&gt;&lt;/figure&gt;&lt;p&gt;时间继续前进，来到 2009 年，「那个男人」——门矢士，一个路过的假面骑士（实际上是大修卡老大）。&lt;/p&gt;&lt;p&gt;作为一个拥有穿梭平行世界能力的超能力者，他收集了所有假面骑士卡牌，被粉丝们亲切的称为「王小明」（感兴趣的朋友们可以搜索一下王小明为何人，非常搞笑的梗）。拥有假面骑士卡牌的门矢士，能够通过这些卡牌来变身成其他的假面骑士，实力非常强劲。也因为其角色关系，他可以合理地客串任何假面骑士。&lt;/p&gt;&lt;p&gt;其名字 DECADE （十年）也意味着其作为平成十周年纪念作的身份。也是从这一年开始，万恶的财团 B 开始加大对骑士系列的插手力度，玩具的贩卖正式成为假面骑士系列的另一个主题。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/8fde2f2ab6aedb4ec5c7e70eac134da0.png" src="https://cdnfile.sspai.com/2024/07/03/8fde2f2ab6aedb4ec5c7e70eac134da0.png"/&gt;&lt;/figure&gt;&lt;p&gt;庆祝了假面骑士平成十周年后，咱们接着往前走，来到了 W 的时代，系列第一作二人合体变身的假面骑士，也为日本演艺界贡献了菅田将晖这一优秀男演员。当然，也为平成时代增添了一个著名的梗——「照井龙你到底行不行」。&lt;/p&gt;&lt;p&gt;这个梗起源于 W 的二骑 ACCEL 的变身者照井龙在每次变身的时候都喜欢把「変身」（henshin）的「hen」拉特别长，导致空耳很像「很~~~行」。舞台也搬到了虚构城市「风都」，不再是现实中的城市。值得一提的是，在 2019 年，名为《风都侦探》的续篇漫画开始连载，并在假面骑士 50 周年纪念之际，宣布动画化。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/c645a7238b0bec6da341c0634324fab0.png" src="https://cdnfile.sspai.com/2024/07/03/c645a7238b0bec6da341c0634324fab0.png"/&gt;&lt;/figure&gt;&lt;p&gt;继续前进，来到平成假面骑士 15 周年纪念，迄今为止出场骑士最多的假面骑士作品铠武正式登场，剧情中出现了多达 25 位骑士。剧情也是走老平成骑士的连续剧形式而非新平成的单元剧形式。而在剧情主轴架构上，我个人认为也有点参照龙骑的意思。大部分剧情都是骑士间的战斗，很少有怪人的登场。&lt;/p&gt;&lt;p&gt;往后继续推三年，迎来了我个人认为在国内属于现象级作品的 BUILD 。得益于主演犬饲贵丈的帅气外表、不出戏的演技与精彩的剧情，BUILD 在国内火出圈。许多年轻观众恐怕也是在这一作入坑假面骑士。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/cf97f039c3a273557e8f5cb68785988a.png" src="https://cdnfile.sspai.com/2024/07/03/cf97f039c3a273557e8f5cb68785988a.png"/&gt;&lt;/figure&gt;&lt;p&gt;本作设定在一个平行世界，世界被分为了东都、北都、西都三个部分（有点捏他柏林墙的意思？）。外星人变身骑士在系列也是头一遭。剧情也是采用了连续剧的方式，并在连续剧中埋藏了许多暗线，让观众有种解开谜团的快感，非常紧凑。同样，本作也有一个非常鬼畜的名场面，出自剧中角色「内海」——&lt;strong&gt;那么，答案就只有一个了，我将效忠于您！&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/bb3575749526a2a51b44cfe3ec7f7c43.png" src="https://cdnfile.sspai.com/2024/07/03/bb3575749526a2a51b44cfe3ec7f7c43.png"/&gt;&lt;/figure&gt;&lt;p&gt;紧跟着 BUILD ，平成年代至贤、至善、至上、至强的骑士王来了！是的没错，说的就是你王小明！啊不，时王。作为平成 20 周年，同时也是平成最后的骑士作品。&lt;/p&gt;&lt;p&gt;从名字上看，Zi-O 应该是致敬了骑士系列 20 周年纪念作 ZO 。而本次腰带的主题也变成了钟表，象征着一个时代的终结与另一个时代的起点。而时间旅行、多骑士能力的题材，也让 DECADE 重返主线剧情，新王与旧王的交替，象征了新时代与旧时代的交替。而 DECADE 也在本作中获得了新平成十年的骑士力量。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/af20d47e623e091522c8af77a97a3b55.png" src="https://cdnfile.sspai.com/2024/07/03/af20d47e623e091522c8af77a97a3b55.png"/&gt;&lt;/figure&gt;&lt;p&gt;从各个角度上看，Zi-O 都是一部划时代的作品。在本作中，可以看到各路前辈们的回归，甚至连变身者演员也有部分回归了，可谓是为了平成年代的结尾下了血本。&lt;/p&gt;&lt;p&gt;本作也是首部在中国大陆获得官方授权播放的骑士作品，并于北京时间周日早上 10 点在腾讯视频同步日本播出。作品中比较出名的梗就是沃兹「沃公公」的那句「庆贺吧！」，使得每次主角获得新能力后变身的剧情都特别喜感。&lt;/p&gt;&lt;p&gt;沃兹的演员渡边圭佑也在之后周杰伦时隔多年的新歌《说好不哭》 MV 中作为男主角搭档日本名模三吉彩花出演。同年，作为配角出演了木村拓哉的现象级日剧《东京大饭店》。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/01baad7d02ec2c8cade6225e3c2828ca.png" src="https://cdnfile.sspai.com/2024/07/03/01baad7d02ec2c8cade6225e3c2828ca.png"/&gt;&lt;figcaption&gt;&lt;a href="https://www.bilibili.com/video/BV1TJ411w7fw/" target="_blank"&gt;图源&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;至此，平成假面骑士与平成时代一起被画上句号。&lt;/p&gt;&lt;h3&gt;令和骑士&lt;/h3&gt;&lt;p&gt;2019 年 5月，德仁天皇继位，改日本年号为令和。同年 9 月，令和第一位假面骑士 01 正式放送。01 正式读法为英文的 Zero One ，取谐音令和（Reiwa）。同时 01 也代表了「第一位」的意思，意为开启令和时代的第一位假面骑士。&lt;/p&gt;&lt;p&gt;在造型上，开场的 01 与最终形态 02 分别参考了昭和老前辈一号与二号。本作首次采用了人工 AI 作为主线故事题材，在视觉效果上也与之前产生了更新迭代。&lt;/p&gt;&lt;figure&gt;&lt;img alt="" data-original="https://cdnfile.sspai.com/2024/07/03/a2d606fad29fc3378b4a2cd2ecaa1de2.png" src="https://cdnfile.sspai.com/2024/07/03/a2d606fad29fc3378b4a2cd2ecaa1de2.png"/&gt;&lt;img alt="" data-original="https://cdnfile.sspai.com/2024/07/03/fdca97708f5b5e98d02736dad0cbd245.png" src="https://cdnfile.sspai.com/2024/07/03/fdca97708f5b5e98d02736dad0cbd245.png"/&gt;&lt;/figure&gt;&lt;p&gt;由于是第一部令和骑士，所以人气非常高，加上人物设定非常讨喜，以至于前期的反派团队、后期的男主帮手「灭亡迅雷」四人组演员在他们的专属外传后，被官方组建成了一只四人乐队。&lt;/p&gt;&lt;p&gt;两年后，男主高桥文哉与女二井桁弘恵作为日剧《我们杀死了，最爱的你》的男女主重聚，并发表了经典的「原来高桥君正经起来是个帅哥呢」的言论。&lt;/p&gt;&lt;figure&gt;&lt;img alt="" data-original="https://cdnfile.sspai.com/2024/07/04/ec2d1937d5624e7dfe317d5b62c62736.jpg" src="https://cdnfile.sspai.com/2024/07/04/ec2d1937d5624e7dfe317d5b62c62736.jpg"/&gt;&lt;img alt="" data-original="https://cdnfile.sspai.com/2024/07/04/78ec84d2bffcca31c4f23ebbaa9c5d50.png" src="https://cdnfile.sspai.com/2024/07/04/78ec84d2bffcca31c4f23ebbaa9c5d50.png"/&gt;&lt;/figure&gt;&lt;p&gt;毕竟在 01 中高桥确实作为一个颜艺大师让人忽略了他的高水准颜值。而在本作的拍摄过程中也发生了一件影响整个特摄行业的大事件——特技演员高桥成二（通称「二叔」）退居二线。高桥担任了除空我与响鬼外每一部平成主骑的皮套演员，并在 DECADE 中被誉为「活着的平成骑士」。&lt;/p&gt;&lt;p&gt;虽然是令和第一位骑士，但是 01 后期崩坏的剧情依然让其口碑不算太好，甚至可以说有点差。好在令和骑士唯一真神出现了。一刻都没有为 01 的口碑感到悲伤、赶到观众眼前的是《假面骑士·圣刃》。&lt;/p&gt;&lt;p&gt;彼时日本动画、漫画、轻小说有着许多「异世界」题材作品，本作同样也将战场设置在异世界。而比较细心的观众肯定也发现了，主角团的骑士有着红蓝黄黑粉五个颜色，这个设定是假面骑士第一次参考石之森老师的另一部特摄原作「超级战队」系列，也延续了第一主角是红色的设定。本作剧情里也有许多伏笔，而伏笔也推动了剧情的前进，并随着剧情的前进各种伏笔慢慢被揭开，让观众看着非常过瘾。也是我个人认为目前令和时代最好看的骑士。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/8b902fcec984faaf6dc722d814e6fc53.png" src="https://cdnfile.sspai.com/2024/07/03/8b902fcec984faaf6dc722d814e6fc53.png"/&gt;&lt;/figure&gt;&lt;p&gt;而圣刃的下一作，来到了骑士 50 周年纪念作——假面骑士利维斯。作为 50 周年纪念作，那必须在许多地方融入前辈们的元素以表敬意。于是……这些元素出现在了皮套上。观众们确实能从皮套上看到部分前辈们的身影。&lt;/p&gt;&lt;p&gt;但是，在我追剧的过程中始终觉得某些皮套真的很不和谐、很不好看……它们的造型都奇形怪状的样子。本作也是假面骑士系列进入国内播出后首次开始非同步播出。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/07/03/db8ee18f9ecd003c9226cb39b4343812.png" src="https://cdnfile.sspai.com/2024/07/03/db8ee18f9ecd003c9226cb39b4343812.png"/&gt;&lt;/figure&gt;&lt;p&gt;利维斯结束后，假面骑士极狐开始放送。可能是受到这几年如《今际之国的爱丽丝》、《鱿鱼游戏》等大逃杀游戏剧集的影响，极狐的主线故事也是大逃杀游戏，同时首次采用第三人称视角叙事手法代入剧情。本作的一大亮点是采用《假面骑士 电王》的「素体」概念。&lt;/p&gt;&lt;p&gt;大家的基础形态除了头不一样其余都是黑色素体，可以通过更换不同的腰带扣来进行形态变化。不过随着剧情推进可以看到所有的角色骑士都是有特定的腰带扣的，使用特定腰带扣的角色能够发挥出与其他普通骑士有着天壤之别的能力。&lt;/p&gt;&lt;p&gt;前期的反派多以怪人为主，但是后期的对手主要是敌对阵营的假面骑士，龙骑的影子也越来越重。所以后面剧场版和龙骑联动我一点都不奇怪，甚至觉得就应该如此。&lt;/p&gt;&lt;figure&gt;&lt;img alt="" data-original="https://cdnfile.sspai.com/2024/07/03/2f14395fb4ed8be27deb1bf50bc4f005.png" src="https://cdnfile.sspai.com/2024/07/03/2f14395fb4ed8be27deb1bf50bc4f005.png"/&gt;&lt;img alt="" data-original="https://cdnfile.sspai.com/2024/07/03/4c29cfc95ea478b2f86aa400ce802c4c.png" src="https://cdnfile.sspai.com/2024/07/03/4c29cfc95ea478b2f86aa400ce802c4c.png"/&gt;&lt;/figure&gt;&lt;p&gt;时间终于来到了 2024 年的新骑士（该说新吗，都快完结了）——假面骑士·歌查德。首次使用炼金术为主题、不知道多少次使用卡片为道具的假面骑士。&lt;/p&gt;&lt;p&gt;在首播当日，不负众望地……被骂惨了。&lt;/p&gt;&lt;p&gt;主角那如同不存在的演技、奇怪的故事都让我从开头就不太看好这部剧。但是东映也是真听观众的话，给男主女主好像在棚内开了个演技课一样，演技肉眼可见地上升，剧情也是越来越好看。不仅写出了令和第一大畜生葛里昂，还把男主和凯米之间的羁绊也写得格外动人。&lt;/p&gt;&lt;p&gt;目前的走势来看，估摸着到了结尾的时候会是令和第二好看的作品（是的令和第一是圣刃）。但是在这部作品中官方画了一个大饼。2024 年作为《假面骑士 DECADE》放送十五周年，官方在还没开播就放出了一个与帝骑哥皮套高度类似的皮套。大家都以为在这个以卡片为主要变身道具的令和作品中，帝骑哥又会回归，结果……不是哥们儿你谁啊？&lt;/p&gt;&lt;figure&gt;&lt;img alt="" data-original="https://cdnfile.sspai.com/2024/07/03/8ebeb8ef117319ff30fbb019e504d3cd.png" src="https://cdnfile.sspai.com/2024/07/03/8ebeb8ef117319ff30fbb019e504d3cd.png"/&gt;&lt;img alt="" data-original="https://cdnfile.sspai.com/2024/07/03/238260edfbd7ae22168d126d5f87d127.png" src="https://cdnfile.sspai.com/2024/07/03/238260edfbd7ae22168d126d5f87d127.png"/&gt;&lt;/figure&gt;&lt;h2&gt;观影推荐&lt;/h2&gt;&lt;p&gt;昭和十几部、平成二十部、令和五部，总计四十部左右的假面骑士，想要一部部看完……当然也没问题，每天刷一部分还是可以在一年内看完的。但是信息量真的太大了，所以这里我推荐几部我认为比较好看的作品。&lt;/p&gt;&lt;p&gt;昭和时代我认为最需要看的作品就是《假面骑士》《假面骑士 V3》《假面骑士 Amazon》。这三部包含了开山之作、收视之最和口味之最。不过拍摄风格非常「昭和」，画面也称不上好，这点是需要提前告知各位的。我碰到很多朋友看到昭和风的画面风格后就表示太老气了完全看不进去。&lt;/p&gt;&lt;p&gt;平成年代由于作品非常多，所以观看量也会更大些。首先要推荐的是《假面骑士·空我》。作为前后承接之作，空我在拍摄手法、画面风格上都有着不小的突破。动作戏也非常精彩，可以感受到拳拳到肉的观影快感。然后要推荐的是《假面骑士·龙骑》。&lt;/p&gt;&lt;p&gt;我是 96 年生人，小时候还有「点播台」可以看。而我的骑士系列启蒙之作就是在点播台看的龙骑。那时候对这个系列就开始产生了浓厚的兴趣，所以在这也推荐给新观众，希望龙骑可以带领各位入坑。再往后是《假面骑士·W》。这部假面骑士属实创新，开创了双人变身骑士的先河。同时菅田将晖也在这进入了大众视野。&lt;/p&gt;&lt;p&gt;另外它的续作《风都侦探》也是非常不错的漫画。推荐各位观众将剧集和漫画连起来看，非常有意思。最后要推荐的就是《假面骑士·时王》了。它是平成的句号，代表了一个时代的终结。平成多数骑士都有参与到这部剧集，但这也导致了剧情比较混乱，没点前作储备很难看懂。&lt;/p&gt;&lt;p&gt;令和阶段，能推荐的作品还真不多。圣刃作为令和目前的唯一真神，是非看不可的作品。伏笔、暗线层出不穷。骑士的皮套风格也非常帅，变身过场也是少有地切换了背景。其次就是需要关注的《假面骑士·歌查德》，目前稳中向好，剧情非常不错，层层递进，主角的演技也飞速提升。&lt;/p&gt;&lt;h2&gt;结语&lt;/h2&gt;&lt;p&gt;假面骑士系列作为三大特摄目前最赚钱的作品，很多人可能忽视了它的社会价值。在日本生活的时候，我不止一次在商场的假面骑士玩具柜前流连。能听到小朋友们一直在说喜欢哪个骑士，因为他强大、因为他珍视友情、因为他勇敢。现在虽然是作为子供向作品放送，但是从第一部开始就一直探讨的种族关系、存在价值等话题一直没停过。对于年幼一代来说，它一直在传递正向的价值观，而非单纯只是为了给孩子们提供乐趣。&lt;/p&gt;&lt;p&gt;作为我的特摄启蒙作品，它对我的影响远超奥特曼。或许我已经不能从这部作品中学到什么了，可是长大后的我再回头看这些作品的时候，我已经可以通过剧情看到它的本质主题，对我而言这也是种快乐、欣慰。也许将来我有孩子，如果假面骑士系列还在更新，我会毫不犹豫带着 TA 一起看。&lt;/p&gt;&lt;p&gt;最后，本文谨纪念当年为我买骑士系列光碟的外公，今天是我们的生日，祝我们生日快乐。&lt;/p&gt;&lt;p&gt;关联阅读：&lt;a href="https://sspai.com/post/87652" target="_blank"&gt;空想特摄的浪漫：奥特曼入坑指南&lt;/a&gt;&lt;/p&gt;&lt;p&gt;题图来自 &lt;a href="https://www.kamen-rider-official.com/columns/allcrewproject/1905/" target="_blank"&gt;仮面ライダー公式ポータルサイト&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&amp;gt; 下载少数派 &lt;a href="https://sspai.com/page/client" target="_blank"&gt;客户端&lt;/a&gt;、关注 &lt;a href="https://www.xiaohongshu.com/user/profile/63f5d65d000000001001d8d4" target="_blank"&gt;少数派小红书&lt;/a&gt;，感受精彩数字生活 🍃&lt;/p&gt;&lt;p&gt;&amp;gt; 实用、好用的 &lt;a href="https://sspai.com/mall" target="_blank"&gt;正版软件&lt;/a&gt;，少数派为你呈现 🚀&lt;/p&gt;&lt;/div&gt;</description><author>ROB1N</author><guid>https://sspai.com/post/90188</guid><pubDate>Thu, 04 Jul 2024 07:00:00 GMT</pubDate></item><item><title>让 RIME 体验更上一层楼：如何用 MediaWiki 扩展词库</title><link>https://sspai.com/post/90068</link><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;Matrix&lt;/strong&gt; &lt;strong&gt;首页推荐&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;&lt;a href="https://sspai.com/matrix" target="_blank"&gt;Matrix&lt;/a&gt; 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。&lt;/p&gt;&lt;p&gt;文章代表作者个人观点，少数派仅对标题和排版略作修改。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;开源输入法 RIME，配合雾凇拼音等精心开发的输入方案，本身就已经满足日常需求——往往这些输入方案都配备包罗万象的常用词库。&lt;/p&gt;&lt;p&gt;然而，这些面向日常输入的词库，不可能涵盖方方面面，对于一些专门领域的词汇则未必有收录。例如，我在写一些游戏、动画番剧的文章时，常常会碰到角色名、地名、术语等没有被输入法收录的情况。因此，我常常免不了在候选字里一顿选，不觉间，输入效率大大降低。&lt;/p&gt;&lt;p&gt;幸运的是，RIME 的用户，可以站在 MediaWiki 百科志愿者们的肩膀上&lt;sup&gt;1&lt;/sup&gt;。&lt;strong&gt;这些百科的词条名，本身就是非常丰富、专业的语料库。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;MediaWiki 是一个百科平台，由维基媒体基金会开发，维基百科就是基于它构建。&lt;a href="https://mzh.moegirl.org.cn/%E8%90%8C%E5%A8%98%E7%99%BE%E7%A7%91:%E5%85%B3%E4%BA%8E" target="_blank"&gt;萌娘百科&lt;/a&gt;、&lt;a href="https://wiki.biligame.com/wiki/%E9%A6%96%E9%A1%B5" target="_blank"&gt;Bilibili 游戏百科（BWiki）&lt;/a&gt;等知名平台也是建构在 MediaWiki 之上。你可以借助 &lt;a href="https://github.com/outloudvi/mw2fcitx" target="_blank"&gt;&lt;strong&gt;MW2Fcitx&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;（MediaWiki To Fcitx）&lt;/strong&gt;这款工具，将这些百科的词条名做成 RIME 词库，大大拓展你的 RIME 输入体验。&lt;/p&gt;&lt;h2&gt;背景：我是怎么发现 MW2Fcitx 的？&lt;/h2&gt;&lt;p&gt;我的主力笔记本用的是 Arch Linux。在配置好 Arch Linux CN 源后，我想安装 RIME 输入法，在 Pacman 中搜索。这时，搜索结果中好像出现了什么神奇的东西：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ pacman -Ss fcitx rime
...
archlinuxcn/fcitx5-pinyin-moegirl-rime 20220218-1
    Fcitx 5 Pinyin Dictionary from zh.moegirl.org.cn
archlinuxcn/fcitx5-pinyin-zhwiki-rime 20210120-1
    Fcitx 5 Pinyin Dictionary from zh.wikipedia.org for rime
...&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;好家伙，它们是专为 RIME 打造的词库，分别采撷自萌娘百科和维基百科。&lt;strong&gt;百科平台的条目本身是个宝藏语料库，添加它们可以大大提升输入体验，不再苦苦一个字一个字地去拼、去凑。&lt;/strong&gt;尤其是萌娘百科的词库，对使用中州韵的ACG爱好者来说，更是天大的福音，从此再也不用担心打不出番剧名、角色名了！&lt;/p&gt;&lt;p&gt;制作这些词库，显然用不着一个个去翻百科。它们都使用 MW2Fcitx 生成。&lt;/p&gt;&lt;p&gt;MW2Fcitx 能够调用 MediaWiki 的 API，从基于 MediaWiki 的百科网站中获取所有的条目标题，将它们汇编成各类输入法可用的词库。像维基百科、萌娘百科都是基于 MediaWiki 搭建的，MW2Fcitx 自然支持它们。&lt;/p&gt;&lt;h2&gt;安装 MW2Fcitx&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;MW2Fcitx 使用 Python 开发&lt;/strong&gt;。如果你的电脑没有安装 Python，可以参考&lt;a href="https://www.runoob.com/python3/python3-install.html" target="_blank"&gt;菜鸟教程的文档&lt;/a&gt;。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在Windows下，你只能使用 &lt;a href="https://www.python.org/downloads/" target="_blank"&gt;Python 的官方版本&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;已知，Msys2 的 Python 无法正确安装 MW2Fcitx 的依赖项，安装时会出错；Scoop 安装的 Python 不带 Pip 工具。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在 Windows、macOS 与 Linux 发行版（除 Arch Linux）中，&lt;strong&gt;借助&lt;/strong&gt;&lt;code&gt;&lt;strong&gt;pip&lt;/strong&gt;&lt;/code&gt;&lt;strong&gt;即可轻松安装&lt;/strong&gt;：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# 在Windows平台上（请先确保你正确安装了官方版Python）
py -m pip install mw2fcitx

# 在其他平台上
pip install mw2fcitx&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;它会安装一个脚本程序&lt;code&gt;mw2fcitx&lt;/code&gt;，pip 会将它放在正确的位置：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;在 Windows 下，&lt;code&gt;pip&lt;/code&gt;会把&lt;code&gt;mw2fcitx&lt;/code&gt;启动脚本安装到 Python 所在目录里。&lt;/li&gt;&lt;li&gt;在 Linux 中则默认安装到&lt;code&gt;~/.local/bin&lt;/code&gt;，你需要手动将该目录加入&lt;code&gt;PATH&lt;/code&gt;中。做法是，打开&lt;code&gt;~/.profile&lt;/code&gt;（若无该文件则请创建），然后加入代码：&lt;code&gt;export PATH=$PATH:/home/&amp;lt;你的用户名&amp;gt;/.local/bin&lt;/code&gt;。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;正确的安装日志类似于下面这样：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Collecting mw2fcitx
  Using cached mw2fcitx-0.13.0-py3-none-any.whl.metadata (3.9 kB)
Collecting OpenCC&amp;gt;=1.1.1.post1 (from mw2fcitx)
  Downloading OpenCC-1.1.7-cp312-cp312-win_amd64.whl.metadata (12 kB)
Collecting pypinyin&amp;gt;=0.38.1 (from mw2fcitx)
  Using cached pypinyin-0.51.0-py2.py3-none-any.whl.metadata (12 kB)
Downloading mw2fcitx-0.13.0-py3-none-any.whl (14 kB)
Downloading OpenCC-1.1.7-cp312-cp312-win_amd64.whl (716 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 716.5/716.5 kB 1.8 MB/s eta 0:00:00
Using cached pypinyin-0.51.0-py2.py3-none-any.whl (1.4 MB)
Installing collected packages: OpenCC, pypinyin, mw2fcitx
Successfully installed OpenCC-1.1.7 mw2fcitx-0.13.0 pypinyin-0.51.0

[notice] A new release of pip is available: 24.0 -&amp;gt; 24.1.1
[notice] To update, run: C:\Users\AnClark\AppData\Local\Programs\Python\Python312\python.exe -m pip install --upgrade pip&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;对于 Arch Linux，由于系统限制，无法直接用 pip 安装。&lt;/strong&gt;你可以使用&lt;a href="https://github.com/AnClark/mw2fcitx-arch-PKGBUILD" target="_blank"&gt;&lt;strong&gt;我制作的 PKGBUILD&lt;/strong&gt;&lt;/a&gt; 来构建、安装 MW2Fcitx 软件包。操作步骤如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# 安装依赖项
sudo pacman -Syu
sudo pacman -S python-hatchling pypinyin
git clone https://github.com/AnClark/mw2fcitx-arch-PKGBUILD

# 构建并安装MW2Fcitx软件包
cd mw2fcitx-arch-PKGBUILD
makepkg
sudo pacman -U python-mw2fcitx-3.10-1-any.pkg.tar.zst&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;寻找支持的 MediaWiki 站点&lt;/h2&gt;&lt;p&gt;要想使用 MW2Fcitx，你首先需要找到一款使用 MediaWiki 搭建的百科平台，然后再找到该平台的 API 地址。&lt;/p&gt;&lt;p&gt;MW2Fcitx 通过调用 MediaWiki 的 API 来获取词条列表，API 调用的入口为站点上的一个 PHP 文件——&lt;code&gt;api.php&lt;/code&gt;。通常绝大部分 MediaWiki 站点的 api.php 位于站点根目录（如中文维基百科）。同时，&lt;strong&gt;也存在特殊的例子：&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;中文维基百科&lt;/strong&gt;，API 地址为&lt;code&gt;https://zh.m.wikipedia.org/w/api.php&lt;/code&gt;。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;BWiki&lt;/strong&gt;，它由多个子百科组成，每个子百科都是独立的，因此 api.php 位于相应子百科站点的根目录。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;一些百科网站的 MediaWiki API 路径如下表：&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;网站&lt;/th&gt;&lt;th&gt;API地址&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;中文维基百科&lt;/td&gt;&lt;td&gt;https://zh.wikipedia.org/api.php&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;萌娘百科&lt;/td&gt;&lt;td&gt;https://zh.moegirl.org.cn/api.php&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BWiki——明日方舟&lt;/td&gt;&lt;td&gt;https://wiki.biligame.com/arknights/api.php&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BWiki——原神&lt;/td&gt;&lt;td&gt;https://wiki.biligame.com/ys/api.php&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BWiki——崩坏星穹铁道&lt;/td&gt;&lt;td&gt;https://wiki.biligame.com/sr/api.php&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BWiki——赛马娘&lt;/td&gt;&lt;td&gt;https://wiki.biligame.com/umamusume/api.php&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;神奇宝贝百科&lt;/td&gt;&lt;td&gt;https://wiki.52poke.com/api.php&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;其他站点的 API 路径可以根据上面的例子推出。&lt;/p&gt;&lt;p&gt;通过直接在浏览器打开该路径的方法，你也可以判断一个站点是否为 MediaWiki 站点。如果是，则打开的网页将会是帮助文档，如下图所示：&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/06/30/40c1af1e815de1692e0da6110acc1b2b.png" src="https://cdnfile.sspai.com/2024/06/30/40c1af1e815de1692e0da6110acc1b2b.png"/&gt;&lt;figcaption&gt;若能显示这个页面，那么这个百科就是由 MediaWiki 构建的。&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;编写配置文件&lt;/h2&gt;&lt;p&gt;MW2Fcitx 需要配置文件来工作。配置文件名为&lt;code&gt;config.py&lt;/code&gt;，它将用于指定 MW2Fcitx 如何获取并生成词库。&lt;/p&gt;&lt;p&gt;首先，创建一个目录，作为 MW2Fcitx 的工作目录。&lt;/p&gt;&lt;p&gt;在工作目录下，创建一个文件&lt;code&gt;config.py&lt;/code&gt;，填入下面的内容。&lt;strong&gt;请你根据文件中的中文注释，修改相应的字段。注意这些字段是 Python 字符串格式的。&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# By default we assume the configuration is located at a variable
#     called &amp;quot;exports&amp;quot;.
# You can change this with `-n any_name` in the CLI.

from mw2fcitx.tweaks.moegirl import tweaks

exports = {
    # Source configurations.
    &amp;quot;source&amp;quot;: {
        # MediaWiki api.php path, if to fetch titles from online.
        # 【⬇️api_path这一项，指定百科网站的api.php⬇️】
        &amp;quot;api_path&amp;quot;: &amp;quot;https://zh.m.wikipedia.org/w/api.php&amp;quot;,
        # Title file path, if to fetch titles from local file. (optional)
        # Only works if api_path is absent.
        # 【⬇️file_path这一项，指定用于暂存获取内容的文件名⬇️】
        &amp;quot;file_path&amp;quot;: &amp;quot;titles.txt&amp;quot;,
        &amp;quot;kwargs&amp;quot;: {
            # Title number limit for online fetching. (optional)
            # Only works if api_path is provided.
            #&amp;quot;title_limit&amp;quot;: 120,
            # Title list export path. (optional)
            # 【⬇️output这一项是可选的，指定词条列表的输出路径。⬇️】
            #&amp;quot;output&amp;quot;: &amp;quot;titles.txt&amp;quot;
        }
    },
    # Tweaks configurations as an list.
    # Every tweak function accepts a list of titles and return
    #     a list of title.
    &amp;quot;tweaks&amp;quot;:
        tweaks,
    # Converter configurations.
    &amp;quot;converter&amp;quot;: {
        # opencc is a built-in converter.
        # For custom converter functions, just give the function itself.
        &amp;quot;use&amp;quot;: &amp;quot;opencc&amp;quot;,
        &amp;quot;kwargs&amp;quot;: {}
    },
    # Generator configurations.
    &amp;quot;generator&amp;quot;: [{
        # rime is a built-in generator.
        # For custom generator functions, just give the function itself.
        # 【⬇️MW2Fcitx也可以为其他输入法生成词库。默认为RIME生成⬇️】
        &amp;quot;use&amp;quot;: &amp;quot;rime&amp;quot;,
        &amp;quot;kwargs&amp;quot;: {
            # Destination dictionary filename. (optional)
            # 【⬇️output这一项，指定输出的词库文件名，建议以YAML为扩展名】
            &amp;quot;output&amp;quot;: &amp;quot;wikipedia.dict.yaml&amp;quot;
        }
    }]
}&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;strong&gt;特别注意以下字段：&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;api_path&lt;/code&gt;，填写 MediaWiki 网站的 API 路径，通常指向站点的&lt;code&gt;api.php&lt;/code&gt;。&lt;strong&gt;找到百科平台的API路径后，请记得替换该字段。&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;generator/kwargs/output&lt;/code&gt;，是输出词库的文件名。&lt;strong&gt;建议以&lt;/strong&gt;&lt;code&gt;&lt;strong&gt;.dict.yaml&lt;/strong&gt;&lt;/code&gt;&lt;strong&gt;为扩展名，因为RIME似乎会优先识别这个扩展名的文件。&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;source/kwargs/output&lt;/code&gt;，是输出词条列表的文件名，这个参数是可选的。默认为「titles.txt」&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;注意：Windows 在输出词条列表文件时会发生异常&lt;/strong&gt;，因此笔者在上面的例子中，把&lt;code&gt;&amp;quot;output&amp;quot;: &amp;quot;titles.txt&amp;quot;&lt;/code&gt;这一行给注释掉了。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;开始生成词库&lt;/h2&gt;&lt;p&gt;配置文件编写完成后，我们就可以着手生成词库了。&lt;/p&gt;&lt;p&gt;在工作目录下，打开命令行，然后运行 MW2Fcitx：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# 直接运行，不带参数
mw2fcitx&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;稍等片刻，MW2Fcitx 就会自动从百科网站获取词条名称列表，然后经过一系列处理流程，生成 RIME 词库。&lt;/p&gt;&lt;p&gt;正确的执行日志就像以下这样（节选）：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;2024-06-30 17:20:01,969 [DEBUG] Fetching titles from https://somewiki.com/wiki/api.php
2024-06-30 17:20:02,280 [DEBUG] Got 10 pages
.....
2024-06-30 17:20:23,288 [DEBUG] Got 38452 pages
2024-06-30 17:20:23,288 [INFO] Finished.
2024-06-30 17:20:23,289 [DEBUG] 38452 title(s) imported.
2024-06-30 17:20:23,291 [DEBUG] 1 title(s) imported.
2024-06-30 17:20:23,292 [DEBUG] Running 7 pipelines
2024-06-30 17:20:23,292 [DEBUG] Running pipeline 1/7 (cb&amp;#x27;)
......
2024-06-30 17:20:23,835 [DEBUG] Running pipeline 7/7 (tweak_normalize&amp;#x27;)
2024-06-30 17:20:23,848 [DEBUG] Deduplicating 119528 items
2024-06-30 17:20:23,856 [DEBUG] Deduplication completed. 37118 items left.
2024-06-30 17:20:23,857 [DEBUG] Exporting 37118 words with OpenCC
2024-06-30 17:20:24,162 [DEBUG] 1000 converted
......
2024-06-30 17:20:24,687 [DEBUG] 7724 converted
2024-06-30 17:20:24,712 [INFO] Dictionary generated.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;生成的词库位于工作目录下，文件名在配置文件中指定，例如&lt;code&gt;wikipedia.dict.yaml&lt;/code&gt;、&lt;code&gt;GenshinImpact.dict.yaml&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;安装词库&lt;/h2&gt;&lt;p&gt;词库生成后，我们就可以把词库安装到系统中，以供 RIME 调用。不同平台有不同的安装方法。&lt;/p&gt;&lt;h3&gt;1）Linux&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;生成的词库通常安装在 RIME 的资源目录下&lt;/strong&gt;，位于&lt;code&gt;/usr/share/rime-data/&lt;/code&gt;。接下来我们把刚生成的词库复制到该目录下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# 例如：生成的词库名为wikipedia.dict.yaml
sudo cp wikipedia.dict.yaml /usr/share/rime-data/&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 Arch Linux 中安装的&lt;code&gt;fcitx5-pinyin-moegirl-rime&lt;/code&gt;和&lt;code&gt;fcitx5-pinyin-zhwiki-rime&lt;/code&gt;这两个包，也会直接把词库安装在上述目录下。&lt;/p&gt;&lt;h3&gt;2）Windows&lt;/h3&gt;&lt;p&gt;Windows 版的 RIME 是小狼毫（Weasel），&lt;strong&gt;一般我们把生成的词库放在它的&lt;/strong&gt;「&lt;strong&gt;用户文件夹&lt;/strong&gt;」&lt;strong&gt;下&lt;/strong&gt;。该文件夹集中存放用户的配置。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;右击任务栏上的小狼毫图标&lt;/strong&gt;（显示为黑色方框里一个「中」字，或红色方框里一个「A」字母），&lt;strong&gt;选择&lt;/strong&gt;「&lt;strong&gt;用户文件夹&lt;/strong&gt;」。&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/06/30/00f4fff45a50a914efdcdb38d843bb01.png" src="https://cdnfile.sspai.com/2024/06/30/00f4fff45a50a914efdcdb38d843bb01.png"/&gt;&lt;figcaption&gt;小狼毫的右键菜单。&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;此时会在资源管理器里打开用户文件夹。把 MW2Fcitx 生成的词库粘贴到这里，例如我从 BWiki 获取的原神词库（取名为&lt;code&gt;GenshinImpact.dict.yaml&lt;/code&gt;）：&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/06/30/59ee685d63a85a4358c849d788e2daa8.png" src="https://cdnfile.sspai.com/2024/06/30/59ee685d63a85a4358c849d788e2daa8.png"/&gt;&lt;figcaption&gt;小狼毫用户文件夹。红框中的文件就是我刚刚添加的BWiki原神词库。&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;3）macOS&lt;/h3&gt;&lt;p&gt;macOS 下的 RIME 适配为鼠须管（Squirrel）。它的配置方法与小狼毫类似，只是用户文件夹位于&lt;code&gt;~/Library/Rime&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;由于笔者没有 macOS 的电脑，因此无法演示。你可以参照&lt;a href="https://github.com/ssnhd/rime" target="_blank"&gt;这篇教程&lt;/a&gt;里的思路。&lt;/p&gt;&lt;h2&gt;挂载词库&lt;/h2&gt;&lt;p&gt;词库安装完成之后，我们还需要修改 RIME 输入方案的配置文件，以挂载词库。需要注意的是，每套输入方案选用的词库是独立的，这就意味着&lt;strong&gt;若你有多套方案，那么想给几套输入方案挂载词库，就要修改几套输入方案的配置文件&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;修改配置文件需要在用户文件夹中进行&lt;sup&gt;2&lt;/sup&gt;。&lt;/p&gt;&lt;h3&gt;0）不同平台的用户文件夹目录&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Fcitx4：&lt;code&gt;~/.config/fcitx/rime/&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Fcitx5：&lt;code&gt;~/.local/share/fcitx/rime/&lt;/code&gt;&lt;/li&gt;&lt;li&gt;小狼毫、鼠须管：请参照上一章。&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;1）RIME 自带方案（以朙月拼音为例）&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;第一步，新建自定义词典文件。&lt;/strong&gt;在用户文件夹目录中，新建&lt;code&gt;luna_pinyin.mydict.dict.yaml&lt;/code&gt;（&lt;code&gt;mydict&lt;/code&gt;部分可任取），内容如下：&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;---
name: luna_pinyin.mydict    # 必须与文件名的相应部分保持一致
version: &amp;quot;1.0&amp;quot;
sort: by_weight    # 默认以词频排序
use_preset_vocabulary: true
# 此处为朙月拼音载入的词库列表
import_tables:
  - luna_pinyin      # 朙月拼音基本词库
  - moegirl          # 萌娘百科（由fcitx5-pinyin-moegirl-rime提供）
  - zhwiki           # 中文维基百科（由fcitx5-pinyin-zhwiki-rime提供）
  - GenshinImpact    # 在教程上文中生成的词库
---&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;必须保留 YAML 正文前后的各 3 个横杠，这是词库的固定语法。&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;第二步，新建自定义拼音方案文件。&lt;/strong&gt;在 RIME 中，用户修改拼音方案并不是直接修改源文件，而是以「打补丁」的形式进行。在配置文件目录中，新建&lt;code&gt;luna_pinyin_simp.custom.yaml&lt;/code&gt;，内容如下：&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;# luna_pinyin_simp.custom.yaml
patch:
# 指定自定义词库，字段值就是第一步中&amp;quot;name&amp;quot;字段的内容
  &amp;quot;translator/dictionary&amp;quot;: luna_pinyin.mydict&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;第三步，重新部署。&lt;/strong&gt;右键点击系统托盘的 RIME 图标，选择「重新部署」，稍等片刻即可使用。&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;2）第三方拼音方案（以雾凇拼音为例）&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;第一步：新建/打开配置文件。&lt;/strong&gt;在用户文件夹目录中，打开&lt;code&gt;rime_ice.dict.yaml&lt;/code&gt;。如果你是在 Arch Linux 发行版中安装雾凇拼音，那么用户文件夹目录里是没有该文件的，你需要从&lt;code&gt;/usr/share/rime-data/&lt;/code&gt;中复制一份过来。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;第二步：修改配置文件。&lt;/strong&gt;找到&lt;code&gt;import_tables&lt;/code&gt;字段，在文件注释「建议把扩展词库放到下面...」&lt;sup&gt;3&lt;/sup&gt;下方加入我们的词库。如下所示（下面为该文件的节选）：&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;# Rime dictionary
# encoding: utf-8

---
name: rime_ice
version: &amp;quot;2023-11-13&amp;quot;
import_tables:
  - cn_dicts/8105     # 字表
  # - cn_dicts/41448  # 大字表（按需启用）
  - cn_dicts/base     # 基础词库
  - cn_dicts/ext      # 扩展词库
  - cn_dicts/tencent  # 腾讯词向量（大词库，部署时间较长）
  - cn_dicts/others   # 一些杂项

  # 建议把扩展词库放到下面，有重复词条时，最上面的权重生效
  # - cn_dicts/mydict
  # 【⬇️在下面添加你的词库。注意每一行前面有两个空格缩进。⬇️】
  - GenshinImpact     # 在教程上文中生成的词库
...

# 以下部分省略。&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;第三步，重新部署。&lt;/strong&gt;右键点击系统托盘的 RIME 图标，选择「重新部署」，稍等片刻即可使用。&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;友情提示：&lt;/strong&gt;如果加载了&lt;a href="https://github.com/felixonmars/fcitx5-pinyin-zhwiki/releases" target="_blank"&gt;中文维基百科（rime-pinyin-zhwiki）&lt;/a&gt;等大容量的词库，那么重新部署的过程会比较长。请耐心等待。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;添加词库后的效果&lt;/h2&gt;&lt;p&gt;最后，笔者给大家演示添加词库前后输入体验的对比。&lt;/p&gt;&lt;p&gt;我的测试环境是 Windows 11，安装小狼毫，启用雾凇拼音输入方案。添加的词库是 BWiki 原神词库。&lt;/p&gt;&lt;p&gt;添加前的输入效果如下，可见原神的一些词汇没有收录&lt;sup&gt;4&lt;/sup&gt;，例如：&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/06/30/c6c191cded1a40cfaa0653a25ed26545.png" src="https://cdnfile.sspai.com/2024/06/30/c6c191cded1a40cfaa0653a25ed26545.png"/&gt;&lt;figcaption&gt;从上往下：枫丹、尘歌壶、芙宁娜、行秋、璃月。&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;添加词库后，上面的原神词汇都已经收录。笔者自己在做测试的时候，几乎感觉不到词库的完善，直到顺畅输入这些词汇后才反应过来（确信）：&lt;/p&gt;&lt;figure&gt;&lt;img data-original="https://cdnfile.sspai.com/2024/06/30/a1df136be4480268d4ce101b60595e7b.png" src="https://cdnfile.sspai.com/2024/06/30/a1df136be4480268d4ce101b60595e7b.png"/&gt;&lt;figcaption&gt;添加词库后，上面的原神词汇都出现在了候选列表中。&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;写在最后&lt;/h2&gt;&lt;p&gt;对于专门性强的词汇，尤其是游戏、动漫相关的词汇，RIME 的词库未必有收录。幸运的是，热爱相关领域的志愿者们，一直在各个基于 MediaWiki 的平台中做出贡献，他们创建的词条名称就是非常专业和宝贵的语料资源。&lt;/p&gt;&lt;p&gt;运用 MW2Fcitx 来获取这些百科的词条名，制成 RIME 词库并加载，就可以极大地充实我们的词库，满足这些专门领域的输入需求。从此，在撰写文章，尤其是相关领域的文章时，你再也不用一个个地找候选字来造词，想要的词汇都能信手拈来。你的 RIME 输入体验，从现在起，如虎添翼。&lt;/p&gt;&lt;p&gt;&amp;gt; 关注 &lt;a href="https://www.xiaohongshu.com/user/profile/63f5d65d000000001001d8d4" target="_blank"&gt;少数派小红书&lt;/a&gt;，感受精彩数字生活 🍃&lt;/p&gt;&lt;p&gt;&amp;gt; 实用、好用的 &lt;a href="https://sspai.com/mall" target="_blank"&gt;正版软件&lt;/a&gt;，少数派为你呈现 🚀&lt;/p&gt;&lt;/div&gt;</description><author>爱拼安小匠</author><guid>https://sspai.com/post/90068</guid><pubDate>Thu, 04 Jul 2024 03:28:58 GMT</pubDate></item></channel></rss>